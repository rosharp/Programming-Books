<?xml version="1.0" encoding="utf-8"?><FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink"><description><title-info><genre>foreign_comp</genre><genre>comp_programming</genre> <author><first-name>Кент</first-name><last-name>Бек</last-name><id>7e9b6596-5b3f-102b-94c2-fc330996d25d</id></author><book-title>Экстремальное программирование. Разработка через тестирование</book-title><annotation><p>Возвращение знаменитого бестселлера. Изящный, гибкий и понятный код, который легко модифицировать, который корректно работает и который не подкидывает своим создателям неприятных сюрпризов. Неужели подобное возможно? Чтобы достичь цели, попробуйте тестировать программу еще до того, как она написана. Именно такая парадоксальная идея положена в основу методики TDD (Test-Driven-Development – разработка, основанная на тестировании). Бессмыслица? Не спешите делать скороспелые выводы. Рассматривая применение TDD на примере разработки реального программного кода, автор демонстрирует простоту и мощь этой методики. В книге приведены два программных проекта, целиком и полностью реализованных с использованием TDD. За рассмотрением примеров следует обширный каталог приемов работы в стиле TDD, а также паттернов и рефакторингов, имеющих отношение к TDD. Книга будет полезна для любого программиста, желающего повысить производительность своей работы и получить удовольствие от программирования.</p>
</annotation> <keywords>тестирование,искусство программирования,разработка программного обеспечения</keywords><date value="2003-01-01">2003</date> <coverpage><image l:href="#cover.jpg"></image></coverpage><lang>ru</lang><src-lang>en</src-lang> <translator><first-name>П.</first-name><last-name>Анджан</last-name><id>551abace-120e-11e4-824d-0025905a06ea</id></translator><sequence name="Библиотека программиста (Питер)"></sequence></title-info><document-info><author><first-name>Олег</first-name> <last-name>Власов</last-name> <nickname>prussol</nickname> </author> <program-used>FictionBook Editor Release 2.6.7</program-used> <date value="2017-06-28">28.06.2017</date> <src-url>http://www.litres.ru/pages/biblio_book/?art=164068</src-url><src-ocr>Текст предоставлен правообладателем</src-ocr> <id>86e07f7f-5b3f-102b-94c2-fc330996d25d</id> <version>1.0</version> <history><p>V 1.0 by prussol</p>
</history> <publisher><first-name>Издательство</first-name><last-name>Питер</last-name><id>046ebc0b-b024-102a-94d5-07de47c81719</id></publisher></document-info> <publish-info><book-name>Экстремальное программирование: разработка через тестирование. / К. Бек</book-name> <publisher>Питер</publisher> <city>Санкт-Петербург</city> <year>2017</year> <isbn>978-5-496-02570-6</isbn> </publish-info> <custom-info info-type="">Все права защищены. Никакая часть данной книги не может быть воспроизведена в какой бы то ни было форме без письменного разрешения владельцев авторских прав. © 2003 by Pearson Education, Inc. © Перевод на русский язык ООО Издательство «Питер», 2017 © Издание на русском языке, оформление ООО Издательство «Питер», 2017 © Серия «Библиотека программиста», 2017</custom-info> </description><body><title><p>Кент Бек</p>
<p>Экстремальное программирование: разработка через тестирование</p>
</title><epigraph><p>Посвящается Синди: крыльям моей души</p>
</epigraph><section><p>Права на издание получены по соглашению с Addison-Wesley Longman. Все права защищены. Никакая часть данной книги не может быть воспроизведена в какой бы то ни было форме без письменного разрешения владельцев авторских прав.</p>
<empty-line></empty-line><p>Информация, содержащаяся в данной книге, получена из источников, рассматриваемых издательством как надежные. Тем не менее, имея в виду возможные человеческие или технические ошибки, издательство не может гарантировать абсолютную точность и полноту приводимых сведений и не несет ответственности за возможные ошибки, связанные с использованием книги.</p>
<empty-line></empty-line><p>ISBN 978-0321146533 англ.</p>
<p>ISBN 978-5-496-02570-6</p>
<empty-line></empty-line><p>© 2003 by Pearson Education, Inc.</p>
<p>© Перевод на русский язык ООО Издательство «Питер», 2017</p>
<p>© Издание на русском языке, оформление ООО Издательство «Питер», 2017</p>
<p>© Серия «Библиотека программиста», 2017</p>
</section><section><title><p>Предисловие</p>
</title><p><emphasis>Чистый код, который работает</emphasis> (clean code that works), – в этой короткой, но содержательной фразе, придуманной Роном Джеффризом (Ron Jeffries), кроется весь смысл методики разработки через тестирование (Test-Driven Development, TDD). Чистый код, который работает, – это цель, к которой стоит стремиться потому, что</p>
<p>• это предсказуемый способ разработки программ. Вы знаете, когда работу можно считать законченной и не беспокоиться о длинной череде ошибок;</p>
<p>• дает шанс усвоить уроки, которые преподносит код. Если вы воспользуетесь первой же идеей, которая пришла в голову, у вас не будет шанса реализовать вторую, лучшую идею;</p>
<p>• улучшает жизнь пользователей ваших программ;</p>
<p>• позволяет вашим коллегам рассчитывать на вас, а вам – рассчитывать на них;</p>
<p>• писать такой код приятнее.</p>
<p>Но как получить чистый код, который работает? Многие силы мешают нам получить чистый код, а иногда не удается даже получить код, который просто работает. Чтобы избавиться от множества проблем, мы будем разрабатывать код, опираясь на автоматизированное тестирование. Такой стиль программирования называется разработкой через тестирование. Согласно этой методике</p>
<p>• новый код пишется только после того, как будет написан автоматический тест, завершающийся неудачей;</p>
<p>• любое дублирование устраняется.</p>
<p>Два простых правила, не правда ли? Однако они генерируют сложное индивидуальное и групповое поведение со множеством технических последствий:</p>
<p>• в процессе проектирования мы постоянно запускаем код и получаем представление о его работе, это помогает принимать правильные решения;</p>
<p>• мы сами пишем тесты, так как не можем ждать, что кто-то другой напишет тесты для нас;</p>
<p>• наша среда разработки должна быстро реагировать на небольшие модификации кода;</p>
<p>• дизайн программы должен базироваться на использовании множества автономных, слабо связанных компонентов, чтобы упростить тестирование кода.</p>
<p>Два упомянутых правила TDD определяют порядок этапов программирования.</p>
<p>1. Красный – напишите небольшой тест, который не работает, а возможно, даже не компилируется.</p>
<p>2. Зеленый – заставьте тест работать как можно быстрее, при этом не думайте о правильности дизайна и чистоте кода. Напишите ровно столько кода, чтобы тест сработал.</p>
<p>3. Рефакторинг – устраните из написанного кода любое дублирование.</p>
<p>Красный – зеленый – рефакторинг – это мантра TDD.</p>
<p>Если допустить, что такой стиль программирования возможен, можно предположить, что благодаря его использованию код будет содержать существенно меньше дефектов, кроме того, цель работы будет ясна всем, кто принимает в ней участие. Если так, тогда разработка только кода, необходимого для прохождения тестов, приводит также к социальным последствиям:</p>
<p>• при достаточно низкой плотности дефектов команда контроля качества (Quality Assurance, QA) сможет перейти от реагирования на ошибки к их предупреждению;</p>
<p>• с уменьшением количества неприятных сюрпризов менеджеры проекта смогут точнее оценить трудозатраты и вовлечь заказчиков в процесс разработки;</p>
<p>• если темы технических дискуссий будут четко определены, программисты смогут взаимодействовать друг с другом постоянно, а не раз в день или раз в неделю;</p>
<p>• и снова при достаточно низкой плотности дефектов мы сможем каждый день получать интегрированный рабочий продукт с добавленной в него новой функциональностью, благодаря чему мы сможем вступить с нашими заказчиками в деловые отношения совершенно нового типа.</p>
<p>Итак, идея проста, но в чем наш интерес? Почему программист должен взять на себя дополнительную обязанность писать автоматизированные тесты? Зачем программисту двигаться вперед малюсенькими шажками, когда его мозг в состоянии продумать гораздо более сложную структуру дизайна? Храбрость.</p>
<subtitle><emphasis><strong>Храбрость</strong></emphasis></subtitle><p>TDD – это способ управления страхом в процессе программирования. Я не имею в виду страх падения со стула или страх перед начальником. Я имею в виду страх перед задачей, «настолько сложной, что я пока понятия не имею, как ее решить». Боль – это когда природа говорит нам: «Стоп!», а страх – это когда природа говорит нам: «Будь осторожен!» Осторожность – это совсем не плохо, однако помимо пользы страх оказывает на нас некоторое негативное влияние:</p>
<p>• страх заставляет нас заблаговременно и тщательно обдумывать, к чему может привести то или иное действие;</p>
<p>• страх заставляет нас меньше общаться;</p>
<p>• страх заставляет нас пугаться отзывов о нашей работе;</p>
<p>• страх делает нас раздражительными.</p>
<p>Ничего из этого нельзя назвать полезным для процесса программирования, особенно если вы работаете над сложной задачей. Итак, перед нами встает вопрос, как выйти из сложной ситуации и</p>
<p>• не пытаться предсказать будущее, а немедленно приступить к практическому изучению проблемы;</p>
<p>• не отгораживаться от остального мира, а повысить уровень коммуникации;</p>
<p>• не избегать откликов, а, напротив, установить надежную обратную связь и с ее помощью тщательно контролировать результаты своих действий;</p>
<p>• (с раздражением вы должны справиться самостоятельно).</p>
<p>Сравним программирование с подъемом ведра из колодца. Ведро наполнено водой, вы вращаете рычаг, наматывая цепь на ворот и поднимая ведро наверх. Если ведро небольшое, вполне подойдет обычный, свободно вращающийся ворот. Но если ведро большое и тяжелое, вы устанете прежде, чем поднимете его. Чтобы получить возможность отдыхать между поворотами рычага, необходим храповой механизм, позволяющий фиксировать рычаг. Чем тяжелее ведро, тем чаще должны следовать зубья на шестеренке храповика.</p>
<p>Тесты в TDD – это зубья на шестеренке храповика. Заставив тест работать, мы знаем, что теперь тест работает, отныне и навеки. Мы стали на шаг ближе к завершению работы, чем были до того, как тест заработал. После этого мы заставляем работать второй тест, затем третий, четвертый и т. д. Чем сложнее проблема, стоящая перед программистом, тем меньше функциональных возможностей должен охватывать каждый тест.</p>
<p>Читатели книги <emphasis>Extreme Programming Explaine<a type="note" l:href="#n_1">[1]</a></emphasis>, должно быть, обратили внимание на разницу в тоне между экстремальным программированием (Extreme Programming, XP) и разработкой через тестирование (Test-Driven Development, TDD). В отличие от XP методика TDD не является абсолютной. XP говорит: «чтобы двигаться дальше, вы обязаны освоить это и это». TDD – менее конкретная методика. TDD предполагает наличие интервала между принятием решения и получением результатов, и предлагает инструменты управления продолжительностью этого интервала. «Что, если в течение недели я буду проектировать алгоритм на бумаге, а затем напишу код, использовав подход “сначала тесты”? Будет ли это соответствовать TDD?» Конечно, будет. Вы знаете величину интервала между принятием решения и оценкой результатов и осознанно контролируете этот интервал.</p>
<p>Большинство людей, освоивших TDD, утверждают, что их практика программирования изменилась к лучшему. <emphasis>Инфицированные тестами</emphasis> (test infected) – такое определение придумал Эрих Гамма (Erich Gamma), чтобы описать данное изменение. Освоив TDD, вы обнаруживаете, что пишете значительно больше тестов, чем раньше, и двигаетесь вперед малюсенькими шагами, которые раньше показались бы вам бессмысленными. С другой стороны, некоторые программисты, познакомившись с TDD, решают вернуться к использованию прежних практик, зарезервировав TDD для особых случаев, когда обычное программирование не приводит к желаемому прогрессу.</p>
<p>Определенно, существуют задачи, которые невозможно (по крайней мере, на текущий момент) решить только при помощи тестов. В частности, TDD не позволяет механически продемонстрировать адекватность разработанного кода с точки зрения безопасности данных и надежности выполнения параллельных операций. Безусловно, безопасность основана на коде, в котором не должно быть дефектов, однако она основана также на участии человека в процедурах защиты данных. Тонкие проблемы параллельного выполнения операций невозможно с уверенностью воспроизвести, просто запустив некоторый код.</p>
<p>Прочитав эту книгу, вы сможете:</p>
<p>• начать применять TDD;</p>
<p>• писать автоматические тесты;</p>
<p>• выполнять рефакторинг, воплощая решения по одному за раз.</p>
<p>Книга разделена на три части.</p>
<empty-line></empty-line><p><strong>Часть I. На примере денег.</strong> Пример разработки типичного прикладного кода с использованием TDD. Этот пример позаимствован мною у Уорда Каннингэма (Ward Cunningham) много лет назад, и с тех пор я неоднократно использовал его для демонстрации TDD. В нем рассматривается мультивалютная арифметика: выполнение математических операций над денежными величинами, выраженными в различных валютах. Этот пример научит вас писать тесты до тестируемого ими кода и органически развивать проект.</p>
<p><strong>Часть II. На примере xUnit.</strong> Пример тестирования более сложной логики, использующей механизм рефлексии и исключения. В примере рассматривается разработка инфраструктуры автоматического тестирования. Этот пример познакомит вас также с архитектурой xUnit, которая лежит в основе множества инструментов тестирования. Во втором примере вы научитесь двигаться вперед еще меньшими шажками, а также разрабатывать систему с использованием механизмов самой этой системы.</p>
<p><strong>Часть III. Шаблоны разработки через тестирование.</strong> Здесь рассматриваются шаблоны, которые помогут найти ответы на множество вопросов, в частности: какие тесты писать и как их писать с использованием xUnit. Кроме того, здесь вы найдете описание некоторых избранных шаблонов проектирования и рефакторинга, использовавшихся при создании примеров для данной книги.</p>
<empty-line></empty-line><p>Я написал примеры так, будто мы с вами принимаем участие в сеансе парного программирования. Если перед прогулкой вы предпочитаете прежде посмотреть на карту, можете сначала ознакомиться с шаблонами в третьей части книги, а затем рассматривать примеры как их иллюстрацию. Если вы предпочитаете сначала погулять, а потом посмотреть на карте, где побывали, тогда сначала прочитайте первые две части с примерами и обращайтесь к третьей части за справками по мере необходимости. Некоторые из рецензентов данной книги, отмечали, что примеры усваиваются лучше, если во время чтения запустить среду разработки, набирать код и запускать тесты.</p>
<p>Касательно примеров хочу отметить следующее. Оба примера, мультивалютные вычисления и инфраструктура тестирования, могут показаться чрезвычайно простыми. Существуют более сложные, дефектные и уродливые решения этих же самых задач (мне лично неоднократно приходилось сталкиваться с подобными решениями). Чтобы сделать книгу более похожей на реальность, я мог бы продемонстрировать одно из таких решений. Однако моя и, я надеюсь, ваша цель – написать чистый код, который работает. Прежде чем пенять на излишнюю простоту примеров, на несколько секунд представьте себе мир программирования, в котором весь код выглядит также чисто и понятно, в котором нет слишком сложных решений, только проблемы, которые кажутся слишком сложными лишь с первого взгляда. Сложные проблемы нуждаются в тщательном обдумывании. TDD поможет добиться этого.</p>
</section><section><title><p>Благодарности</p>
</title><section><p>Спасибо всем, кто с необычайным усердием и самоотверженностью просматривал рукопись данной книги. Я беру на себя всю ответственность за представленный в книге материал, однако без посторонней помощи данная книга была бы куда менее читабельной и менее полезной. Перечислю всех, кто помогал мне, в произвольном порядке: Стив Фриман (Steve Freeman), Франк Вестфал (Frank Westphall), Рон Джеффриз (Ron Jeffries), Дирк Кёниг (Dirk Koning), Эдвард Хейят (Edward Heiatt), Таммо Фриис (Tammo Freese), Джим Ньюкирк (Jim Newkirk), Йоханнес Линк (Johannes Link), Манфред Ланж (Manfred Lange), Стив Хайес (Steve Hayes), Алан Френсис (Alan Francis), Джонатан Расмуссон (Jonathan Rasmusson), Шейн Клаусон (Shane Clauson), Саймон Крэйз (Simon Crase), Кай Пентекост (Kay Pantecost), Мюррей Бишоп (Murrey Bishop), Райан Кинг (Ryan King), Билл Уэйк (Bill Wake), Эдмунд Швепп (Edmund Schweppe), Кевин Лауренс (Kevin Lawrence), Джон Картер (John Carter), Флип (Phlip), Петер Хансен (Peter Hansen), Бен Шрёдер (Ben Schroeder), Алекс Чаффи (Alex Chaffee), Петер ван Руйен (Peter van Rooijen), Рик Кавала (Rick Kawala), Марк ван Хамерсвельд (Mark van Hamersveld), Дуг Шварц (Doug Swartz), Лорен Боссави (Laurent Bossavit), Илья Преуз (Ilia Preuz), Дэниэл Ле Берре (Daniel Le Berre), Франк Карвер (Frank Carver), Майк Кларк (Mike Clark), Кристиан Пекелер (Christian Pekeler), Карл Скотланд (Karl Scotland), Карл Манастер (Carl Manaster), Дж. Б. Рэйнсбергер (J.B. Rainsberger), Петер Линдберг (Peter Lindberg), Дарач Эннис (Darach Ennis), Кайл Кордес (Kyle Cordes), Джастин Сампсон (Justin Sampson), Патрик Логан (Patrik Logan), Даррен Хоббс (Darren Hobbs), Аарон Сансоне (Aaron Sansone), Сайвер Энстад (Syver Enstad), Шинобу Каваи (Shinobu Kawai), Эрик Мид (Erik Meade), Патрик Логан (Patrik Logan), Дан Росторн (Dan Rawsthorne), Билл Рутисер (Bill Rutiser), Эрик Хэрман (Eric Herman), Пол Чишолм (Paul Chisholm), Аэзим Джалис (Asim Jalis), Айвэн Мур (Ivan Moor), Леви Первис (Levi Purvis), Рик Магридж (Rick Mugridge), Энтони Адаши (Antony Adachi), Найджел Торн (Nigel Thorne), Джон Блей (John Bley), Кари Хойджарви (Kari Hoijarvi), Мануэль Амаго (Manuel Amago), Каору Хосокава (Kaouru Hosokawa), Пэт Эйлер (Pat Eyler), Росс Шоу (Ross Shaw), Сэм Джэнтл (Sam Gentle), Джин Райотт (Jean Rajotte), Филип Антрас (Phillipe Antras) и Джейме Нино (Jaime Nino).</p>
<empty-line></empty-line><p>Я хотел бы выразить свою признательность всем программистам, с которыми разрабатывал код в стиле «сначала тесты». Спасибо вам за терпение и внимание к идее, которая звучала полным сумасшествием, в особенности в самом начале развития TDD. Благодаря вам я научился значительно большему, чем если бы действовал самостоятельно. Мое обучение было наиболее успешным, когда я сотрудничал с Массимо Арнольди (Massimo Arnoldi), Ральфом Битти (Ralph Beatti), Роном Джеффрисом (Ron Jeffries), Мартином Фаулером (Martin Fowler) и (безусловно, не в последнюю очередь) Эрихом Гаммой (Erich Gamma), однако я хотел бы отметить, что помимо этих людей были и другие, благодаря которым я тоже научился очень многому.</p>
<p>Я хотел бы поблагодарить Мартина Фаулера (Martin Fowler) за помощь с FrameMaker. Этот человек должен быть самым высокооплачиваемым на планете специалистом в области подготовки текста к печати (к счастью, он не против, чтобы гонорар за эту книгу целиком достался мне).</p>
<p>Моя карьера настоящего программиста нчалась благодаря наставничеству Уорда Каннингэма и постоянному сотрудничеству с ним. Иногда я рассматриваю разработку через тестирование как попытку дать каждому программисту, работающему в произвольной среде, ощущение комфорта и душевности, которое было у нас с Уордом, когда мы вместе разрабатывали программы на Smalltalk. Не существует способа определить первоначальный источник идей, если два человека обладают одним общим мозгом. Если вы предположите, что все хорошие идеи на самом деле придумал Уорд, вы будете не далеки от истины.</p>
<p>В последнее время сформировалось клише: выражать глубочайшую признательность за те жертвы и лишения, которые вынуждена терпеть семья, один из членов которой заболел идеей написать книгу. Дело в том, что семейные жертвы и лишения так же необходимы для написания книги, как и бумага. Я выражаю свою самую глубочайшую благодарность моим детям, которые не могли приступить к завтраку, пока я не закончу очередную главу, а также моей жене, которая в течение двух месяцев была вынуждена повторять каждую свою фразу три раза.</p>
<p>Спасибо Майку Хэндерсону (Mike Henderson) за воодушевление, а также Марси Барнс (Marcy Barns) за то, что она пришла на помощь в трудную минуту.</p>
<p>Наконец, спасибо неизвестному автору книги, которую я прочитал в 12-летнем возрасте. В той книге было предложено сравнивать две ленты: с реальными результатами и ожидаемыми, и дорабатывать программу, пока реальные результаты не совпадут с ожидаемыми. Спасибо, спасибо, спасибо.</p>
<subtitle><emphasis><strong>От издательства</strong></emphasis></subtitle><p>Ваши замечания, предложения, вопросы отправляйте по адресу электронной почты <emphasis>comp@piter.com</emphasis> (издательство «Питер», компьютерная редакция).</p>
<p>Мы будем рады узнать ваше мнение!</p>
<p>На веб-сайте издательства <emphasis>http://www.piter.com</emphasis> вы найдете подробную информацию о наших книгах.</p>
</section></section><section><title><p>Введение</p>
</title><p>Однажды рано утром в пятницу к Уорду Каннингэму зашел босс и представил его Питеру, перспективному заказчику системы WyCash. Эта система предназначалась для управления портфелем облигаций, ее разработкой и продажей занималась компания Уорда. «Возможности вашей системы впечатляют, – сказал Питер. – Но вот в чем проблема: я собираюсь открыть новый фонд облигаций. Как я понял, ваша система поддерживает облигации, номинированные только в долларах США. Мне же понадобится система, поддерживающая разные валюты». Босс повернулся к Уорду и спросил: «Мы сможем это сделать?»</p>
<p>Вот он, кошмарный сценарий для любого разработчика. Все шло хорошо, пока события развивались по намеченному плану, и вдруг все меняется. Надо сказать, это было кошмаром не только для Уорда – босс, съевший собаку на управлении программными проектами, тоже не знал, что ответить.</p>
<p>Система WyCash была разработана небольшой командой программистов за пару лет. Она позволяла работать с большинством ценных бумаг с фиксированным доходом, имеющих хождение на американском рынке. Более того, она поддерживала некоторые редкие инструменты рынка ценных бумаг, например гарантированные инвестиционные контракты (Guaranteed Investment Contracts), и этим выгодно отличалась от конкурентов.</p>
<p>В основу разработки WyCash легли объектно-ориентированные технологии, также была использована объектная база данных. Базовой абстракцией системы был класс Dollar, класс, который отвечал за вычисления и форматирование результатов. В самом начале работы над системой его разработку поручили отдельной группе хороших программистов.</p>
<p>В течение последних шести месяцев Уорд и остальные члены команды постепенно уменьшали количество обязанностей класса Dollar. Оказалось, что числовые классы языка Smalltalk вполне подошли для реализации вычислений, а для округления до трех десятичных знаков был написан специальный код. Результаты вычислений становились все точнее и точнее, и в конце концов сложные алгоритмы тестирования, выполнявшие сравнение величин с учетом погрешности, были заменены простым сравнением реального и ожидаемого результатов.</p>
<p>За форматирование результатов в действительности отвечали классы пользовательского интерфейса, а не класс Dollar. Так как соответствующие тесты были написаны на уровне этих классов, в частности для подсистемы отчетов<a type="note" l:href="#n_2">[2]</a>, поэтому предполагаемые изменения не должны были их коснуться. В результате, спустя шесть месяцев, у объекта Dollar осталось не так уж много обязанностей…</p>
<p>Один из наиболее сложных алгоритмов, вычисление средневзвешенных величин, также постепенно менялся. Вначале существовало много различных реализаций этого алгоритма, разбросанных по всему коду. Однако позже, с появлением подсистемы отчетов, стало очевидно, что существует только одно место, где этот алгоритм должен быть реализован, – класс AveragedColumn. Именно этим классом и занялся Уорд.</p>
<p>Если бы удалось внедрить в этот алгоритм поддержку работы с несколькими валютами, система в целом смогла бы стать «мультивалютной». Центральная часть алгоритма отвечала бы за хранение количества денег «в столбце». При этом алгоритм должен быть достаточно абстрактным для вычисления средневзвешенных величин любых объектов, которые поддерживали арифметические операции. К примеру, с его помощью можно было бы вычислять средневзвешенное календарных дат.</p>
<p>Выходные прошли как обычно – за отдыхом, а в понедельник утром босс поинтересовался: «Ну как, мы сможем это сделать?» – «Дайте мне еще день, и я скажу точно», – ответил Уорд.</p>
<p>В вычислении средневзвешенной величины объект Dollar как бы являлся переменной. В случае наличия нескольких валют потребовалось бы по одной переменной на каждый тип валюты, нечто вроде многочлена. Только вместо 3x2 и 4y3 – 15 USD и 20 °CHF<a type="note" l:href="#n_3">[3]</a>.</p>
<p>Быстрый эксперимент показал, что при вычислениях можно работать не с объектом Dollar (доллар), а с более общим объектом – Currency (валюта). При этом, если выполнялась операция над двумя различными валютами, значение следовало возвращать в виде объекта PolyCurrency (мультивалютный). Сложность заключалась в том, чтобы добавить новую функциональность, не сломав при этом то, что уже работает. А что, если просто прогнать тесты?</p>
<p>После добавления к классу Currency нескольких (пока нереализованных) операций большинство тестов все еще успешно выполнялось; к концу дня проходили все тесты. Уорд интегрировал новый код в текущую версию и пошел к боссу. «Мы сможем это сделать», – уверенно сказал он.</p>
<p>Давайте задумаемся над этой историей. Через пару дней потенциальный рынок для системы WyCash увеличился в несколько раз, соответственно подскочила ее ценность. Важно, что возможность создать значительную бизнес-ценность за такое короткое время не была случайной. Свою роль сыграли следующие факторы:</p>
<p>• Метод – Уорду и команде разработки WyCash потребовался опыт в пошаговом наращивании проектных возможностей системы, с хорошо отработанным механизмом внесения изменений.</p>
<p>• Мотив – Уорду и его команде было необходимо четкое представление о значимости поддержки мультивалютности в WyCash, а также потребовалась смелость взяться за такую на первый взгляд безнадежную задачу.</p>
<p>• Возможность – сочетание всеохватывающей, продуманной системы тестов и хорошо структурированной программы; язык программирования, обеспечивающий локализацию проектных решений и тем самым упрощающий идентификацию ошибок.</p>
<p>Мотив – это то, чем вы не можете управлять; сложно сказать, когда он у вас появится и заставит заняться техническим творчеством для решения бизнес-задач. Метод и возможность, с другой стороны, находятся под вашим полным контролем. Уорд и его команда создали метод и возможность благодаря таланту, опыту и дисциплине. Значит ли это, что, если вы не входите в десятку лучших разработчиков планеты и у вас нет приличного счета в банке (настолько приличного, чтобы попросить босса погулять, пока вы занимаетесь делом), такие подвиги не для вас?</p>
<p>Нет, вовсе нет. Всегда можно развернуть проект так, чтобы работа над ним стала творческой и интересной, даже если вы обычный разработчик и прогибаетесь под обстоятельства, когда приходится туго. Разработка через тестирование (Test-Driven Development, TDD) – это набор способов, ведущих к простым программным решениям, которые может применять любой разработчик, а также тестов, придающих уверенность в работе. Если вы гений, эти способы вам не нужны. Если вы тугодум – они вам не помогут. Для всех остальных, кто находится между этими крайностями, следование двум простым правилам поможет работать намного эффективнее:</p>
<p>• перед тем как писать любой фрагмент кода, создайте автоматизированный тест, который поначалу будет терпеть неудачу;</p>
<p>• устраните дублирование.</p>
<p>Как конкретно следовать этим правилам, какие существуют в данной области нюансы и какова область применимости этих способов – все это составляет тему книги, которую вы сейчас читаете. Вначале мы рассмотрим объект, созданный Уордом в момент вдохновения, – мультивалютные деньги (multi-currency money).</p>
</section><section><title><p>Часть I</p>
<p>На примере денег</p>
</title><section><p>Мы займемся реализацией примера, разрабатывая код полностью на основе тестирования (кроме случаев, когда в учебных целях будут допускаться преднамеренные ошибки). Моя цель – дать вам почувствовать ритм разработки через тестирование (TDD). Кратко можно сказать, что TDD заключается в следующем:</p>
<p>• Быстро создать новый тест.</p>
<p>• Запустить все тесты и убедиться, что новый тест терпит неудачу.</p>
<p>• Внести небольшие изменения.</p>
<p>• Снова запустить все тесты и убедиться, что на этот раз все тесты выполнились успешно.</p>
<p>• Провести рефакторинг для устранения дублирования.</p>
<p>Кроме того, придется найти ответы на следующие вопросы:</p>
<p>• Как добиться того, чтобы каждый тест охватывал небольшое приращение функциональности?</p>
<p>• Как и за счет каких небольших и, наверное, неуклюжих изменений обеспечить успешное прохождение новых тестов?</p>
<p>• Как часто следует запускать тесты?</p>
<p>• Из какого количества микроскопических шагов должен состоять рефакторинг?</p>
</section><section><title><p>1. Мультивалютные деньги</p>
</title><p>Вначале мы рассмотрим объект, созданный Уордом для системы WyCash, – мультивалютные деньги (см. «Введение»). Допустим, у нас есть отчет вроде этого.</p>
<empty-line></empty-line><image l:href="#i_001.png"></image><empty-line></empty-line><p>Добавив различные валюты, получим мультивалютный отчет.</p>
<empty-line></empty-line><image l:href="#i_002.png"></image><empty-line></empty-line><p>Также необходимо указать курсы обмена.</p>
<empty-line></empty-line><image l:href="#i_003.png"></image><empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strong>$5 * 2 = $10</strong></p>
<empty-line></empty-line><p>Что нам понадобится, чтобы сгенерировать такой отчет? Или, другими словами, какой набор успешно выполняющихся тестов сможет гарантировать, что созданный код правильно генерирует отчет? Нам понадобится:</p>
<p>• выполнять сложение величин в двух различных валютах и конвертировать результат с учетом указанного курса обмена;</p>
<p>• выполнять умножение величин в валюте (стоимость одной акции) на количество акций, результатом этой операции должна быть величина в валюте.</p>
<p>Составим список задач, который будет напоминать нам о планах, не даст запутаться и покажет, когда все будет готово. В начале работы над задачей выделим ее жирным шрифтом, <strong>вот так</strong>. Закончив работу над ней – вычеркнем, вот так. Когда придет мысль написать новый тест, добавим новую задачу в наш список.</p>
<p>Как видно из нашего списка задач, сначала мы займемся умножением. Итак, какой объект понадобится нам в первую очередь? Вопрос с подвохом. Мы начнем не с объектов, а с тестов. (Мне приходится постоянно напоминать себе об этом, поэтому я просто притворюсь, что вы так же забывчивы, как и я.)</p>
<p>Попробуем снова. Итак, какой тест нужен нам в первую очередь? Если исходить из списка задач, первый тест представляется довольно сложным. Попробуем начать с малого – умножение, – сложно ли его реализовать? Займемся им для начала.</p>
<p>Когда мы пишем тест, мы воображаем, что у нашей операции идеальный интерфейс. Попробуем представить, как будет выглядеть операция снаружи. Конечно, наши представления не всегда будут находить воплощение, но в любом случае стоит начать с наилучшего возможного программного интерфейса (API) и при необходимости вернуться назад, чем сразу делать вещи сложными, уродливыми и «реалистичными».</p>
<p>Простой пример умножения<a type="note" l:href="#n_4">[4]</a>:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = new Dollar(5);</p>
<p>five.times(2);</p>
<p>assertEquals(10, five.amount);</p>
<p>}</p>
<empty-line></empty-line><p>(Знаю, знаю: публичные поля, побочные эффекты, целые числа для денежных величин и все такое. Маленькие шаги – помните? Мы отметим, что где-то есть душок<a type="note" l:href="#n_5">[5]</a>, и продолжим дальше. У нас есть тест, который не выполняется, и мы хотим как можно скорее увидеть зеленую полоску<a type="note" l:href="#n_6">[6]</a>.)</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strong>$5 * 2 = $10</strong></p>
<p>Сделать переменную amount закрытым членом класса</p>
<p>Побочные эффекты в классе Dollar?</p>
<p>Округление денежных величин?</p>
<empty-line></empty-line><p>Тест, который мы только что создали, даже не компилируется, но это легко исправить. (О том, когда и как создаются тесты, я расскажу позже – когда мы будем подробнее говорить о среде тестирования, JUnit.) Как проще всего заставить тест компилироваться (пусть он пока и будет терпеть неудачу)? У нас четыре ошибки компиляции:</p>
<p>• нет класса Dollar;</p>
<p>• нет конструктора;</p>
<p>• нет метода times(int);</p>
<p>• нет поля (переменной) amount.</p>
<p>Устраним их одну за другой. (Я всегда ищу некоторую численную меру прогресса.) От одной ошибки мы избавимся, определив класс Dollar:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>class Dollar</p>
<empty-line></empty-line><p>Одной ошибкой меньше, осталось еще три. Теперь нам понадобится конструктор, причем совершенно необязательно, чтобы он что-то делал – лишь бы компилировался.</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Dollar(int amount) {</p>
<p>}</p>
<empty-line></empty-line><p>Осталось две ошибки. Необходимо создать заготовку метода times(). Снова мы выполним минимум работы, только чтобы заставить тест компилироваться:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>void times(int multiplier) {</p>
<p>}</p>
<empty-line></empty-line><p>Теперь осталась только одна ошибка. Чтобы от нее избавиться, нужно создать поле (переменную) amount:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>int amount;</p>
<empty-line></empty-line><p>Отлично! Теперь можно запустить тест и убедиться, что он не выполняется: ситуация продемонстрирована на рис. 1.1.</p>
<p>Загорается зловещий красный индикатор. Фреймворк тестирования (JUnit в нашем случае) выполнил небольшой фрагмент кода, с которого мы начали, и выяснил, что вместо ожидаемого результата «10» получился «0». Ужасно…</p>
<empty-line></empty-line><image l:href="#i_004.jpg"></image><p><strong>Рис. 1.1.</strong> Прогресс! Тест терпит неудачу</p>
<empty-line></empty-line><p>Вовсе нет! Неудача – это тоже прогресс. Теперь у нас есть конкретная мера неудачи. Это лучше, чем просто догадываться, что у нас что-то не так. Наша задача «реализовать мультивалютность» превратилась в «заставить работать этот тест, а потом заставить работать все остальные тесты». Так намного проще и намного меньше поводов для страха. Мы заставим этот тест работать.</p>
<p>Возможно, вам это не понравится, но сейчас наша цель не получить идеальное решение, а заставить тест выполняться. Мы принесем свою жертву на алтарь истины и совершенства чуть позже.</p>
<p>Наименьшее изменение, которое заставит тест успешно выполняться, представляется мне таким:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>int amount = 10;</p>
<empty-line></empty-line><p>Рисунок 1.2 показывает результат повторного запуска теста. Теперь мы видим ту самую зеленую полоску, воспетую в поэмах и прославленную в веках.</p>
<p>Вот оно, счастье! Но радоваться рано, ведь цикл еще не завершен. Уж слишком мал набор входных данных, которые заставят такую странно попахивающую и наивную реализацию работать правильно. Перед тем как двигаться дальше, немного поразмышляем.</p>
<empty-line></empty-line><image l:href="#i_005.jpg"></image><p><strong>Рис. 1.2.</strong> Тест успешно выполняется</p>
<empty-line></empty-line><p>Вспомним, полный цикл TDD состоит из следующих этапов:</p>
<p>1. Добавить небольшой тест.</p>
<p>2. Запустить все тесты и убедиться, что новый тест терпит неудачу.</p>
<p>3. Внести небольшое изменение.</p>
<p>4. Снова запустить тесты и убедиться, что все они успешно выполняются.</p>
<p>5. Устранить дублирование с помощью рефакторинга.</p>
<cite><p><strong>ЗАВИСИМОСТЬ И ДУБЛИРОВАНИЕ</strong></p>
<p>Стив Фримен (Steve Freeman) указал, что проблема с тестами и кодом заключается не в дублировании (на которое я еще не указал вам, но сделаю это, как только закончится отступление). Проблема заключается в зависимости между кодом и тестами – вы не можете изменить одно, не изменив другого. Наша цель – иметь возможность писать новые осмысленные тесты, не меняя при этом код, что невозможно при нашей текущей реализации.</p>
<p>Зависимость является ключевой проблемой разработки программного обеспечения. Если фрагменты SQL, зависящие от производителя используемой базы данных, разбросаны по всему коду и вы хотите поменять производителя, то непременно окажется, что код зависит от этого производителя. Вы не сможете поменять производителя базы данных и при этом не изменить код.</p>
<p>Зависимость является проблемой, а дублирование – ее симптомом. Чаще всего дублирование проявляется в виде дублирования логики – одно и то же выражение появляется в различных частях кода. Объекты – отличный способ абстрагирования, позволяющий избежать данного вида дублирования.</p>
<p>В отличие от большинства проблем в реальной жизни, где устранение симптомов приводит только к тому, что проблема проявляется в худшей форме где-то еще, устранение дублирования в программах устраняет и зависимость. Именно поэтому существует второе правило TDD. Устраняя дублирование перед тем, как заняться следующим тестом, мы максимизируем наши шансы сделать его успешным, внеся всего одно изменение.</p>
</cite><p>Мы выполнили первые четыре пункта цикла, и все готово к устранению дублирования. Но где же оно? Обычно мы замечаем дублирование в нескольких разных фрагментах кода, однако в нашем случае – друг друга дублируют тест и тестируемый код. Еще не видите? Как насчет того, чтобы написать так:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>int amount = 5 * 2;</p>
<empty-line></empty-line><p>Теперь ясно, откуда мы взяли число 10. Видимо, мы в уме произвели умножение, причем так быстро, что даже не заметили. Произведение «5 умножить на 2» присутствует как в тесте, так и в тестируемом коде. Только изначально в коде оно было представлено в виде константы 10. Сейчас же 5 и 2 отделены друг от друга, и мы должны безжалостно устранить дублирование, перед тем как двинуться дальше. Такие вот правила.</p>
<p>Действия, с помощью которого мы устранили бы 5 и 2 за один шаг, не существует. Но что, если переместить установку поля (переменной) amount в метод times()?</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>int amount;</p>
<empty-line></empty-line><p>void times(int multiplier) {</p>
<p>amount= 5 * 2;</p>
<p>}</p>
<empty-line></empty-line><p>Тест все еще успешно выполняется, и индикатор остался зеленым. Успех нам пока сопутствует.</p>
<p>Такие шаги кажутся вам слишком мелкими? Помните, TDD не обязывает двигаться только микроскопическими шагами, речь идет о способности совершать эти микроскопические шаги. Буду ли я программировать день за днем такими маленькими шагами? Нет. Но когда дела совсем плохи, я рад возможности выполнять хоть такие шаги. Примените микроскопические шаги к любому собственному примеру. Если вы сможете продвигаться маленькими шагами, вы сумеете делать шаги более крупного и подходящего размера. Если же вы способны делать только огромные шаги, вы никогда не распознаете ситуацию, в которой более уместны меньшие шаги.</p>
<p>Оставим рассуждения. На чем мы остановились? Ну да, мы избавлялись от дублирования между кодом теста и рабочим кодом. Где мы можем взять 5? Это значение передавалось конструктору, поэтому его можно сохранить в переменной amount:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Dollar(int amount) {</p>
<p>this.amount = amount;</p>
<p>}</p>
<empty-line></empty-line><p>и использовать в методе times():</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>void times(int multiplier) {</p>
<p>amount = amount * 2;</p>
<p>}</p>
<empty-line></empty-line><p>Число 2 передается в параметре multiplier, поэтому подставим параметр вместо константы:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>void times(int multiplier) {</p>
<p>amount= amount * multiplier;</p>
<p>}</p>
<empty-line></empty-line><p>Чтобы продемонстрировать, как хорошо мы знаем синтаксис языка Java, используем оператор *= (который, кстати, уменьшает дублирование):</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>void times(int multiplier) {</p>
<p>amount *= multiplier;</p>
<p>}</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p>Сделать переменную amount закрытым членом класса</p>
<p>Побочные эффекты в классе Dollar?</p>
<p>Округление денежных величин?</p>
<empty-line></empty-line><p>Теперь можно пометить первый тест как завершенный. Далее мы позаботимся о тех странных побочных эффектах; но сначала давайте подведем итоги. Мы сделали следующее:</p>
<p>• создали список тестов, которые – мы знаем – нам понадобятся;</p>
<p>• с помощью фрагмента кода описали, какой мы хотим видеть нашу операцию;</p>
<p>• временно проигнорировали особенности среды тестирования JUnit;</p>
<p>• заставили тесты компилироваться, написав соответствующие заготовки;</p>
<p>• заставили тесты работать, использовав сомнительные приемы;</p>
<p>• слегка улучшили работающий код, заменив константы переменными;</p>
<p>• добавили пункты в список задач, вместо того чтобы заняться всеми этими задачами сразу.</p>
</section><section><title><p>2. Вырождающиеся объекты</p>
</title><p>Обычный цикл разработки на основе тестирования состоит из следующих этапов:</p>
<p>1. Напишите тест. Представьте, как будет реализована в коде воображаемая вами операция. Продумав ее интерфейс, опишите все элементы, которые, как вам кажется, понадобятся.</p>
<p>2. Заставьте тест работать. Первоочередная задача – получить зеленую полоску. Если напрашивается простое и элегантное решение, используйте его. Если же на реализацию такого решения потребуется время, отложите его. Просто отметьте, что к нему нужно вернуться, когда будет решена основная задача – быстро получить зеленый индикатор. Такой подход довольно неприятен для опытных разработчиков (в эстетическом плане), ведь они следуют только правилам хорошей разработки. Но зеленая полоска прощает все грехи, правда, всего лишь на мгновение.</p>
<p>3. Улучшите решение. Теперь, когда система работает, избавьтесь от прошлых огрехов и вернитесь на путь истинной разработки. Устраните дублирование, которое вы внесли, и быстро сделайте так, чтобы полоска снова стала зеленой.</p>
<p>Наша цель – <emphasis>чистый код, который работает</emphasis> (отдельное спасибо Рону Джеффризу за этот слоган). Иногда такой код не по силам даже самым лучшим программистам, и почти всегда он не достижим для большинства программистов (вроде меня). Разделяй и властвуй, приятель, – в этом весь смысл! Сначала мы напишем код, «который работает», после чего создадим «чистый код». Такой подход противоречит модели разработки на основе архитектуры, в которой вы сначала пишете «чистый код», а потом мучаетесь, пытаясь интегрировать в проект код, «который работает».</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p>Сделать переменную amount закрытым членом класса</p>
<p><strong>Побочные эффекты в классе Dollar?</strong></p>
<p>Округление денежных величин?</p>
<empty-line></empty-line><p>Мы получили один рабочий тест, но в процессе заметили нечто странное: при выполнении операции с объектом Dollar изменяется сам объект. Хотелось бы написать так:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = new Dollar(5);</p>
<p>five.times(2);</p>
<p>assertEquals(10, five.amount);</p>
<p>five.times(3);</p>
<p>assertEquals(15, five.amount);</p>
<p>}</p>
<empty-line></empty-line><p>Я не могу представить простого способа, который заставит этот тест выполняться. После первого вызова метода times() пять уже больше не пять – на самом деле это уже десять. Если же метод times() будет возвращать новый объект, тогда мы сможем умножать наши исходные пять баксов хоть целый день, и они не изменятся. Для реализации этой идеи нам потребуется изменить интерфейс объекта Dollar и, соответственно, изменить тест. Это нормально, ведь вполне возможно, что наши догадки о правильном интерфейсе не более правдоподобны, чем догадки о правильной реализации.</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = new Dollar(5);</p>
<p>Dollar product = five.times(2);</p>
<p>assertEquals(10, product.amount);</p>
<p>product = five.times(3);</p>
<p>assertEquals(15, product.amount);</p>
<p>}</p>
<empty-line></empty-line><p>Новый тест не будет компилироваться, пока мы не изменим объявление метода Dollar.times():</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Dollar times(int multiplier) {</p>
<p>amount *= multiplier;</p>
<p>return null;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь тест компилируется, но не работает. И это тоже прогресс! Чтобы заставить его работать, придется возвращать новый объект Dollar с правильным значением:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Dollar times(int multiplier) {</p>
<p>return new Dollar(amount * multiplier);</p>
<p>}</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p>Сделать переменную amount закрытым членом класса</p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<empty-line></empty-line><p>В главе 1, когда мы заставляли тест работать, мы начинали с заготовки и постепенно улучшали код, пока он не стал полноценным. Теперь мы написали сразу правильную реализацию и молились, пока выполнялись тесты (довольно короткие молитвы, честно говоря – выполнение тестов занимает миллисекунды). Нам повезло, тесты выполнились успешно, и мы вычеркнули еще один пункт.</p>
<p>Мне известны три способа быстрого получения зеленого индикатора. Вот первые два:</p>
<p>• подделать реализацию, иначе говоря, создать заглушку, возвращающую константу, и постепенно заменять константы переменными до тех пор, пока не получится настоящий код;</p>
<p>• использовать очевидную реализацию – просто написать сразу настоящую реализацию.</p>
<p>Используя TDD на практике, я периодически переключаюсь между двумя этими способами. Когда все идет гладко и я знаю, что делать, – я просто создаю одну за другой очевидные реализации (каждый раз запуская тесты, чтобы убедиться, что решение, очевидное для меня, также очевидно для компьютера). Как только я натыкаюсь на красный индикатор, я возвращаюсь к методике «поддельная реализация», после чего провожу рефакторинг. Когда уверенность возвращается, я снова использую методику «очевидная реализация».</p>
<p>Есть еще одна, третья методика, «Триангуляция» (Triangulation), которую мы рассмотрим в главе 3. Подведем итоги. Мы выполнили следующее:</p>
<p>• сформулировали дефект проектирования (побочный эффект) в виде теста, который потерпел неудачу (из-за дефекта);</p>
<p>• создали заглушку, обеспечившую быструю компиляцию кода;</p>
<p>• заставили тест успешно выполняться, написав вроде бы правильный код.</p>
<p>Преобразование чувства (например, отвращения, вызываемого побочными эффектами) в тест (например, двукратное перемножение одного и того же объекта Dollar) – обычная практика в TDD. Чем дольше я этим занимаюсь, тем легче эстетические суждения переводятся в тесты. В результате мои рассуждения о проектировании становятся более интересными. Сначала мы обсуждаем, должна ли система работать <emphasis>так</emphasis> или <emphasis>по-другому</emphasis>. После определения правильного поведения системы можно поговорить о наилучшем способе его реализации. Можно сколь угодно долго рассуждать об истине и совершенстве за пивом, но раз мы занимаемся программированием, у нас есть возможность оставить пустые разговоры и перейти к конкретике.</p>
</section><section><title><p>3. Равенство для всех</p>
</title><p>Если у меня есть целое число и я прибавляю к нему 1, то не предполагаю, что изменится исходное число, – в результате я ожидаю получить новое число. Объекты же обычно ведут себя иначе. К примеру, если у меня есть контракт и я добавлю 1 к его сумме, это будет означать, что сумма контракта должна измениться (да, несомненно, это пример для обсуждения многих интересных законов бизнеса, которые мы здесь рассматривать <emphasis>не</emphasis> будем).</p>
<p>Мы можем использовать объекты в качестве значений, так же как используем наш объект Dollar. Соответствующий шаблон называется «Объект-значение» (Value Object). Одно из ограничений этого шаблона заключается в том, что значения атрибутов объекта устанавливаются в конструкторе и никогда в дальнейшем не изменяются.</p>
<p>Значительное преимущество использования шаблона «Объект-значение» состоит в том, что не нужно беспокоиться о проблеме наложения имен (aliasing). Скажем, у меня есть объект Check, представляющий собой чек, и я устанавливаю его сумму – $5, а затем присваиваю эти же $5 сумме другого объекта Check. Одна из самых неприятных проблем на моей памяти заключалась в том, что изменение суммы в первом объекте может приводить к непреднамеренному изменению суммы во втором. Это и есть проблема наложения имен.</p>
<p>Используя объекты-значения, не нужно беспокоиться о наложении имен. Если у меня есть пять долларов ($5), они всегда гарантированно будут оставаться именно пятью долларами ($5). Если вдруг кому-то понадобятся $7, придется создать новый объект.</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p>Сделать <strikethrough>переменную</strikethrough> amount закрытым членом класса</p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p>equals()</p>
<empty-line></empty-line><p>Одно из следствий использования шаблона «Объект-значение» заключается в том, что все операции должны возвращать результаты в виде новых объектов, как было покзано в главе 2. Другое следствие заключается в том, что объекты-значения должны реализовывать метод equals(), операцию проверки равенства, потому что одни $5 ничем не отличаются от других.</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p>Сделать <strikethrough>переменную</strikethrough> «amount» закрытым членом</p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strong>equals()</strong></p>
<p>hashCode()</p>
<empty-line></empty-line><p>Кроме того, если использовать Dollar в качестве ключа хеш-таблицы, вместе с equals() придется реализовать и hashCode(). Добавим этот пункт в список задач и вернемся к нему, когда это будет необходимо.</p>
<p>Вы ведь не собираетесь немедленно приступать к реализации метода equals()? Отлично, я тоже об этом не думаю. Ударив себя линейкой по руке, я стал размышлять над тем, как протестировать равенство. Для начала $5 должны быть равны $5:</p>
<empty-line></empty-line><p>public void testEquality() {</p>
<p>assertTrue(new Dollar(5). equals(new Dollar(5)));</p>
<p>}</p>
<empty-line></empty-line><p>Полоска окрасилась красным. Поддельная реализация могла бы просто вернуть значение true:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>public boolean equals(Object object) {</p>
<p>return true;</p>
<p>}</p>
<empty-line></empty-line><p>Конечно, мы с вами знаем, что на самом деле true – это «5 == 5», что, в свою очередь, означает «amount == 5», что соответствует «amount == dollar.amount». Но если бы я сразу проследил все эти шаги, я не смог бы продемонстрировать третью и наиболее консервативную методику реализации – триангуляцию.</p>
<p>Если две станции слежения, находящиеся на известном расстоянии друг от друга, смогут измерить азимут некоторого источника радиосигнала (взять пеленг), этого вполне достаточно, чтобы вычислить местоположение источника радиосигнала (как вы помните из курса тригонометрии, в отличие от меня). Это вычисление и называется триангуляцией.</p>
<p>По аналогии, используя метод триангуляции, мы обобщаем код только в том случае, когда у нас два примера или больше. При этом мы ненадолго игнорируем дублирование между тестом и самим кодом (приложения). Когда второй пример потребует более общего решения, тогда и только тогда мы выполним обобщение.</p>
<p>Итак, для триангуляции нам понадобится второй пример. Как насчет того, чтобы проверить $5!= $6?</p>
<empty-line></empty-line><p>public void testEquality() {</p>
<p>assertTrue(new Dollar(5). equals(new Dollar(5)));</p>
<p>assertFalse(new Dollar(5). equals(new Dollar(6)));</p>
<p>}</p>
<p>Теперь необходимо обобщить равенство (equality):</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Dollar dollar = (Dollar)object;</p>
<p>return amount == dollar.amount;</p>
<p>}</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p>Сделать <strikethrough>переменную</strikethrough> amount закрытым членом класса</p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<empty-line></empty-line><p>Мы могли бы использовать триангуляцию и для управления обобщением метода times(). Если бы у нас были примеры $5 * 2 = $10 и $5 * 3 = $15, нам не смогли бы просто возвращать константу.</p>
<p>Думаю, триангуляция – довольно интересная вещь. Я использую ее в случае, если не знаю, как выполнять рефакторинг. Если же я представляю, как устранить дублирование между кодом и тестами и создать более общее решение, я просто создаю его. С какой стати я должен создавать еще один тест, если сразу могу выполнить обобщение?</p>
<p>Однако когда когда в голову не приходит ничего умного, триангуляция дает шанс посмотреть на проблему с другой стороны. Сколько степеней свободы вы хотите поддерживать в вашем приложении (какую степень универсальности, другими словами)? Просто попробуйте ввести некоторые из них, и, возможно, ответ станет очевиднее.</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p>Сделать <strikethrough>переменную</strikethrough> amount закрытым членом класса</p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<empty-line></empty-line><p>Итак, сейчас операция проверки равенства реализована полностью. Но как учесть сравнение со значением null и сравнение c другими объектами? Это часто используемые операции, пока они нам еще не нужны, поэтому мы просто добавим их в список задач.</p>
<p>Теперь, когда у нас есть операция проверки равенства, можно напрямую сравнивать объекты Dollar. Это позволит нам сделать переменную amount закрытой, какой и должна быть добропорядочная переменная экземпляра. Резюмируем все вышесказанное:</p>
<p>• поняли, что для использования шаблона проектирования «Объект-значение» необходимо реализовать операцию проверки равенства;</p>
<p>• создали тест для этой операции;</p>
<p>• реализовали ее простейшим способом;</p>
<p>• продолжили тестирование (вместо того, чтобы сразу приступить к рефакторингу);</p>
<p>• выполнили рефакторинг так, чтобы охватить оба теста сразу.</p>
</section><section><title><p>4. Данные должны быть закрытыми</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strong>Сделать переменную amount закрытым членом класса</strong></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<empty-line></empty-line><p>Теперь, когда определена операция проверки равенства, с ее помощью можно повысить наглядность тестов. По идее, метод Dollar.times() должен возвращать новый объект Dollar, величина которого равна величине исходного объекта (метод которого мы вызываем), умноженной на коэффициент. Однако наш тест не показывает этого явно:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = new Dollar(5);</p>
<p>Dollar product = five.times(2);</p>
<p>assertEquals(10, product.amount);</p>
<p>product = five.times(3);</p>
<p>assertEquals(15, product.amount);</p>
<p>}</p>
<empty-line></empty-line><p>Мы можем переписать первую проверку и сравнить в ней объекты Dollar:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = new Dollar(5);</p>
<p>Dollar product = five.times(2);</p>
<p><strong>assertEquals(new Dollar(10), product);</strong></p>
<p>product = five.times(3);</p>
<p>assertEquals(15, product.amount);</p>
<p>}</p>
<empty-line></empty-line><p>Выглядит неплохо, поэтому перепишем и вторую проверку:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = new Dollar(5);</p>
<p>Dollar product = five.times(2);</p>
<p>assertEquals(new Dollar(10), product);</p>
<p>product = five.times(3);</p>
<p><strong>assertEquals(new Dollar(15), product);</strong></p>
<p>}</p>
<empty-line></empty-line><p>Теперь нам не нужна вспомогательная переменная product, поэтому устраним ее:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five= new Dollar(5);</p>
<p><strong>assertEquals(new Dollar(10), five.times(2));</strong></p>
<p><strong>assertEquals(new Dollar(15), five.times(3));</strong></p>
<p>}</p>
<empty-line></empty-line><p>Согласитесь, этот вариант теста значительно нагляднее.</p>
<p>Учтем внесенные изменения. Теперь только класс Dollar использует переменную экземпляра amount, поэтому мы можем сделать ее закрытой:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>private int amount;</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым членом класса</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<empty-line></empty-line><p>Вычеркиваем еще один пункт из списка задач. Заметьте, мы подвергли себя риску: если тест, проверяющий равенство, не смог бы точно определить корректность операции сравнения, тогда и тест умножения не смог бы проверить, правильно ли оно работает. В TDD принято активное управление риском. Мы не гонимся за совершенством. Выражая все двумя способами – тестами и кодом, – мы надеемся уменьшить дефекты настолько, чтобы уверенно идти дальше. Время от времени наши рассуждения будут нас подводить, позволяя появляться ошибкам. Когда это случится, мы вспомним урок о том, что надо написать тест и двигаться дальше. Все остальное время мы отважно продвигаемся вперед под победно развевающейся зеленой полоской нашего индикатора (вообще-то мой индикатор не развевается, но я люблю помечтать).</p>
<empty-line></empty-line><p>Подведем итоги:</p>
<p>• использовали только что разработанную функциональность для улучшения теста;</p>
<p>• заметили, что, если одновременно два теста терпят неудачу, наши дела плохи;</p>
<p>• продолжили несмотря на риск;</p>
<p>• использовали новую функциональность тестируемого объекта для уменьшения зависимости между тестами и кодом.</p>
</section><section><title><p>5. Поговорим о франках</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?Округление денежных величин?</strikethrough></p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strong>5 CHF * 2 = 1 °CHF</strong></p>
<empty-line></empty-line><p>Можем ли мы приступить к реализации первого, самого интересного теста в данном списке? Мне все еще кажется, что это будет слишком большой шаг. Я не представляю себе, как можно написать этот тест за один маленький шажок. Мне кажется, что вначале необходимо создать объект наподобие Dollar, который соответствовал бы не долларам, а франкам. Пусть это будет объект с названием Franc. Для начала объект Franc может функционировать в точности как объект Dollar – если у нас будет такой объект, нам будет проще размышлять о реализации теста, связанного со смешанным сложением двух разных валют.</p>
<p>А если объект Franc работает так же, как объект Dollar, значит, мы можем просто скопировать и слегка отредактировать тест для объекта Dollar:</p>
<empty-line></empty-line><p>public void testFrancMultiplication() {</p>
<p>Franc five = new Franc(5);</p>
<p>assertEquals(new Franc(10), five.times(2));</p>
<p>assertEquals(new Franc(15), five.times(3));</p>
<p>}</p>
<empty-line></empty-line><p>(Хорошо, что в главе 4 мы упростили тест для Dollar. Благодаря этому работа по редактированию теста существенно упростилась. Похоже, в данной книге дела идут довольно гладко, однако я не могут гарантировать, что в будущем все будет так же хорошо.)</p>
<p>Теперь нам надо получить зеленую полоску. Какой способ будет самым простым? Проще всего скопировать код класса Dollar и заменить Dollar на Franc.</p>
<p>Стоп. Подождите-ка. Я уже вижу, как некоторые наиболее ярые сторонники правильных подходов начинают морщиться и плеваться. Повторное использование кода путем его дублирования через буфер обмена? Пренебрежение абстракцией? А как же все эти разговоры об основополагающих принципах ООП и чистом дизайне?</p>
<p>Если вам не по себе, глубоко вдохните через нос, досчитайте до трех и медленно выдохните через рот. Вам лучше? Теперь вспомните, что наш цикл состоит из пяти этапов. Иногда последовательное выполнение всех этапов занимает всего несколько секунд, однако в любом случае мы обязательно выполняем каждый из них:</p>
<p>1. Написать тест.</p>
<p>2. Добиться его безошибочной компиляции.</p>
<p>3. Запустить тест и убедиться, что он потерпел неудачу.</p>
<p>4. Добиться успешного выполнения теста.</p>
<p>5. Устранить дублирование.</p>
<p>На разных этапах решаются разные задачи, преследуются разные цели. То, что совершенно недопустимо для одного из этапов, может быть вполне приемлемым для другого этапа. Однако в целом методика TDD работает только в случае, если ни один из этапов не упущен. Если вы пропустите хотя бы одно звено, развалится вся цепочка.</p>
<p>Первые три фазы цикла разработки TDD должны выполняться как можно быстрее. Определяющая характеристика этих этапов – скорость. На этих этапах в жертву скорости можно принести очень многое, в том числе чистоту дизайна. Честно говоря, сейчас я несколько волнуюсь. Я только что разрешил вам забыть о принципах хорошего дизайна. Представляю, как вы приходите к своим коллегам, подчиненным и во всеуслышание объявляете: «Кент сказал, что все эти разговоры про хороший дизайн – полная ерунда!» Остановитесь. Цикл еще не закончен. Четырехногий уродец из благородного семейства пятиногих стульев вечно падает. Первые четыре шага нашего цикла не работают без пятого. Хороший дизайн в подходящее время! Сначала сделаем, чтобы код заработал, потом сделаем, чтобы код был правильным (make it run, make it right).</p>
<p>Теперь мне стало легче. Теперь я уверен, что до тех пор, пока вы не избавитесь от дублирования, вы не покажете свой код никому за исключением своего партнера по паре. На чем мы остановились? Ах, да. Забываем о принципах хорошего дизайна в угоду скорости (мы будем заниматься искуплением этого греха на протяжении нескольких следующих глав).</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>class Franc {</p>
<p>private int amount;</p>
<p>Franc(int amount) {</p>
<p>this.amount = amount;</p>
<p>}</p>
<empty-line></empty-line><p>Franc times(int multiplier) {</p>
<p>return new Franc(amount * multiplier);</p>
<p>}</p>
<empty-line></empty-line><p>public boolean equals(Object object) {</p>
<p>Franc franc = (Franc) object;</p>
<p>return amount == franc.amount;</p>
<p>}</p>
<p>}</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<p>Общие операции equals()</p>
<p>Общие операции times()</p>
<empty-line></empty-line><p>Чтобы запустить код, нам не потребовалось прикладывать каких-либо усилий, поэтому мы смогли «перепрыгнуть» через этап «добиться безошибочной компиляции кода» (Make it compile).</p>
<p>Зато теперь в нашем коде полно повторяющихся фрагментов. Прежде чем приступить к разработке следующего теста, мы должны избавиться от дублирования. Думаю, что следует начать с обобщения метода equals(). Однако об этом в следующей главе. На текущий момент мы можем вычеркнуть из нашего списка еще один пункт, однако вместе с этим нам придется добавить в него два дополнительных пункта.</p>
<p>В данной главе мы</p>
<p>• решили отказаться от создания слишком большого теста и вместо этого создали маленький, чтобы обеспечить быстрый прогресс;</p>
<p>• создали код теста путем бесстыдного копирования и редактирования;</p>
<p>• хуже того, добились успешного выполнения теста путем копирования и редактирования разработанного ранее кода;</p>
<p>• дали себе обещание ни в коем случае не уходить домой до тех пор, пока не устраним дублирование.</p>
</section><section><title><p>6. Равенство для всех, вторая серия</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<empty-line></empty-line><p><strong>Общие операции equals()</strong></p>
<p>Общие операции times()</p>
<empty-line></empty-line><p>В книге <emphasis>Crossing to Safety</emphasis> автор Вэлленц Стегнер (Wallance Stegner) описывает рабочее место одного из персонажей. Каждый инструмент находится на предназначенном для него месте, пол чисто вымыт и подметен, повсюду превосходный порядок и чистота. Однако чтобы добиться подобного положения вещей, персонаж не делал никаких специальных подготовительных процедур. «Подготовка была делом всей его жизни. Он подготавливался, затем убирался на рабочем месте». (Конец книги заставил меня громко рассмеяться в бизнес-классе трансатлантического «Боинга-747». Так что если решите ее прочитать, читайте с осторожностью.)</p>
<p>В главе 5 мы добились успешного выполнения теста. Это значит, что требуемая функциональность реализована. Однако чтобы сделать это быстро, нам пришлось продублировать огромный объем кода. Теперь пришло время убрать за собой.</p>
<p>Мы можем сделать так, чтобы один из разработанных нами классов стал производным от другого. Я попробовал сделать это, однако понял, что в этом случае ничего не выигрываю. Вместо этого удобнее создать суперкласс, который станет базовым для обоих разработанных нами классов. Ситуация проиллюстрирована на рис. 6.1. (Я уже пробовал так поступить и пришел к выводу, что это именно то, что нужно, однако придется приложить усилия.)</p>
<empty-line></empty-line><image l:href="#i_006.png"></image><p><strong>Рис. 6.1.</strong> Общий суперкласс для двух разработанных нами классов</p>
<empty-line></empty-line><p>Для начала попробуем реализовать в базовом классе Money общий для обоих производных классов метод equals(). Начнем с малого:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>class Money</p>
<empty-line></empty-line><p>Запустим тесты – они по-прежнему выполняются. Конечно же, мы пока не сделали ничего такого, что нарушило бы выполнение наших тестов, однако в любом случае лишний раз запустить тесты не помешает. Теперь попробуем сделать класс Dollar производным от класса Money:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>class Dollar extends <strong>Money</strong> {</p>
<p>private int amount;</p>
<p>}</p>
<empty-line></empty-line><p>Работают ли тесты? Работают. Можем двигаться дальше. Перемещаем переменную amount в класс Money:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>class Money {</p>
<p>protected int <strong>amount</strong>;</p>
<p>}</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>class Dollar extends <strong>Money</strong> {</p>
<p>}</p>
<empty-line></empty-line><p>Режим видимости переменной amount потребовалось изменить: теперь вместо private используем модификатор доступа protected. В противном случае подкласс не сможет обратиться к этой переменной. (Если бы мы хотели двигаться еще медленнее, мы могли бы на первом шаге объявить переменную в классе Money, а на втором шаге удалить ее объявление из класса Dollar, однако я решил действовать смело и решительно.)</p>
<p>Теперь можно переместить код метода equals() вверх по иерархии классов, то есть в класс Money. Прежде всего мы изменим объявление временной переменной:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>public boolean equals(Object object) {</p>
<p><strong>Money</strong> dollar = (Dollar) object;</p>
<p>return amount == dollar.amount;</p>
<p>}</p>
<empty-line></empty-line><p>Все тесты по-прежнему работают. Теперь попробуем изменить приведение типа.</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Money dollar = (<strong>Money</strong>) object;</p>
<p>return amount == dollar.amount;</p>
<p>}</p>
<empty-line></empty-line><p>Чтобы исходный код получился более осмысленным, изменим имя временной переменной:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Money <strong>money</strong> = (Money) object;</p>
<p>return amount == <strong>money</strong>.amount;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь переместим метод из класса Dollar в класс Money:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Money money= (Money) object;</p>
<p>return amount == money.amount;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь настало время удалить метод Franc.equals(). Прежде всего мы обнаруживаем, что у нас до сих пор нет теста, проверяющего равенство двух объектов класса Franc, – когда мы, особо не раздумывая, дублировали код класса Dollar, мы нагрешили еще больше, чем думали. Поэтому, прежде чем модифицировать код, мы должны написать все необходимые тесты.</p>
<p>В ближайшем будущем, скорее всего, вам придется использовать подход TDD в отношении кода, который не сопровождается достаточным количеством тестов. В отсутствие адекватного набора тестов любой рефакторинг может привести к нарушению работоспособности кода. Иными словами, в ходе рефакторинга можно допустить ошибку, при этом все имеющиеся тесты будут выполняться как ни в чем не бывало. Ошибка может вскрыться слишком поздно, а ее устранение может стоить слишком дорого. Что же делать?</p>
<p>Прежде чем что-либо менять в коде, вы должны написать все тесты, которые кажутся вам необходимыми. Если этого не сделать, рано или поздно, выполняя рефакторинг, вы чего-нибудь поломаете. Код перестанет работать так, как должен. Вы потратите кучу времени на поиск ошибки и сформируете предубеждение против рефакторинга. Если подобный инцидент повторится, вы можете вообще перестать делать рефакторинг. Дизайн начнет деградировать. Вас уволят с работы. От вас уйдет ваша любимая собака. Вы перестанете мыться и чистить зубы. У вас начнется кариес. Чтобы сохранить зубы здоровыми, всегда сначала пишите тесты и только после этого выполняйте рефакторинг.</p>
<p>К счастью, в нашем случае написать тесты совсем несложно. Для этого достаточно скопировать и немножко отредактировать тесты для класса Dollar:</p>
<empty-line></empty-line><p>public void testEquality() {</p>
<empty-line></empty-line><p>assertTrue(new Dollar(5). equals(new Dollar(5)));</p>
<p>assertFalse(new Dollar(5). equals(new Dollar(6)));</p>
<p>assertTrue(new Franc(5). equals(new Franc(5)));</p>
<p>assertFalse(new Franc(5). equals(new Franc(6)));</p>
<p>}</p>
<empty-line></empty-line><p>Снова дублирование. Целых две строчки! Этот грех нам тоже придется искупить. Но чуть позже.</p>
<p>Теперь, когда тесты на месте, мы можем сделать класс Franc производным от класса Money:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>class Franc extends Money {</p>
<p>private int amount;</p>
<p>}</p>
<empty-line></empty-line><p>Далее мы можем уничтожить поле amount в классе Franc, так как это значение будет храниться в одноименном поле класса Money:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>class Franc extends Money {</p>
<p>}</p>
<empty-line></empty-line><p>Метод Franc.equals() выглядит фактически так же, как и метод Money.equals(). Сделав их абсолютно одинаковыми, мы сможем удалить реализацию этого метода из класса Franc. При этом смысл нашей программы не изменится. Для начала изменим объявление временной переменной:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>public boolean equals(Object object) {</p>
<p><strong>Money</strong> franc = (Franc) object;</p>
<p>return amount == franc.amount;</p>
<p>}</p>
<empty-line></empty-line><p>После этого изменим операцию преобразования типа:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Money franc = (<strong>Money</strong>) object;</p>
<p>return amount == franc.amount;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь, даже не меняя имя временной переменной, можно видеть, что метод получился фактически таким же, как одноименный метод в классе Money. Однако для пущей уверенности переименуем временную переменную:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Money <strong>money</strong> = (Money) object;</p>
<p>return amount == <strong>money</strong>.amount;</p>
<p>}</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p>Общие операции times()</p>
<p>Сравнение франков (Franc) и долларов (Dollar)</p>
<empty-line></empty-line><p>Теперь нет никакой разницы между методами Franc.equals() и Money.equals(), и мы можем удалить избыточную реализацию этого метода из класса Franc. Запускаем тесты. Они выполняются успешно.</p>
<p>Что должно происходить при сравнении франков и долларов? Мы рассмотрим этот вопрос в главе 7.</p>
<p>В данной главе мы</p>
<p>• поэтапно переместили общий код из одного класса (Dollar) в суперкласс (Money);</p>
<p>• сделали второй класс (Franc) подклассом общего суперкласса (Money);</p>
<p>• унифицировали две реализации метода equals() и удалили избыточную реализацию в классе Franc.</p>
</section><section><title><p>7. Яблоки и апельсины</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p>equals()</p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p>Общие операции times()</p>
<p><strong>Сравнение франков (Franc) и долларов (Dollar)</strong></p>
<empty-line></empty-line><p>В конце главы 6 перед нами встал интересный вопрос: что будет, если мы сравним франки и доллары? Мы немедленно добавили соответствующий пункт в список предстоящих задач. Нам никак не избавиться от этой мысли. И в самом деле, что произойдет?</p>
<empty-line></empty-line><p>public void testEquality() {</p>
<p>assertTrue(new Dollar(5). equals(new Dollar(5)));</p>
<p>assertFalse(new Dollar(5). equals(new Dollar(6)));</p>
<p>assertTrue(new Franc(5). equals(new Franc(5)));</p>
<p>assertFalse(new Franc(5). equals(new Franc(6)));</p>
<p>assertFalse(new Franc(5). equals(new Dollar(5)));</p>
<p>}</p>
<empty-line></empty-line><p>Тест завершается неудачей. С точки зрения написанного кода доллары – это франки. Прежде чем у наших швейцарских клиентов глаза вылезут на лоб, давайте попробуем исправить код. Код сравнения двух денежных значений должен убедиться в том, что он не сравнивает доллары с франками. Для этого мы должны проверить классы сравниваемых объектов – два объекта класса Money считаются равными только в том случае, если у них равны значения amount и классы.</p>
<empty-line></empty-line><p>public boolean equals(Object object) {</p>
<p>Money money = (Money) object;</p>
<p>return amount == money.amount</p>
<p>&amp;&amp; getClass(). equals(money.getClass());</p>
<p>}</p>
<empty-line></empty-line><p>Подобное использование классов, по правде сказать, отдает неприятным запашком. Предпочтительнее было бы использовать критерий из области финансов, а не из области объектов языка Java. Однако на текущий момент в нашей программе еще нет ничего, что соответствовало бы финансовому понятию «валюта», и пока я не вижу достаточно весомой причины, чтобы вводить в программу подобное понятие. Поэтому пока оставим код таким, какой он есть.</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p>Общие операции times()</p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p>Валюта?</p>
<empty-line></empty-line><p>Теперь пришла пора избавиться от дублирующегося кода в методах times(), после этого мы сможем перейти к реализации смешанной валютной арифметики. Однако прежде, чем двинуться дальше, подведем итоги данной главы:</p>
<p>• мы превратили мучающее нас сомнение в тест;</p>
<p>• добились успешного выполнения теста приемлемым, но не идеальным способом – getClass();</p>
<p>• решили не добавлять в программу дополнительной логики, пока у нас не появится более весомая мотивация.</p>
</section><section><title><p>8. Создание объектов</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p><strong>Дублирование Dollar/Franc</strong></p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p>Общие операции times()</p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p>Валюта?</p>
<empty-line></empty-line><p>Две разные реализации метода times() выглядят на удивление похоже:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Franc times(int multiplier) {</p>
<p>return new Franc(amount * multiplier)</p>
<p>}</p>
<p><strong>Dollar</strong></p>
<p>Dollar times(int multiplier) {</p>
<p>return new Dollar(amount * multiplier)</p>
<p>}</p>
<empty-line></empty-line><p>Мы можем сделать их еще более похожими, изменив тип возвращаемого значения на Money:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p><strong>Money</strong> times(int multiplier) {</p>
<p>return new Franc(amount * multiplier)</p>
<p>}</p>
<p>Dollar</p>
<p><strong>Money</strong> times(int multiplier) {</p>
<p>return new Dollar(amount * multiplier)</p>
<p>}</p>
<empty-line></empty-line><p>Следующий шаг менее очевиден. Два подкласса, производных от класса Money, мало чем отличаются друг от друга. Возникает желание избавиться от них. Однако мы не можем сделать это за один большой шаг, так как это нельзя будет назвать наглядной демонстрацией методики TDD.</p>
<p>Но что же делать? Полагаю, мы сможем приблизиться к решению задачи об уничтожении подклассов, если избавимся от прямых ссылок на подклассы. Для этого мы можем добавить в класс Money фабричный метод, который возвращал бы объект класса Dollar. Этот метод можно было бы использовать следующим образом:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = <strong>Money.dollar</strong>(5);</p>
<p>assertEquals(new Dollar(10), five.times(2));</p>
<p>assertEquals(new Dollar(15), five.times(3));</p>
<p>}</p>
<empty-line></empty-line><p>Реализация этого метода создает объект класса Dollar и возвращает его:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>static Dollar dollar(int amount) {</p>
<p>return new Dollar(amount);</p>
<p>}</p>
<empty-line></empty-line><p>Однако мы хотим избавиться от ссылок на Dollar, поэтому изменим объявление переменной в коде теста:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p><strong>Money</strong> five = Money.dollar(5);</p>
<p>assertEquals(new Dollar(10), five.times(2));</p>
<p>assertEquals(new Dollar(15), five.times(3));</p>
<p>}</p>
<empty-line></empty-line><p>Компилятор вежливо сообщает нам, что метод times() в классе Money не определен. На текущий момент мы не можем реализовать его, поэтому объявим класс Money абстрактным (может быть, с этого стоило начать?) и объявим также абстрактным метод Money.times():</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>abstract class Money</p>
<p>abstract Money times(int multiplier);</p>
<empty-line></empty-line><p>Теперь мы можем изменить объявление фабричного метода:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>static <strong>Money</strong> dollar(int amount) {</p>
<p>return new Dollar(amount);</p>
<p>}</p>
<empty-line></empty-line><p>Все тесты выполняются успешно, стало быть, по крайней мере, мы ничего не сломали. Теперь мы можем использовать фабричный метод повсюду в тестах:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Money five = Money.dollar(5);</p>
<p>assertEquals(<strong>Money.dollar</strong>(10), five.times(2));</p>
<p>assertEquals(<strong>Money.dollar</strong>(15), five.times(3));</p>
<p>}</p>
<p>public void testEquality() {</p>
<p>assertTrue(<strong>Money.dollar</strong>(5). equals(<strong>Money.dollar</strong>(5)));</p>
<p>assertFalse(<strong>Money.dollar</strong>(5). equals(<strong>Money.dollar</strong>(6)));</p>
<p>assertTrue(new Franc(5). equals(new Franc(5)));</p>
<p>assertFalse(new Franc(5). equals(new Franc(6)));</p>
<p>assertFalse(new Franc(5). equals(<strong>Money.dollar</strong>(5)));</p>
<p>}</p>
<empty-line></empty-line><p>Теперь мы находимся в несколько более выгодной позиции, чем раньше. Клиентский код ничего не знает о существовании подкласса Dollar. Освободив код тестов от ссылок на подклассы, мы получили возможность изменять структуру наследования, не внося при этом каких-либо изменений в клиентский код.</p>
<p>Прежде чем механически исправлять код теста testFrancMultiplication(), обратите внимание, что теперь он не тестирует никакой логики, кроме той, что уже протестирована функцией testMultiplication(). Напрашивается вопрос: нужна ли нам функция testFrancMultiplication()? Если мы удалим этот тест, потеряем ли мы уверенность в нашем коде? Похоже, что нет, однако мы все же сохраним пока этот тест просто так – на всякий случай.</p>
<empty-line></empty-line><p>public void testEquality() {</p>
<p>assertTrue(Money.dollar(5). equals(Money.dollar(5)));</p>
<p>assertFalse(Money.dollar(5). equals(Money.dollar(6)));</p>
<p>assertTrue(Money.franc(5). equals(Money.franc(5)));</p>
<p>assertFalse(Money.franc(5). equals(Money.franc(6)));</p>
<p>assertFalse(Money.franc(5). equals(Money.dollar(5)));</p>
<p>}</p>
<p>public void testFrancMultiplication() {</p>
<p>Money five = Money.franc(5);</p>
<p>assertEquals(Money.franc(10), five.times(2));</p>
<p>assertEquals(Money.franc(15), five.times(3));</p>
<p>}</p>
<empty-line></empty-line><p>Реализация метода Money.franc() почти такая же, как и реализация метода Money.dollar():</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>static Money franc(int amount) {</p>
<p>return new Franc(amount);</p>
<p>}</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p><strong>Дублирование Dollar/Franc</strong></p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p>Общие операции times()</p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p>Валюта?</p>
<p>Нужен ли тест testFrancMultiplication()?</p>
<empty-line></empty-line><p>Далее мы планируем перейти к устранению дублирования в методах times(). А сейчас вспомним, что в данной главе мы</p>
<p>• сделали шаг на пути к устранению дублирования – сформировали общую сигнатуру для двух вариантов одного метода – times();</p>
<p>• добавили объявление метода в общий суперкласс;</p>
<p>• освободили тестовый код от ссылок на производные классы, для этого были созданы фабричные методы;</p>
<p>• заметили, что, когда подклассы исчезли, некоторые тесты стали избыточными, однако никаких действий предпринято не было.</p>
</section><section><title><p>9. Потребность в валюте</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p>Общие операции times()</p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p><strong>Валюта?</strong></p>
<p>Нужен ли тест testFrancMultiplication()?</p>
<empty-line></empty-line><p>Есть ли в нашем списке задач какой-либо пункт, который помог бы нам избавиться от этих надоедливых подклассов? Что произойдет, если мы попробуем ввести в нашу программу понятие валюты?</p>
<p>Каким образом мы можем реализовать понятие валюты в данный момент? Черт! Опять я говорю ерунду! Вместо того чтобы снова бить себя линейкой по рукам, попробую перефразировать: каким образом мы можем протестировать понятие валюты в данный момент? Слава богу, мои руки спасены.</p>
<p>Возможно, в будущем нам захочется создать специальный класс валюты, применив шаблон «Приспособленец» (Flyweight Factory), чтобы избежать создания лишних объектов. Однако на текущий момент понятие валюты вполне можно реализовать в виде обычных строк:</p>
<empty-line></empty-line><p>public void testCurrency() {</p>
<p>assertEquals("USD", Money.dollar(1). currency());</p>
<p>assertEquals("CHF", Money.franc(1). currency());</p>
<p>}</p>
<empty-line></empty-line><p>Прежде всего объявим метод currency() в классе Money:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>abstract String currency();</p>
<empty-line></empty-line><p>Теперь реализуем этот метод в обоих подклассах:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>String currency() {</p>
<p>return "CHF";</p>
<p>}</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>String currency() {</p>
<p>return "USD";</p>
<p>}</p>
<empty-line></empty-line><p>Однако хотелось бы иметь одну и ту же реализацию в обоих подклассах, поэтому сохраним идентификатор валюты в специальном поле класса и просто вернем его значение в методе currency(). (Я начинаю делать рефакторинг быстрее, чтобы сэкономить время. Если вам покажется, что я рассказываю слишком быстро, не стесняйтесь попросить меня замедлиться. Постойте-ка, это же книга, – наверное, мне не стоит слишком уж ускоряться.)</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>private String currency;</p>
<p>Franc(int amount) {</p>
<p>this.amount = amount;</p>
<p>currency = "CHF";</p>
<p>}</p>
<p>String currency() {</p>
<p>return currency;</p>
<p>}</p>
<empty-line></empty-line><p>То же самое сделаем в классе Dollar:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>private String currency;</p>
<p>Dollar(int amount) {</p>
<p>this.amount = amount;</p>
<p>currency = "USD";</p>
<p>}</p>
<p>String currency() {</p>
<p>return currency;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь мы можем переместить объявление переменной и реализацию метода currency() в базовый класс Money, так как в обоих подклассах они одинаковые:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>protected String currency;</p>
<p>String currency() {</p>
<p>return currency;</p>
<p>}</p>
<empty-line></empty-line><p>Если переместить строковые констаны «USD» и «CHF» в статические фабричные методы, конструкторы двух производных классов станут идентичными, в результате мы сможем создать общую реализацию.</p>
<p>Вначале добавим в конструктор дополнительный параметр:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Franc(int amount, <strong>String currency</strong>) {</p>
<p>this.amount = amount;</p>
<p>this.currency = "CHF";</p>
<p>}</p>
<empty-line></empty-line><p>При этом возникают ошибки в двух местах при обращении к конструктору:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>static Money franc(int amount) {</p>
<p>return new Franc(amount, null);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new Franc(amount * multiplier, null);</p>
<p>}</p>
<empty-line></empty-line><p>Постойте-ка! Почему это метод Franc.times() вызывает конструктор вместо фабричного метода? Будем ли мы заниматься этим сейчас или отложим любые связанные с этим модификации на более позднее время? В рамках догмы мы должны оставить посторонние дела на потом – не следует прерывать то, чем мы сейчас занимаемся. Однако на практике я иногда позволяю себе отвлечься, но лишь ненадолго, и ни в коем случае я не разрешаю себе прерывать прерывание (этому правилу научил меня Джим Коплаен – Jim Coplien). В данном случае будет лучше, если мы подчистим метод times(), прежде чем продолжить:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return Money.franc(amount * multiplier);</p>
<p>}</p>
<empty-line></empty-line><p>Теперь фабричному методу можно передать значение «CHF»:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>static Money franc(int amount) {</p>
<p>return new Franc(amount,<strong>«CHF»</strong>);</p>
<p>}</p>
<empty-line></empty-line><p>Наконец, мы можем присвоить значение параметра полю класса:</p>
<p><strong>Franc</strong></p>
<p>Franc(int amount, String currency) {</p>
<p>this.amount = amount;</p>
<p>this.currency = <strong>currency</strong>;</p>
<p>}</p>
<empty-line></empty-line><p>Может показаться, что я снова перемещаюсь вперед слишком маленькими шажками. Действительно ли я рекомендую вам работать в таком же темпе? Нет. Я рекомендую вначале научиться работать в таком темпе, а затем самостоятельно определять скорость работы, которая покажется вам наиболее эффективной. Я всего лишь попробовал двигаться вперед большими шагами и на половине дороги допустил глупую ошибку. Запутавшись, я вернулся назад на несколько минут, перешел на пониженную передачу и сделал работу заново, более мелкими шажками. Сейчас я чувствую себя уверенней, поэтому мы можем попробовать внести такие же изменения в класс Dollar за один большой шаг:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>static Money dollar(int amount) {</p>
<p>return new Dollar(amount,<strong>«USD»</strong>);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Dollar(int amount, String currency) {</p>
<p>this.amount = amount;</p>
<p>this.currency = <strong>currency</strong>;</p>
<p>}</p>
<p>Money times(int multiplier) {</p>
<p>return <strong>Money.dollar(amount * multiplier);</strong></p>
<p>}</p>
<empty-line></empty-line><p>И это сработало с первого раза. Классно!</p>
<p>Подобная настройка скорости весьма характерна для TDD. Вам кажется, что слишком маленькие шажки ограничивают вас? Попробуйте двигаться быстрее. Почувствовали неуверенность? Переходите на короткий шаг. TDD – это процесс плавного управления – немного в одну сторону, немного в другую сторону. Не существует одного-единственного наиболее правильного размера шага, ни сейчас, ни в будущем.</p>
<p>Теперь два конструктора выглядят абсолютно одинаково, и мы можем переместить реализацию в базовый класс:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>Money(int amount, String currency) {</p>
<p>this.amount = amount;</p>
<p>this.currency = currency;</p>
<p>}</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Franc(int amount, String currency) {</p>
<p>super(amount, currency);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Dollar(int amount, String currency) {</p>
<p>super(amount, currency);</p>
<p>}</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p><strong>Дублирование Dollar/Franc</strong></p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p>Общие операции times()</p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p><strikethrough>Валюта?</strikethrough></p>
<p>Нужен ли тест testFrancMultiplication()?</p>
<empty-line></empty-line><p>Мы уже почти готовы переместить реализацию times() в базовый класс, но прежде вспомним, что в данной главе мы</p>
<p>• на некоторое время заблудились в крупномасштабных идеях дизайна и, чтобы разобраться в проблеме, решили начать с решения небольшой задачи, на которую мы уже обратили внимание ранее;</p>
<p>• сделали одинаковыми два конструктора, переместив отличающийся код в вызывающий (фабричный) метод;</p>
<p>• на короткое время отвлеклись от рефакторинга, чтобы добавить в метод times() вызов фабричного метода;</p>
<p>• выполнили аналогичный рефакторинг в отношении класса Dollar за один большой шаг;</p>
<p>• получили два абсолютно идентичных конструктора и переместили код в базовый класс.</p>
</section><section><title><p>10. Избавление от двух разных версий times()</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p><strong>Общие операции times()</strong></p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p><strikethrough>Валюта?</strikethrough></p>
<p>Нужен ли тест testFrancMultiplication()?</p>
<empty-line></empty-line><p>В конце данной главы мы должны получить единый класс Money, соответствующий понятию «деньги». Две реализации метода times() близки друг к другу, однако они не идентичны:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return Money.franc(amount * multiplier);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Money times(int multiplier) {</p>
<p>return Money.dollar(amount * multiplier);</p>
<p>}</p>
<empty-line></empty-line><p>Увы, я не вижу простого способа добиться идентичности этих методов, однако в некоторых ситуациях, для того чтобы продвинуться дальше, требуется вернуться немного назад, – это напоминает кубик Рубика. Что будет, если мы заменим вызовы фабричных методов операторами new? (Я отлично понимаю, что совсем недавно мы выполнили обратную процедуру – заменили new вызовами фабричных методов. Но что я могу поделать – сейчас мы решаем несколько иную задачу. Понимаю, что это может показаться обескураживающим, однако потерпите немного.)</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new Franc(amount * multiplier, "CHF");</p>
<p>}</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new Dollar(amount * multiplier, "USD");</p>
<p>}</p>
<empty-line></empty-line><p>Мы абсолютно уверены, что в экземплярах класса Franc значение поля currency всегда будет равно «CHF», поэтому можем написать:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new Franc(amount * multiplier, <strong>currency</strong>);</p>
<p>}</p>
<empty-line></empty-line><p>Сработало! Теперь тот же трюк можно проделать и в отношении класса Dollar:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new Dollar(amount * multiplier,<strong>currency</strong>);</p>
<p>}</p>
<empty-line></empty-line><p>Мы почти закончили. Имеет ли значение, что мы используем в данном случае – Franc или Money? Об этом можно рассуждать в течение некоторого времени исходя из имеющихся знаний о внутреннем устройстве нашей системы, однако у нас есть чистый код и тесты, которые дают нам уверенность в том, что код работает так, как надо. Вместо того чтобы тратить несколько минут на рассуждения, мы можем спросить об этом компьютер. Для этого достаточно внести интересующие нас изменения в код и запустить тесты. Обучая методике TDD, я наблюдаю подобную ситуацию постоянно – опытные умные программисты тратят от 5 до 10 минут на обсуждение вопроса, на который компьютер может дать ответ в течение 15 секунд. Если у вас нет тестов, вам остается только размышлять и предполагать. Если же у вас есть тесты, вместо того, чтобы напрасно тратить время, вы можете провести быстрый эксперимент. Как правило, если у вас есть тесты, быстрее спросить компьютер.</p>
<p>Чтобы провести интересующий нас эксперимент, модифицируем код так, чтобы метод Franc.times() возвращал значение типа Money:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new <strong>Money</strong> (amount * multiplier, currency);</p>
<p>}</p>
<empty-line></empty-line><p>В ответ компилятор сообщил, что Money должен быть конкретным (не абстрактным) классом:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>class Money</p>
<p>Money times(int amount) {</p>
<p>return null;</p>
<p>}</p>
<empty-line></empty-line><p>Получаем красную полоску и сообщение об ошибке: «expected:&lt;Money.Franc@31aebf&gt; but was:&lt;Money.Money@478a43&gt;». Не очень-то информативно. Не так информативно, как нам хотелось бы. Чтобы получить более осмысленное сообщение об ошибке, добавим метод toString():</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public String toString() {</p>
<p>return amount + " " + currency;</p>
<p>}</p>
<empty-line></empty-line><p>О, ужас! Код без тестов?! Допустимо ли такое? Конечно же, прежде чем писать код метода toString, мы должны были написать соответствующий тест, однако</p>
<p>• мы увидим результаты работы этого метода на экране;</p>
<p>• метод toString() используется только для отладки, поэтому риск, связанный с потенциальными ошибками, невелик;</p>
<p>• перед нами красная полоса, а мы предпочитаем не писать новых тестов, пока не избавимся от красной полосы.</p>
<p>Обстоятельства приняты к сведению.</p>
<p>Теперь сообщение об ошибке изменилось: "expected:&lt;1 °CHF&gt; but was:&lt;1 °CHF&gt;". Выглядит осмысленней, однако сбивает с толку. В двух объектах хранятся одни и те же данные, однако при этом объекты не считаются равными. Проблема кроется в реализации метода equals():</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Money money = (Money) object;</p>
<p>return amount == money.amount</p>
<p>&amp;&amp; getClass(). equals(money.getClass());</p>
<p>}</p>
<empty-line></empty-line><p>В данном случае происходит сравнение имен классов, в то время как логичнее сравнивать идентификаторы валют.</p>
<p>Лучше не писать никаких новых тестов, если перед вами красная полоса. Однако нам нужно внести изменения в разрабатываемый код, и мы не можем изменить код, не обладая соответствующим тестом. Консервативный подход заключается в том, чтобы отменить изменение, которое привело к появлению красной полосы. В этом случае мы вновь получим зеленую полосу. После этого мы сможем модифицировать тест для метода equals(), исправить его реализацию и вновь применить изначальное изменение.</p>
<p>В данном случае мы будем действовать консервативно. (Иногда я плюю на все и пишу тест, не обращая внимания на красную полосу, однако я поступаю так, только когда дети уже спят.)</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new <strong>Franc</strong> (amount * multiplier, currency);</p>
<p>}</p>
<empty-line></empty-line><p>Перед нами снова зеленая полоса. Мы попали в ситуацию, когда объект Franc(10,"CHF") не равен объекту Money(10,"CHF"), хотя нам хотелось бы, чтобы эти объекты были равны. Превращаем наше желание в тест:</p>
<empty-line></empty-line><p>public void testDifferentClassEquality() {</p>
<p>assertTrue(new Money(10, "CHF"). equals(new Franc(10, "CHF")));</p>
<p>}</p>
<empty-line></empty-line><p>Как и ожидалось, тест потерпел неудачу. Код метода equal() должен сравнивать идентификаторы валют, а не имена классов:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Money money = (Money) object;</p>
<p>return amount == money.amount</p>
<p><strong>&amp;&amp; currency(). equals(money.currency());</strong></p>
<p>}</p>
<empty-line></empty-line><p>Теперь метод Franc.times() может возвращать значение Money, и все тесты будут по-прежнему успешно выполняться:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new <strong>Money</strong>(amount * multiplier, currency);</p>
<p>}</p>
<empty-line></empty-line><p>Сработает ли этот трюк для метода Dollar.times()?</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new <strong>Money</strong> (amount * multiplier, currency);</p>
<p>}</p>
<empty-line></empty-line><p>Да! Теперь две реализации абсолютно идентичны, и мы можем переместить их в базовый класс.</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>Money times(int multiplier) {</p>
<p>return new Money(amount * multiplier, currency);</p>
<p>}</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p>Дублирование Dollar/Franc</p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p><strikethrough>Общие операции times()</strikethrough></p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p><strikethrough>Валюта?</strikethrough></p>
<p>Нужен ли тест testFrancMultiplication()?</p>
<empty-line></empty-line><p>Метод умножения там, где ему следует быть, теперь мы готовы удалить ненужные нам производные классы.</p>
<p>В данной главе мы</p>
<p>• сделали идентичными две реализации метода times(), для этого мы избавились от вызовов фабричных методов в них, и заменили константы переменными;</p>
<p>• добавили в класс отладочный метод toString() без теста;</p>
<p>• попробовали модифицировать код (заменили тип Franc возвращаемого значения на Money) и обратились к тестам, чтобы узнать, сработает ли это;</p>
<p>• отменили изменения и написали еще один тест, добились успешного выполнения теста и вновь применили изменения.</p>
</section><section><title><p>11. Корень всего зла</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p><strong>Дублирование Dollar/Franc</strong></p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p><strikethrough>Общие операции times()</strikethrough></p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p><strikethrough>Валюта?</strikethrough></p>
<p>Нужен ли тест testFrancMultiplication()?</p>
<empty-line></empty-line><p>Два производных класса, Dollar и Franc, обладают только конструкторами, однако конструктор – это недостаточная причина для создания подкласса. Мы должны избавиться от бесполезных подклассов.</p>
<p>Ссылки на подклассы можно заменить ссылками на суперкласс, не изменив при этом смысл кода. Начнем с класса Franc:</p>
<empty-line></empty-line><p><strong>Franc</strong></p>
<p>static Money franc(int amount) {</p>
<p>return new <strong>Money</strong> (amount, «CHF»);</p>
<p>}</p>
<empty-line></empty-line><p>Затем перейдем к классу Dollar:</p>
<empty-line></empty-line><p><strong>Dollar</strong></p>
<p>static Money dollar(int amount) {</p>
<p>return new <strong>Money</strong> (amount, «USD»);</p>
<p>}</p>
<empty-line></empty-line><p>Ссылок на класс Dollar больше нет, поэтому мы можем удалить этот класс. Однако в только что написанном нами тесте есть одна ссылка на класс Franc:</p>
<empty-line></empty-line><p>public void testDifferentClassEquality() {</p>
<p>assertTrue(new Money(10, "CHF"). equals(new Franc(10, "CHF")));</p>
<p>}</p>
<empty-line></empty-line><p>Если равенство объектов достаточно хорошо протестировано другими тестами, значит, мы можем безбоязненно удалить этот тест. Давайте взглянем на другие тесты:</p>
<empty-line></empty-line><p>public void testEquality() {</p>
<p>assertTrue(Money.dollar(5). equals(Money.dollar(5)));</p>
<p>assertFalse(Money.dollar(5). equals(Money.dollar(6)));</p>
<p>assertTrue(Money.franc(5). equals(Money.franc(5)));</p>
<p>assertFalse(Money.franc(5). equals(Money.franc(6)));</p>
<p>assertFalse(Money.franc(5). equals(Money.dollar(5)));</p>
<p>}</p>
<empty-line></empty-line><p>Похоже, что все возможные случаи определения равенства достаточно полно охвачены другими тестами. Я даже сказал бы, что тестов слишком много. Мы можем удалить третье и четвертое выражение assert, так как они дублируют первое и второе:</p>
<empty-line></empty-line><p>public void testEquality() {</p>
<p>assertTrue(Money.dollar(5). equals(Money.dollar(5)));</p>
<p>assertFalse(Money.dollar(5). equals(Money.dollar(6)));</p>
<p>assertFalse(Money.franc(5). equals(Money.dollar(5)));</p>
<p>}</p>
<p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 * 2 = $10</strikethrough></p>
<p><strikethrough>Сделать переменную amount закрытым (private) членом</strikethrough></p>
<p><strikethrough>Побочные эффекты в классе Dollar?</strikethrough></p>
<p>Округление денежных величин?</p>
<p><strikethrough>equals()</strikethrough></p>
<p>hashCode()</p>
<p>Равенство значению null</p>
<p>Равенство объектов</p>
<p><strikethrough>5 CHF * 2 = 1 °CHF</strikethrough></p>
<p><strikethrough>Дублирование Dollar/Franc</strikethrough></p>
<p><strikethrough>Общие операции equals()</strikethrough></p>
<p><strikethrough>Общие операции times()</strikethrough></p>
<p><strikethrough>Сравнение франков (Franc) и долларов (Dollar)</strikethrough></p>
<p><strikethrough>Валюта?</strikethrough></p>
<p><strikethrough>Нужен ли тест testFrancMultiplication()?</strikethrough></p>
<empty-line></empty-line><p>Тест testDifferentClassEquality() служит доказательством того, что, сравнивая объекты, мы сравниваем различные валюты, но не различные классы. Этот тест имеет смысл только в случае, если в программе существует несколько различных классов. Однако мы уже избавились от класса Dollar и намерены точно так же избавиться от класса Franc. Иными словами, в нашем распоряжении останется только один денежный класс: Money. С учетом наших намерений, тест testDifferentClassEquality() оказывается для нас излишней обузой. Мы удалим его, а затем избавимся от класса Franc.</p>
<p>Обратите также внимание, что в программе присутствуют отдельные тесты для проверки умножения франков на доллары. Если заглянуть в код, можно увидеть, что на текущий момент логика метода, реализующего умножение, не зависит от типа валюты (зависимость была бы только в случае, если бы мы использовали два различных класса). То есть мы можем удалить функцию testFrancMultiplication(), не опасаясь, что потеряем уверенность в правильности работы системы.</p>
<p>Итак, в нашем распоряжении единый денежный класс, и мы готовы приступить к реализации сложения.</p>
<p>Но сначала подведем итоги. В этой главе мы</p>
<p>• закончили потрошить производные классы и избавились от них;</p>
<p>• удалили тесты, которые имели смысл только при использовании старой структуры кода, но оказались избыточными в коде с новой структурой.</p>
</section><section><title><p>12. Сложение, наконец-то</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<empty-line></empty-line><p>Наступил новый день, и я заметил, что список задач переполнен вычеркнутыми пунктами. Лучше всего переписать оставшиеся не зачеркнутыми пункты в новый свежий список. (Я люблю физически копировать пункты из старого списка в новый список. Если в старом списке много мелких недоделанных задач, вместо того, чтобы копировать их в новый список, я просто добавляю в программу соответствующий код. В результате из-за моей лени куча мелочей, которая могла бы расти со временем, просто исчезает. Используйте свои слабости.)</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strong>$5 + $5 = $10</strong></p>
<empty-line></empty-line><p>Пока что я не представляю себе, как можно реализовать смешанное сложение долларов и франков, поэтому предлагаю начать с более простой задачи: $5 + $5 = $10.</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>Money sum = Money.dollar(5). plus(Money.dollar(5));</p>
<p>assertEquals(Money.dollar(10), sum);</p>
<p>}</p>
<empty-line></empty-line><p>Мы могли бы подделать реализацию, просто вернув значение Money.dollar(10), однако в данном случае реализация кажется очевидной. Давайте попробуем:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>Money plus(Money addend) {</p>
<p>return new Money(amount + addend.amount, currency);</p>
<p>}</p>
<empty-line></empty-line><p>(Далее я буду ускорять процесс разработки, чтобы сэкономить бумагу и сохранить ваш интерес. Там, где дизайн не очевиден, я буду подделывать реализацию и выполнять рефакторинг. Я надеюсь, что благодаря этому вы увидите, каким образом в TDD выполняется контроль над величиной шагов.)</p>
<p>Сказав, что планирую увеличить скорость, я немедленно замедляю процесс разработки. Однако я не планирую замедлять процесс написания кода, который обеспечивает успешное тестирование. Я планирую замедлить процесс написания самих тестов. Некоторые ситуации и некоторые тесты требуют тщательного обдумывания. Каким образом мы планируем представить арифметику со смешанными валютами? Это как раз тот случай, когда требуется тщательное обдумывание.</p>
<p>Наиболее важное и сложное ограничение, с которым нам приходится иметь дело, заключается в том, что мы не хотим, чтобы код нашей системы знал о существовании каких-либо валют. Нам хотелось бы, чтобы система имела дело с деньгами и не зависела от того, в какой валюте они представлены. Возможная стратегия состоит в том, чтобы немедленно преобразовывать любые денежные значения в некоторую единую валюту (попробуйте угадать, какая валюта является самой любимой у американских программистов). Однако подобное решение не позволит нам с легкостью варьировать соотношения (курсы обмена) между различными валютами.</p>
<p>Вместо этого мы хотели бы найти решение, которое позволило бы нам в удобной форме реализовать механизм обменных курсов и при этом обеспечить запись арифметических выражений в форме, близкой к стандартной арифметической записи.</p>
<p>Решение основано на объектах. Если имеющийся объект ведет себя не так, как нам хотелось бы, мы создаем еще один объект, обладающий точно таким же внешним протоколом, но отличающейся внутренней реализацией. Этот шаблон называется «Самозванец» (Imposter).</p>
<p>Возможно, многим это покажется хиромантией. Каким образом в данной ситуации можно использовать шаблон «Самозванец»? Однако я не собираюсь шутить над вами – не существует формулы, позволяющей генерировать гениальные дизайнерские решения. Решение проблемы было придумано Уордом Каннигемом десятилетие назад. Я еще не встречал человека, который независимо от Уорда придумал бы нечто подобное. К сожалению, методика TDD не гарантирует генерацию гениальных идей. Вместе с тем благодаря TDD вы имеете тесты, формирующие вашу уверенность в коде, а также тщательно вылизанный код, – все это является хорошей почвой для возникновения идеи и ее воплощения в реальность.</p>
<p>Итак, что же является решением в нашем случае? Предлагается создать объект, который ведет себя как объект Money, однако соответствует сумме двух объектов Money. Чтобы объяснить эту идею, я пробовал использовать несколько разных метафор. Например, можно рассматривать сумму различных денежных величин как <emphasis>бумажник</emphasis>. В один бумажник можно положить несколько банкнот разных валют и разных достоинств.</p>
<p>Еще одна метафора: <emphasis>выражение</emphasis>. Имеется в виду математическое выражение, например: (2 + 3) * 5. В нашем случае мы имеем дело с денежными величинами, поэтому выражение может быть таким: ($2 + 3 CHF) * 5. Класс Money – это атомарная форма выражения. В результате выполнения любых операций над денежными величинами получается объект класса Expression. Одним из таких объектов может быть объект Sum<a type="note" l:href="#n_7">[7]</a>. После того как операция (например, сложение нескольких значений в разных валютах) выполнена, полученный объект Expression можно привести к некоторой заданной валюте. Преобразование к некоторой валюте осуществляется на основании набора курсов обмена.</p>
<p>Как выразить эту метафору в виде набора тестов? Прежде всего, мы знаем, к чему мы должны прийти:</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>…</p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>Переменная reduced – это объект класса Expression, который создан путем применения обменных курсов в отношении объекта Expression, полученного в результате выполнения математической операции. Кто в реальном мире отвечает за применение обменных курсов? <emphasis>Банк</emphasis>. Стало быть, было бы неплохо, если бы мы могли написать</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>…</p>
<p>Money reduced = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>(Плохо, когда в одной программе смешиваются две разные метафоры: <emphasis>банк</emphasis> и <emphasis>математическое выражение</emphasis>. Однако сейчас предлагаю не заострять на этом внимания. Сначала воплотим в жизнь то, что запланировали, а затем посмотрим, можно ли улучшить нашу систему с литературно-художественной точки зрения.)</p>
<p>Обратите внимание на важное дизайнерское решение: метод reduce() принадлежит объекту bank. С такой же легкостью мы могли бы написать</p>
<empty-line></empty-line><p>…educed = sum.reduce(«USD», bank).</p>
<empty-line></empty-line><p>Почему ответственным за выполнение операции reduce() сделан именно объект bank? На самом деле ответ следующий: «Это первое, что пришло мне в голову», однако такой ответ нельзя считать удовлетворительным. Почему мне в голову пришло сделать ответственным за выполнение операции reduce() именно объект класса Bank, а не объект класса Expression? Вот что мне известно на текущий момент:</p>
<p>• Объекты класса Expression, по всей видимости, лежат в самом сердце того, что мы делаем. Я стараюсь делать объекты, являющиеся сердцем системы, как можно менее зависимыми от всего остального мира. Благодаря этому они остаются гибкими в течение длительного времени («гибкие» в данном случае означает «простые для понимания, тестирования и повторного использования»).</p>
<p>• Я могу предположить, что класс Expression будет нести ответственность за множество операций. Значит, мы должны по возможности освободить этот класс от лишней ответственности и переложить часть ответственности на другие классы там, где это допустимо. В противном случае класс Expression разрастется до неконтролируемых размеров.</p>
<empty-line></empty-line><p>Конечно, это всего лишь догадки – этого не достаточно, чтобы принимать какие-либо окончательные решения, однако этого вполне достаточно, чтобы я начал двигаться в избранном направлении. Безусловно, если выяснится, что наша система вполне может обойтись без класса Bank, я переложу ответственность за выполнение метода reduce() на класс Expression. Если мы используем объект bank, значит, его необходимо создать:</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>…</p>
<p>Bank bank = new Bank();</p>
<p>Money reduced = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>Сумма двух объектов Money – это объект класса Expression:</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>…</p>
<p>Expression sum = five.plus(five);</p>
<p>Bank bank = new Bank();</p>
<p>Money reduced = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>Наконец, операция, в которой мы абсолютно уверены, – создание пяти долларов:</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>Money five = Money.dollar(5);</p>
<p>Expression sum = five.plus(five);</p>
<p>Bank bank = new Bank();</p>
<p>Money reduced = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>Что надо сделать, чтобы данный код откомпилировался? Для начала создадим интерфейс Expression (мы могли бы создать класс, однако интерфейс обладает существенно меньшим весом):</p>
<empty-line></empty-line><p>Expression</p>
<p>interface Expression</p>
<empty-line></empty-line><p>Метод Money.plus() должен возвращать значение типа Expression:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>Expression plus(Money addend) {</p>
<p>return new Money(amount + addend.amount, currency):</p>
<p>}</p>
<empty-line></empty-line><p>Это означает, что класс Money должен реализовать интерфейс Expression (это очень просто, так как в этом интерфейсе пока что нет ни одной операции):</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>class Money implements Expression</p>
<empty-line></empty-line><p>Кроме того, нам потребуется пустой класс Bank:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>class Bank</p>
<empty-line></empty-line><p>Добавим в этот класс заглушку для метода reduce():</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>return null;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь код компилируется и выдает нам красную полоску. Ура! У нас прогресс! Теперь можем легко подделать реализацию:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>return Money.dollar(10);</p>
<p>}</p>
<empty-line></empty-line><p>Зеленая полоса! Теперь мы готовы выполнить рефакторинг. Но сначала подведем итоги главы. В этой главе мы</p>
<p>• вместо большого теста реализовали меньший тест, чтобы добиться быстрого прогресса (вместо операции $5 + 1 °CHF ограничились более простой операцией $5 + $5);</p>
<p>• основательно обдумали возможные метафоры для нашего предполагаемого дизайна;</p>
<p>• переписали первоначальный тест в свете новой метафоры;</p>
<p>• как можно быстрее добились компиляции теста;</p>
<p>• добились успешного выполнения теста;</p>
<p>• с трепетом посмотрели вперед, оценив объем рефакторинга, который необходим, чтобы сделать реализацию реальной.</p>
<p>7 В переводе на русский язык <emphasis>sum</emphasis> – это сумма. – <emphasis>Примеч. пер</emphasis>.</p>
</section><section><title><p>13. Делаем реализацию реальной</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strong>$5 + $5 = $10</strong></p>
<empty-line></empty-line><p>Мы не можем вычеркнуть пункт $5 + $5, пока не удалим из кода все повторяющиеся фрагменты. Внимательно рассмотрим код. В нем нет повторяющегося кода, но есть повторяющиеся данные – $10 в «поддельной» реализации:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>return <strong>Money.dollar(10)</strong>;</p>
<p>}</p>
<empty-line></empty-line><p>Это выражение по своей сути дублирует выражение $5 + $5 в коде теста:</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>Money five = Money.dollar(5);</p>
<p>Expression sum = <strong>five.plus(five)</strong>;</p>
<p>Bank bank = new Bank();</p>
<p>Money reduced = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>Раньше, если у нас имелась «поддельная» реализация, для нас было очевидным, как можно вернуться назад и сформировать реальную реализацию. Для этого достаточно было заменить константы переменными. Однако в данном случае пока не понимаю, как вернуться назад. Поэтому, несмотря на некоторый риск, я решаю двигаться вперед:</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strong>$5 + $5 = $10</strong></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<empty-line></empty-line><p>Прежде всего, метод Money.plus() должен возвращать не просто объект Money, а реальное выражение (Expression), то есть сумму (Sum). (Возможно, в будущем мы оптимизируем специальный случай сложения двух одинаковых валют, однако это произойдет позже.)</p>
<empty-line></empty-line><p>Итак, в результате сложения двух объектов Money должен получиться объект класса Sum:</p>
<empty-line></empty-line><p>public void testPlusReturnsSum() {</p>
<p>Money five = Money.dollar(5);</p>
<p>Expression result = five.plus(five);</p>
<p>Sum sum = (Sum) result;</p>
<p>assertEquals(five, sum.augend);</p>
<p>assertEquals(five, sum.addend);</p>
<p>}</p>
<empty-line></empty-line><p>(Вы когда-нибудь слышали, что в английском языке первое слагаемое обозначается термином <emphasis>augend</emphasis>, а второе слагаемое – термином <emphasis>addend</emphasis>? Об этом не слышал даже автор до тех пор, пока не приступил к написанию данной книги.)</p>
<p>Только что написанный тест, скорее всего, проживет недолго. Дело в том, что он сильно связан с конкретной реализацией разрабатываемой нами операции и мало связан с видимым внешним поведением этой операции. Однако, заставив его работать, мы окажемся на шаг ближе к поставленной цели. Чтобы скомпилировать тест, нам потребуется класс Sum с двумя полями: augend и addend:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>class Sum {</p>
<p>Money augend;</p>
<p>Money addend;</p>
<p>}</p>
<empty-line></empty-line><p>В результате получаем исключение преобразования классов (ClassCastException) – метод Money.plus() возвращает объект Money, но не объект Sum:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>Expression plus(Money addend) {</p>
<p>return new Sum(this, addend);</p>
<p>}</p>
<empty-line></empty-line><p>Класс Sum должен иметь конструктор:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>Sum(Money augend, Money addend) {</p>
<p>}</p>
<empty-line></empty-line><p>Кроме того, класс Sum должен поддерживать интерфейс Expression:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>class Sum implements Expression</p>
<empty-line></empty-line><p>Наша система компилируется, однако тесты терпят неудачу – это из-за того, что конструктор класса Sum не присваивает значений полям (мы могли бы создать «поддельную» реализацию, инициализировав поля константами, однако я обещал двигаться быстрее):</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>Sum(Money augend, Money addend) {</p>
<p>this.augend = augend;</p>
<p>this.addend = addend;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь в метод Bank.reduce() передается объект класса Sum. Если суммируются две одинаковые валюты и целевая валюта совпадает с валютой обоих слагаемых, значит, результатом будет объект класса Money, чье значение будет равно сумме значений двух слагаемых:</p>
<empty-line></empty-line><p>public void testReduceSum() {</p>
<p>Expression sum = new Sum(Money.dollar(3), Money.dollar(4));</p>
<p>Bank bank = new Bank();</p>
<p>Money result = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(7), result);</p>
<p>}</p>
<empty-line></empty-line><p>Я тщательно выбираю значения параметров так, чтобы нарушить работу существующего теста. Когда мы приводим (метод reduce()) объект класса Sum к некоторой валюте, в результате (с учетом упомянутых упрощенных условий) должен получиться объект класса Money, чье значение (amount) совпадает с суммой значений двух объектов Money, переданных конструктору объекта Sum, а валюта (currency) совпадает с валютой обоих этих объектов:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>Sum sum = (Sum) source;</p>
<p>int amount = sum.augend.amount + sum.addend.amount;</p>
<p>return new Money(amount, to);</p>
<p>}</p>
<empty-line></empty-line><p>Код выглядит уродливо по двум причинам:</p>
<p>• мы выполняем приведение к типу Sum, в то время как код должен работать с любым объектом типа Expression;</p>
<p>• мы используем общедоступные поля и два уровня ссылок на поля объектов.</p>
<p>Это достаточно легко исправить. Вначале переместим тело метода в класс Sum и благодаря этому избавимся от лишнего уровня ссылок:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>Sum sum = (Sum) source;</p>
<p>return sum.reduce(to);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>public Money reduce(String to) {</p>
<p>int amount = augend.amount + addend.amount;</p>
<p>return new Money(amount, to);</p>
<p>}</p>
<empty-line></empty-line><p>На секундочку заглянем в будущее. Приведение (reduce) суммы к некоторой валюте не может быть выполнено, если объект Sum не знает об обменном курсе. Однако обменный курс хранится в классе Bank, значит, скорее всего, в будущем нам потребуется передавать в метод Sum.reduce() еще один параметр типа Bank. Однако сейчас наш код не требует этого. Поэтому мы не добавляем никаких лишних параметров, чтобы лишний раз в них не путаться. (Что касается меня, то искушение было столь велико, что я все-таки добавил этот параметр, когда в первый раз писал данный код, – мне очень, очень стыдно.)</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strong>$5 + $5 = $10</strong></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p>Bank.reduce(Money)</p>
<empty-line></empty-line><p>Так, а что же происходит в случае, если аргументом метода Bank.reduce() является объект Money?</p>
<p>Давайте напишем тест, слава богу, перед нами зеленая полоса и мы не видим каких-либо других очевидных способов модификации кода:</p>
<empty-line></empty-line><p>public void testReduceMoney() {</p>
<p>Bank bank = new Bank();</p>
<p>Money result = bank.reduce(Money.dollar(1), "USD");</p>
<p>assertEquals(Money.dollar(1), result);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>if (source instanceof Money) return (Money) source;</p>
<p>Sum sum= (Sum) source;</p>
<p>return sum.reduce(to);</p>
<p>}</p>
<empty-line></empty-line><p>Какой кошмар! Отвратительно! Тем не менее мы получили зеленую полоску и можем приступать к рефакторингу. Прежде всего, вместо прямой проверки класса всегда следует использовать полиморфизм. Класс Sum реализует метод reduce(String), и, если этот метод добавить в класс Money, мы сможем включить reduce(String) в состав интерфейса Expression.</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>if (source instanceof Money)</p>
<p>return (Money) source.reduce(to);</p>
<p>Sum sum = (Sum) source;</p>
<p>return sum.reduce(to);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public Money reduce(String to) {</p>
<p>return this;</p>
<p>}</p>
<empty-line></empty-line><p>Включаем метод reduce(String) в состав интерфейса Expression:</p>
<empty-line></empty-line><p><strong>Expression</strong></p>
<p>Money reduce(String to);</p>
<empty-line></empty-line><p>Теперь можно избавиться от этих уродливых операций приведения типа и проверок классов:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>return source.reduce(to);</p>
<p>}</p>
<empty-line></empty-line><p>Я не вполне доволен ситуацией, когда в интерфейсе Expression и классе Bank присутствуют методы с одинаковыми именами, но с разным набором параметров. Я так и не смог найти приемлемого решения этой проблемы в Java. В языках, где поддерживаются ключевые параметры, разница между методами Bank.reduce(Expression, String) и Expression.reduce(String) делается очевидной благодаря синтаксису языка. Однако в языках, в которых различие параметров определяется различием их позиций в списке параметров, разница между двумя подобными методами становится менее очевидной.</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strong>$5 + $5 = $10</strong></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p>Приведение объекта Money с одновременной конверсией валют</p>
<p>Reduce(Bank,String)</p>
<empty-line></empty-line><p>Теперь можно приступить к задаче реального обмена одной валюты на другую.</p>
<p>В данной главе мы</p>
<p>• не отметили тест как завершенный, так как не избавились от дублирования;</p>
<p>• чтобы прояснить реализацию, решили двигаться вперед вместо того, чтобы двигаться назад;</p>
<p>• написали тест, чтобы форсировать создание объекта, который, как нам кажется, потребуется в будущем (объект класса Sum);</p>
<p>• ускорили процесс реализации (конструктор класса Sum);</p>
<p>• реализовали код с приведением типов в одном месте, добились успешного выполнения тестов, а затем переместили код туда, где он должен находиться;</p>
<p>• использовали полиморфизм, чтобы избавиться от явной проверки типа (класса).</p>
</section><section><title><p>14. Обмен валюты</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p>$5 + $5 = $10</p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strong>Приведение объекта Money с одновременной конверсией валют</strong></p>
<p>Reduce(Bank,String)</p>
<empty-line></empty-line><p>Изменения, перемены, обмены – их объятия заслуживают внимания (особенно если у вас есть книга с фразой в заголовке «в объятиях изменений» (embrace change))<a type="note" l:href="#n_8">[8]</a>. Впрочем, нас заботит простейшая форма обмена – у нас есть два франка и мы хотим получить один доллар. Это звучит как готовый тест:</p>
<empty-line></empty-line><p>public void testReduceMoneyDifferentCurrency() {</p>
<p>Bank bank = new Bank();</p>
<p>bank.addRate("CHF", "USD", 2);</p>
<p>Money result = bank.reduce(Money.franc(2), "USD");</p>
<p>assertEquals(Money.dollar(1), result);</p>
<p>}</p>
<empty-line></empty-line><p>Когда я конвертирую франки в доллары, я просто делю значение на два (мы по-прежнему игнорируем все эти неприятные проблемы, связанные с дробными числами). Чтобы сделать полоску зеленой, мы добавляем в код еще одну уродливую конструкцию:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public Money reduce(String to) {</p>
<p>int rate = (currency.equals("CHF") &amp;&amp; to.equals("USD"))</p>
<p>? 2</p>
<p>: 1;</p>
<p>return new Money(amount / rate, to);</p>
<p>}</p>
<empty-line></empty-line><p>Получается, что класс Money знает о курсе обмена. Это неправильно. Единственным местом, в котором выполняются любые операции, связанные с курсом обмена, должен быть класс Bank. Мы должны передать параметр типа Bank в метод Expression.reduce(). (Вот видите? Мы так и думали, что нам это потребуется. И мы оказались правы.) Вначале меняем вызывающий код:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>Money reduce(Expression source, String to) {</p>
<p>return source.reduce(<strong>this</strong>, to);</p>
<p>}</p>
<empty-line></empty-line><p>Затем меняем код реализаций:</p>
<empty-line></empty-line><p><strong>Expression</strong></p>
<p>Money reduce(<strong>Bank bank</strong>, String to);</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>public Money reduce(<strong>Bank bank</strong>, String to) {</p>
<p>int amount = augend.amount + addend.amount;</p>
<p>return new Money(amount, to);</p>
<p>}</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public Money reduce(<strong>Bank bank</strong>, String to) {</p>
<p>int rate = (currency.equals("CHF") &amp;&amp; to.equals("USD"))</p>
<p>? 2</p>
<p>: 1;</p>
<p>return new Money(amount / rate, to);</p>
<p>}</p>
<empty-line></empty-line><p>Методы должны быть общедоступными (public), так как все методы интерфейсов должны быть общедоступными (я надеюсь, можно не объяснять, почему).</p>
<p>Теперь мы можем вычислить курс обмена внутри класса Bank:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>int rate(String from, String to) {</p>
<p>return (from.equals("CHF") &amp;&amp; to.equals("USD"))</p>
<p>? 2</p>
<p>: 1;</p>
<p>}</p>
<empty-line></empty-line><p>И обратиться к объекту bank с просьбой предоставить значение курса обмена:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public Money reduce(Bank bank, String to) {</p>
<p>int rate = bank.rate(currency, to);</p>
<p>return new Money(amount / rate, to);</p>
<p>}</p>
<empty-line></empty-line><p>Эта надоедливая цифра 2 снова отсвечивает как в разрабатываемом коде, так и в теле теста. Чтобы избавиться от нее, мы должны создать таблицу обменных курсов в классе Bank и при необходимости обращаться к этой таблице для получения значения обменного курса. Для этой цели мы могли бы воспользоваться хеш-таблицей, которая ставит в соответствие паре валют соответствующий обменный курс. Можем ли мы в качестве ключа использовать двухэлементный массив, содержащий в себе две валюты? Проверяет ли метод Array.equals() эквивалентность элементов массива?</p>
<empty-line></empty-line><p>public void testArrayEquals() {</p>
<p>assertEquals(new Object[] {"abc"}, new Object[] {"abc"});</p>
<p>}</p>
<empty-line></empty-line><p>Нет. Тест провалился. Придется создавать специальный объект, который будет использоваться в качестве ключа хеш-таблицы:</p>
<empty-line></empty-line><p><strong>Pair</strong></p>
<p>private class Pair {</p>
<p>private String from;</p>
<p>private String to;</p>
<empty-line></empty-line><p>Pair(String from, String to) {</p>
<p>this.from = from;</p>
<p>this.to = to;</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Мы планируем использовать объекты Pair в качестве ключей, поэтому нам необходимо реализовать методы equals() и hashCode(). Я не собираюсь писать для этого тесты, так как мы разрабатываем код в контексте рефакторинга. Дело в том, что от работоспособности этого кода жестко зависит успешное выполнение существующих тестов. Если код работает неправильно, существующие тесты потерпят неудачу. Однако если бы я программировал в паре с кем-то, кто плохо представлял бы себе направление дальнейшего движения, или если бы логика кода была более сложной, я несомненно приступил бы к разработке специальных тестов.</p>
<empty-line></empty-line><p><strong>Pair</strong></p>
<p>public boolean equals(Object object) {</p>
<p>Pair pair = (Pair) object;</p>
<p>return from.equals(pair.from) &amp;&amp; to.equals(pair.to);</p>
<p>}</p>
<p>public int hashCode() {</p>
<p>return 0;</p>
<p>}</p>
<empty-line></empty-line><p>0 – ужасное хеш-значение, однако такой метод хеширования легко реализовать, стало быть, мы быстрее получим работающий код. Поиск валюты будет осуществляться простым линейным перебором. Позже, когда у нас будет множество валют, мы сможем тщательнее проработать этот вопрос, использовав реальные данные.</p>
<p>Теперь нам нужно место, в котором мы могли бы хранить значения обменных курсов:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>private Hashtable rates= new Hashtable();</p>
<empty-line></empty-line><p>Нам также потребуется метод добавления нового курса обмена:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>void addRate(String from, String to, int rate) {</p>
<p>rates.put(new Pair(from, to), new Integer(rate));</p>
<p>}</p>
<empty-line></empty-line><p>И метод, возвращающий обменный курс:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>int rate(String from, String to) {</p>
<p>Integer rate = (Integer) rates.get(new Pair(from, to));</p>
<p>return rate.intValue();</p>
<p>}</p>
<empty-line></empty-line><p>Подождите-ка минутку! Перед нами красная полоса. Что случилось? Взглянув на код, мы видим, что проблема в неправильном значении курса при обмене доллара на доллары. Мы ожидаем, что при обмене USD на USD курс обмена будет равен 1, однако на текущий момент это не так. Поскольку эта ситуация стала для нас сюрпризом, оформим ее в виде дополнительного теста:</p>
<empty-line></empty-line><p>public void testIdentityRate() {</p>
<p>assertEquals(1, new Bank(). rate("USD", "USD"));</p>
<p>}</p>
<empty-line></empty-line><p>Теперь у нас три ошибки, однако все они могут быть исправлены при помощи одного небольшого изменения:</p>
<empty-line></empty-line><p><strong>Bank</strong></p>
<p>int rate(String from, String to) {</p>
<p><strong>if (from.equals(to)) return 1;</strong></p>
<p>Integer rate = (Integer) rates.get(new Pair(from, to));</p>
<p>return rate.intValue();</p>
<p>}</p>
<empty-line></empty-line><p>Зеленая полоска!</p>
<empty-line></empty-line><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<empty-line></empty-line><p>Далее мы переходим к нашему последнему, самому большому тесту, $5 + 1 °CHF. В данной главе мы применили несколько важных технологий:</p>
<p>• добавили параметр, который может нам понадобиться;</p>
<p>• удалили дублирование между кодом и тестами;</p>
<p>• написали тест (testArrayEquals), чтобы проверить порядок функционирования встроенной операции Java;</p>
<p>• создали вспомогательный закрытый (private) класс, не обладающий собственными тестами;</p>
<p>• допустили ошибку при рефакторинге и написали еще один тест, чтобы изолировать проблему.</p>
<p>8 Используя игру слов (английское change означает как «изменение», так и «обмен»), автор намекает на свою знаменитую книгу-бестселлер <emphasis>Extreme Programming Explained: Embrace Change</emphasis>. Русский перевод: Бек К. Экстремальное программирование. СПб.: Питер, 2002. 224 с. – <emphasis>Примеч. ред</emphasis>.</p>
</section><section><title><p>15. Смешение валют</p>
</title><p>$5 + 1 °CHF = $10, если курс обмена 2:1</p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<empty-line></empty-line><p>Теперь мы готовы написать тест, с которого все началось, – $5 + 1 °CHF:</p>
<empty-line></empty-line><p>public void testMixedAddition() {</p>
<p>Expression fiveBucks = Money.dollar(5);</p>
<p>Expression tenFrancs = Money.franc(10);</p>
<p>Bank bank = new Bank();</p>
<p>bank.addRate("CHF", "USD", 2);</p>
<p>Money result = bank.reduce(fiveBucks.plus(tenFrancs), "USD");</p>
<p>assertEquals(Money.dollar(10), result);</p>
<p>}</p>
<empty-line></empty-line><p>Именно такой код нам хотелось бы написать. К сожалению, мы сразу же получаем кучу ошибок компиляции. Обобщая код в процессе перехода от Money к Expression, мы оставили много висящих хвостов, на которые я, конечно же, обратил внимание, но решил вас не беспокоить. Теперь настало время заняться устранением дефектов.</p>
<p>Мы не сможем достаточно быстро обеспечить компиляцию предыдущего теста. Как только мы внесем в код первое изменение, нам потребуется внести в код еще изменения, и так далее. Теперь мы можем двигаться дальше одним из двух путей. Мы можем заставить тест работать быстро, для этого надо написать более специфичный тест и затем выполнить обобщение. Второй путь: довериться компилятору и с его помощью найти все ошибки. Давайте попробуем действовать медленно (на практике я внес бы в код все необходимые изменения за один раз).</p>
<empty-line></empty-line><p>public void testMixedAddition() {</p>
<p>Money fiveBucks = Money.dollar(5);</p>
<p>Money tenFrancs = Money.franc(10);</p>
<p>Bank bank = new Bank();</p>
<p>bank.addRate("CHF", "USD", 2);</p>
<p>Money result = bank.reduce(fiveBucks.plus(tenFrancs), "USD");</p>
<p>assertEquals(Money.dollar(10), result);</p>
<p>}</p>
<empty-line></empty-line><p>Тест терпит неудачу. Мы получаем 15 USD вместо 10 USD. Дело в том, что метод Sum.reduce() не выполняет приведение аргументов:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>public Money reduce(Bank bank, String to) {</p>
<p>int amount = augend.amount + addend.amount;</p>
<p>return new Money(amount, to);</p>
<p>}</p>
<empty-line></empty-line><p>Если выполнить приведение обоих аргументов, тест должен сработать:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>public Money reduce(Bank bank, String to) {</p>
<p>int amount= augend.reduce(bank, to). amount</p>
<p>+ addend.reduce(bank, to). amount;</p>
<p>return new Money(amount, to);</p>
<p>}</p>
<empty-line></empty-line><p>И действительно, тест срабатывает. Теперь мы можем заменить тип Money на тип Expression. Чтобы избежать взаимовлияний, мы начнем издалека и будем двигаться в направлении тестирующего кода. Итак, поля augend и addend теперь могут иметь тип Expression:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>Expression augend;</p>
<p>Expression addend;</p>
<empty-line></empty-line><p>Аргументы конструктора тоже могут иметь тип Expression:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>Sum(Expression augend, Expression addend) {</p>
<p>this.augend = augend;</p>
<p>this.addend = addend;</p>
<p>}</p>
<empty-line></empty-line><p>(Класс Sum начинает напоминать мне шаблон «Компоновщик» (Composite), однако еще не настолько, чтобы я захотел обобщить его.) С классом Sum, пожалуй, закончили, а что насчет Money?</p>
<p>Аргумент метода plus() может иметь тип Expression:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>Expression plus(Expression addend) {</p>
<p>return new Sum(this, addend);</p>
<p>}</p>
<empty-line></empty-line><p>Метод times() может возвращать значение типа Expression:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>Expression times(int multiplier) {</p>
<p>return new Money(amount * multiplier, currency);</p>
<p>}</p>
<empty-line></empty-line><p>Это означает, что операции plus() и times() должны входить в состав интерфейса Expression. С классом Money закончили. Теперь можно изменить аргументы метода plus() в реализации теста:</p>
<empty-line></empty-line><p>public void testMixedAddition() {</p>
<p>Money fiveBucks = Money.dollar(5);</p>
<p><strong>Expression</strong> tenFrancs = Money.franc(10);</p>
<p>Bank bank = new Bank();</p>
<p>bank.addRate("CHF", "USD", 2);</p>
<p>Money result = bank.reduce(fiveBucks.plus(tenFrancs), "USD");</p>
<p>assertEquals(Money.dollar(10), result);</p>
<p>}</p>
<empty-line></empty-line><p>Объект tenFrancs теперь принадлежит типу Expression, а это значит, что мы должны внести в код некоторые изменения. К счастью, компилятор подсказывает нам, что именно мы должны сделать. Прежде всего вносим изменение:</p>
<empty-line></empty-line><p>public void testMixedAddition() {</p>
<p><strong>Expression</strong> fiveBucks = Money.dollar(5);</p>
<p>Expression tenFrancs = Money.franc(10);</p>
<p>Bank bank = new Bank();</p>
<p>bank.addRate("CHF", "USD", 2);</p>
<p>Money result = bank.reduce(fiveBucks.plus(tenFrancs), "USD");</p>
<p>assertEquals(Money.dollar(10), result);</p>
<p>}</p>
<empty-line></empty-line><p>Компилятор вежливо сообщает, что plus() не является методом интерфейса Expression. Добавим этот метод в интерфейс:</p>
<empty-line></empty-line><p>Expression</p>
<p>Expression plus(Expression addend);</p>
<empty-line></empty-line><p>Теперь мы должны добавить этот метод в классы Money и Sum. Money? Да, этот метод должен быть открытым (public) в классе Money:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public Expression plus(Expression addend) {</p>
<p>return new Sum(this, addend);</p>
<p>}</p>
<empty-line></empty-line><p>Что касается класса Sum, просто добавим заглушку и отметим необходимость реализации этого метода в списке задач:</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>public Expression plus(Expression addend) {</p>
<p>return null;</p>
<p>}</p>
<p><strikethrough>$5 + 1 °CHF = $10, если курс</strikethrough> <strikethrough>обмена 2:1</strikethrough></p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<p>Sum.plus</p>
<p>Expression.times</p>
<empty-line></empty-line><p>Теперь программа компилируется и все тесты выполняются успешно.</p>
<p>Мы готовы завершить обобщение класса Money до Expression, но прежде, как всегда, подведем краткий итог. В этой главе мы</p>
<p>• за один шаг написали необходимый тест и затем модифицировали его, чтобы добиться успешного его выполнения;</p>
<p>• выполнили обобщение (использовали более абстрактное объявление);</p>
<p>• воспользовались подсказками компилятора, чтобы внести изменения (Expression fiveBucks), которые привели к необходимости дополнительных изменений (добавление метода plus() в интерфейс Expression и т. п.).</p>
</section><section><title><p>16. Абстракция, наконец-то!</p>
</title><p><strikethrough>$5 + 1 °CHF = $10, если курс обмена 2:1</strikethrough></p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<p><strong>Sum.plus</strong></p>
<p>Expression.times</p>
<empty-line></empty-line><p>Чтобы завершить добавление метода Expression.plus, мы должны реализовать метод Sum.plus(). Затем нам останется добавить метод Expression.times(), и мы сможем считать пример завершенным. Вот тест для метода Sum.plus():</p>
<empty-line></empty-line><p>public void testSumPlusMoney() {</p>
<p>Expression fiveBucks = Money.dollar(5);</p>
<p>Expression tenFrancs = Money.franc(10);</p>
<p>Bank bank = new Bank();</p>
<p>bank.addRate("CHF", "USD", 2);</p>
<p>Expression sum = new Sum(fiveBucks, tenFrancs). plus(fiveBucks);</p>
<p>Money result = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(15), result);</p>
<p>}</p>
<empty-line></empty-line><p>Мы могли бы создать объект Sum путем сложения fiveBucks и tenFrancs, однако приведенный код, который явно создает объект Sum, выглядит более понятным. Ведь мы пишем эти тесты не только ради удовольствия от программирования, но также для того, чтобы будущие поколения программистов могли оценить нашу гениальность. Однако они не смогут сделать этого, если код будет непонятным. Поэтому, разрабатывая любой код, думайте о тех, кто будет его читать.</p>
<p>В данном случае код теста длиннее, чем сам тестируемый код. Код точно такой же, как код в классе Money (кажется, я уже предвижу необходимость создания абстрактного класса):</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>public Expression plus(Expression addend) {</p>
<p>return new Sum(this, addend);</p>
<p>}</p>
<p><strikethrough>$5 + 1 °CHF = $10, если курс обмена 2:1</strikethrough></p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<p><strikethrough>Sum.plus</strikethrough></p>
<p>Expression.times</p>
<empty-line></empty-line><p>При использовании TDD вы часто будете сталкиваться с тем, что количество строк в тестовом коде будет приблизительно таким же, как и количество строк в тестируемом коде. Чтобы методика TDD обладала экономическим смыслом, вы должны либо записывать в два раза большее количество строк кода, чем обычно, либо реализовывать ту же самую функциональность при помощи количества строк, в два раза меньшего, чем обычно. Эти показатели рекомендуется оценить самостоятельно на примере собственной практики. Однако, выполняя оценку, вы должны принять во внимание время, которое тратится на отладку, интеграцию и объяснение внутреннего устройства другим людям.</p>
<empty-line></empty-line><p><strikethrough>$5 + 1 °CHF = $10, если курс обмена 2:1</strikethrough></p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<p><strikethrough>Sum.plus</strikethrough></p>
<p><strikethrough>Expression.times</strikethrough></p>
<empty-line></empty-line><p>Если мы получили работающий метод Sum.times(), значит, объявление Expression.times() не составит для нас труда. Вот соответствующий тест:</p>
<empty-line></empty-line><p>public void testSumTimes() {</p>
<p>Expression fiveBucks = Money.dollar(5);</p>
<p>Expression tenFrancs = Money.franc(10);</p>
<p>Bank bank = new Bank();</p>
<p>bank.addRate("CHF", "USD", 2);</p>
<p>Expression sum = new Sum(fiveBucks, tenFrancs). times(2);</p>
<p>Money result = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(20), result);</p>
<p>}</p>
<empty-line></empty-line><p>И снова тест получился длиннее тестируемого кода. (Те, кто достаточно много работал с JUnit, должно быть уже догадались, как решить эту проблему. Остальным я рекомендую прочитать раздел «<emphasis>Fixture (Фикстура)</emphasis>» в главе 29, посвященной шаблонам xUnit.)</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>Expression times(int multiplier) {</p>
<p>return new Sum(augend.times(multiplier), addend.times(multiplier));</p>
<p>}</p>
<empty-line></empty-line><p>В предыдущей главе мы изменили тип переменных augend и addend на Expression, поэтому теперь, чтобы скомпилировать код, нам необходимо добавить в интерфейс Expression метод times():</p>
<empty-line></empty-line><p><strong>Expression</strong></p>
<p>Expression times(int multiplier);</p>
<empty-line></empty-line><p>При этом нам следует изменить режим видимости методов Money.times() и Sum.times() (они должны стать общедоступными):</p>
<empty-line></empty-line><p><strong>Sum</strong></p>
<p>public Expression times(int multiplier) {</p>
<p>return new Sum(augend.times(multiplier), addend.times(multiplier));</p>
<p>}</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public Expression times(int multiplier) {</p>
<p>return new Money(amount * multiplier, currency);</p>
<p>}</p>
<p><strikethrough>$5 + 1 °CHF = $10, если курс обмена 2:1</strikethrough></p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<p><strikethrough>Sum.plus</strikethrough></p>
<p><strikethrough>Expression.times</strikethrough></p>
<empty-line></empty-line><p>Все заработало.</p>
<empty-line></empty-line><p>Осталось провести эксперимент для случая, когда в результате выполнения операции $5 + $5 получается объект Money. Вот соответствующий тест:</p>
<empty-line></empty-line><p>public void testPlusSameCurrencyReturnsMoney() {</p>
<p>Expression sum = Money.dollar(1). plus(Money.dollar(1));</p>
<p>assertTrue(sum instanceof Money);</p>
<p>}</p>
<empty-line></empty-line><p>Тест выглядит несколько неопрятно, так как тестирует внутреннюю реализацию, а не внешнее поведение объектов. Однако он принуждает нас внести в программу изменения, которые нам необходимы, и, в конце концов, это всего лишь эксперимент. Вот код, который мы должны модифицировать, чтобы заставить тест работать:</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>public Expression plus(Expression addend) {</p>
<p>return new Sum(this, addend);</p>
<p>}</p>
<p><strikethrough>$5 + 1 °CHF = $10, если курс обмена 2:1</strikethrough></p>
<p><strikethrough>$5 + $5 = $10</strikethrough></p>
<p>Операция $5 + $5 возвращает объект Money</p>
<p><strikethrough>Bank.reduce(Money)</strikethrough></p>
<p><strikethrough>Приведение объекта Money с одновременной конверсией валют</strikethrough></p>
<p><strikethrough>Reduce(Bank,String)</strikethrough></p>
<p><strikethrough>Sum.plus</strikethrough></p>
<p><strikethrough>Expression.times</strikethrough></p>
<empty-line></empty-line><p>Не существует очевидного и ясного способа проверить валюту аргумента, если этот аргумент является объектом класса Money (по крайней мере, я не могу найти такого способа, однако вы можете над этим подумать). Эксперимент окончился неудачей, мы удаляем тест (который нам все равно не нравился).</p>
<empty-line></empty-line><p>Подводим итог. Мы</p>
<p>• написали тест так, чтобы его смысл легко был понят другими программистами, которые в будущем будут читать разработанный нами код;</p>
<p>• наметили эксперимент, призванный сравнить эффективность TDD по отношению к обычному стилю программирования, используемому вами на текущий момент;</p>
<p>• снова столкнулись с необходимостью изменения множества объявлений в разрабатываемом коде и снова воспользовались услугами компилятора, чтобы исправить все неточности;</p>
<p>• попробовали провести быстрый эксперимент, однако отказались от идеи, так как она не сработала, и уничтожили соответствующий тест.</p>
</section><section><title><p>17. Ретроспектива денежного примера</p>
</title><p>Давайте еще раз окинем взглядом пример реализации мультивалютных вычислений и попробуем оценить использованный нами подход и полученные результаты. Вот несколько тезисов, которых хотелось бы коснуться:</p>
<p><emphasis> Что дальше?</emphasis> Как определить дальнейшее направление разработки?</p>
<p><emphasis> Метафора</emphasis>. Впечатляющий эффект, который метафора оказывает на структуру дизайна.</p>
<p><emphasis> Использование JUnit</emphasis>. Как часто мы запускали тесты и как мы использовали JUnit?</p>
<p><emphasis> Метрики кода</emphasis>. Численные характеристики получившегося кода.</p>
<p><emphasis> Процесс</emphasis>. Мы говорим: «красный – зеленый – рефакторинг». Как много усилий прикладывается на каждом из этих этапов?</p>
<p><emphasis> Качество тестов</emphasis>. Каким образом характеристики тестов TDD соотносятся с характеристиками обычных методик тестирования?</p>
<subtitle><emphasis><strong>Что дальше?</strong></emphasis></subtitle><p>Можно ли считать код завершенным? Нет. Методы Sum.plus() и Money.plus() во многом дублируют друг друга. Если мы преобразуем интерфейс Expression в класс (не совсем обычное преобразование – чаще классы становятся интерфейсами), мы получим возможность переместить общий код в единый общий метод.</p>
<p>На самом деле мне сложно представить себе код, который полностью завершен. Методику TDD можно использовать как способ приближения к идеалу, однако это будет не самое эффективное ее использование. Если вы имеете дело с крупной системой, тогда части системы, с которыми вы работаете каждый день, должны быть тщательно «вылизаны». Иными словами, дизайн должен быть чистым и понятным, а код должен быть хорошо протестированным. В этом случае вы изо дня в день сможете вносить в систему необходимые изменения, не теряя при этом уверенности в работоспособности кода. Однако на периферии системы, где располагаются части, к которым вы обращаетесь относительно редко, количество тестов может быть меньше, а дизайн – уродливее.</p>
<p>Когда я завершаю решение всех очевидных задач, я люблю запускать инструмент проверки оформления кода (например, SmallLint для Smalltalk). Многие полученные в результате этого предложения мне и без того известны. Со многими предложениями я не согласен. Однако автоматизированный инструмент проверки кода ни о чем не забывает, поэтому иногда он обнаруживает то, что было упущено мною из виду.</p>
<p>Еще один полезный вопрос: «Какие дополнительные тесты необходимо написать для системы?» Иногда кажется, что некоторый тест должен потерпеть неудачу, однако, добавив его в тестовый набор, вы обнаруживаете, что он работает. В этом случае необходимо определить, почему так происходит. Иногда тест, который не должен работать, действительно не работает, и вы добавляете его в набор, как признак известного вам ограничения разрабатываемой системы или как напоминание о работе, которую необходимо выполнить позднее.</p>
<p>Наконец, когда список задач пуст, неплохо еще раз проверить дизайн. Удовлетворяет ли данная реализация всем предъявляемым требованиям? Существует ли дублирование, которое сложно устранить при использовании данного дизайна? (Сохранившееся дублирование – признак нереализованного дизайна.)</p>
<subtitle><emphasis><strong>Метафора</strong></emphasis></subtitle><p>Лично для меня самым большим сюрпризом в данном примере явилось впечатляющее отличие окончательного дизайна от тех разработок, с которыми мне приходилось иметь дело до написания этой книги. Я выполнял разработку аналогичного мультивалютного кода для различных программных систем, реально используемых в производстве, по меньшей мере три раза (насколько я могу припомнить). Кроме того, я использовал эту же задачу для разного рода публикаций еще раз шесть или семь. Помимо публикаций я пятнадцать раз программировал этот пример перед аудиторией на различных конференциях (программировал со сцены – звучит здорово, но выглядит менее впечатляюще). Наконец, прежде чем написать окончательный вариант первой части данной книги, я перебрал три или четыре различных направления разработки кода (я менял направление своих мыслей в соответствии с поступавшими ранними рецензиями и отзывами о написанном материале). И вот, пока я работал над текстом первой части, мне в голову пришла мысль использовать в качестве метафоры <emphasis>математические выражения</emphasis> (expressions). В результате дизайн стал развиваться по совершенно иному, не известному мне ранее пути.</p>
<p>Я никогда не думал, что метафора – это настолько мощный инструмент. Многие думают, что метафора – это всего лишь источник имен. Разве не так? Похоже, что нет.</p>
<p>Для представления «комбинации нескольких денежных величин, которые могут быть выражены в разных валютах», Уорд Каннингэм использовал метафору <emphasis>вектора</emphasis>. Имеется в виду математический вектор – набор коэффициентов, каждому из которых соответствует некоторая валюта. Лично я некоторое время использовал метафору <emphasis>суммы денег</emphasis> (MoneySum), затем придумал <emphasis>денежный мешок</emphasis> (MoneyBag) – звучит понятно и близко к реальности, – наконец, остановился на метафоре <emphasis>бумажника</emphasis> (Wallet). Что такое бумажник и как он функционирует, известно абсолютно всем. Все эти метафоры подразумевают, что набор денежных значений (объектов Money) является плоским. Иначе говоря, выражение 2 USD + 5 CHF + 3 USD эквивалентно выражению 5 USD + 5 CHF. Два значения в одной и той же валюте автоматически сливаются в одно.</p>
<p>Метафора <emphasis>математического выражения</emphasis> избавила меня от множества неприятных проблем, связанных со слиянием дублирующихся валют. Результирующий код получился чище, чем я когда-либо видел. Конечно же, я несколько обеспокоен производительностью кода, основанного на подобной метафоре, однако, прежде чем приступать к оптимизации, я намерен проанализировать статистику обращений к различным участкам кода.</p>
<p>Почему я был вынужден переписать заново то, что я уже писал до этого не меньше 20 раз? Буду ли я и дальше сталкиваться с подобными сюрпризами? Существует ли способ, который позволит мне найти правильное решение, по крайней мере в течение первых трех попыток? А может быть, этот способ позволит мне найти правильное решение с первой попытки?</p>
<subtitle><emphasis><strong>Использование JUnit</strong></emphasis></subtitle><p>Я поручил инфраструктуре JUnit вести журнал в процессе разработки мультивалютного примера. Выяснилось, что за все время я нажал клавишу Enter ровно 125 раз. Оценку интервала между запусками тестов нельзя считать достоверной, так как в ходе работы я не только программировал, но и писал текст книги. Однако когда я занимался только программированием, я запускал тесты приблизительно раз в минуту.</p>
<p>На рис. 17.1 представлена гистограмма интервалов между запусками тестов. Большое количество длительных интервалов, скорее всего, обусловлено тем, что я тратил значительное время на написание текста книги.</p>
<empty-line></empty-line><image l:href="#i_007.png"></image><p><strong>Рис. 17.1.</strong> Гистограмма интервалов времени между запусками тестов</p>
<subtitle><emphasis><strong>Метрики кода</strong></emphasis></subtitle><p>В табл. 17.1 приводятся некоторые статистические данные, характеризующие код.</p>
<empty-line></empty-line><p><strong>Таблица 17.1.</strong> Метрики кода</p>
<image l:href="#i_008.png"></image><empty-line></empty-line><p>Вот некоторые примечания к данной таблице:</p>
<p>1. Мы не реализовали весь программный интерфейс (API) целиком, поэтому не можем достоверно оценить полное количество функций, или количество функций на один класс, или количество строк кода на один класс. Однако соотношения этих параметров можно считать поучительными. Количество функций и количество строк в тестах приблизительно такое же, как и в функциональном коде.</p>
<p>2. Количество строк кода в тестах можно сократить, если извлечь из кода операции подготовки тестовых данных. Однако общее соотношение между строками функционального кода и строками тестирующего кода при этом сохранится.</p>
<p>3. Цикломатическая сложность (cyclomatic complexity) – это величина, характеризующая сложность обычного потока управления в программе. Цикломатическая сложность тестов равна 1, так как в тестирующем коде нет ни ветвлений, ни циклов. Цикломатическая сложность функционального кода близка к единице, так как вместо явных ветвлений для передачи управления чаще используется полиморфизм.</p>
<p>4. Оценка количества строк в функции дана с учетом заголовка функции и закрывающей скобки.</p>
<p>5. Количество строк на функцию для тестирующего кода в нашем случае больше чем могло бы быть, так как мы не выделили общий код в отдельные функции. Об этом рассказывается в главе 29, которая посвящена методам работы с xUnit.</p>
<subtitle><emphasis><strong>Процесс</strong></emphasis></subtitle><p>Цикл TDD выглядит следующим образом:</p>
<p>• написать тест;</p>
<p>• запустить все тесты и убедиться, что добавленный тест терпит неудачу;</p>
<p>• внести в код изменения;</p>
<p>• запустить тесты и убедиться, что все они выполнились успешно;</p>
<p>• выполнить рефакторинг, чтобы устранить дублирование.</p>
<p>Если исходить из того, что разработка теста – это один шаг, какое количество изменений требуется сделать, чтобы выполнить компиляцию, запуск и рефакторинг? (Под изменением я подразумеваю изменение определения метода или класса.) На рис. 17.2 показана гистограмма количества изменений для каждого из тестов «денежного» примера, над которым мы работали в первой части книги.</p>
<empty-line></empty-line><image l:href="#i_009.png"></image><p><strong>Рис. 17.2.</strong> Гистограмма количества изменений, приходящихся на каждый период рефакторинга</p>
<empty-line></empty-line><p>Я полагаю, что если бы мы собирали статистику для достаточно крупного проекта, мы обнаружили бы, что количество изменений, необходимых для компиляции и запуска кода, очень невелико (это количество можно уменьшить, если среда разработки будет понимать, что пытаются ей сказать тесты, и, например, автоматически добавлять в функциональный код необходимые заглушки). Однако количество изменений, вносимых в код во время рефакторинга, должно соответствовать (вот главный тезис) кривой распределения с эксцессом больше нормального, то есть с большим числом изменений, чем предсказывается стандартной кривой нормального распределения. Подобный профиль характерен для многих других естественных процессов, например для изменения стоимости акций на рынке ценных бумаг<a type="note" l:href="#n_9">[9]</a>.</p>
<subtitle><emphasis><strong>Качество тестов</strong></emphasis></subtitle><p>Тесты являются неотъемлемой частью методики TDD. Они могут запускаться в любое время работы над программой, а также после того, как программа будет завершена. Однако не стоит путать их с другими важными типами тестирования:</p>
<p>• тестированием производительности;</p>
<p>• нагрузочным тестированием;</p>
<p>• тестированием удобства использования.</p>
<p>Тем не менее, если плотность вероятности дефектов в коде, разработанном с использованием TDD, невелика, роль профессионального тестирования меняется. Если обычно профессиональное тестирование используется для постоянного надзора за работой программистов, то при использовании TDD профессиональное тестирование больше напоминает вспомогательный инструмент, облегчающий коммуникацию между теми, кто знает, как должна работать система, и теми, кто создает систему.</p>
<p>Как можно оценить качество разработанных нами тестов? Вот два широко распространенных метода:</p>
<p><emphasis>Охват кода</emphasis> (statement coverage). Для оценки качества тестов этой характеристики недостаточно, однако ее можно использовать как отправную точку. Если программист ревностно следует всем требованиям TDD, тесты должны охватывать 100 % кода. Для оценки этой характеристики можно использовать специальные программные средства. Например, программа JProbe (www.sitaka.com/software/jprobe) сообщает нам, что в нашем примере не охваченной тестами осталась всего одна строка в одном методе – Money.toString(). Напомню, что эта строка была добавлена в отладочных целях, фактически она не является функциональным кодом.</p>
<p><emphasis>Намеренное добавление дефекта</emphasis> (defect insertion). Это еще один способ проверки качества тестов. Идея проста: изменить значение строки кода и убедиться, что тест перестал работать. Делать это можно вручную или при помощи специального инструмента, такого как Jester (jester.sourceforge.net). Этот инструмент сообщает нам, что в нашей программе существует всего одна строка, которую можно изменить, не нарушив работы тестов. Вот эта строка: Pair.hashCode(). Здесь мы просто подделали реализацию – вместо хеш-кода метод возвращает постоянное значение: 0. Если одно постоянное значение заменить другим, смысл программы не изменится (одна подделка ничем не лучше другой), поэтому подобную модификацию кода нельзя считать дефектом.</p>
<p>Флип, один из рецензентов моей книги, сообщил мне некоторые дополнительные соображения относительно охвата тестами. Абсолютный показатель охвата вычисляется следующим образом: количество тестов, предназначенных для тестирования различных аспектов программы, необходимо разделить на количество аспектов, которые нуждаются в тестировании (сложность логики программы). Существует два способа улучшить показатель охвата тестами. Во-первых, можно написать больше тестов. Отсюда разница в количестве тестов, которые пишутся разработчиком, использующим TDD, и профессиональным тестером. (В главе 32 приводится пример задачи, для решения которой я написал 6 тестов, а человек, профессионально занимающийся тестированием, – 65 тестов.) Однако существует и другой способ улучшить охват – ограничиться фиксированным набором тестов и упростить логику программы. Подобный эффект зачастую достигается в процессе рефакторинга – условные операторы заменяются сообщениями классов или вовсе удаляются из программы. Флип выражает эту мысль так: «Вместо того чтобы увеличить количество тестов и тем самым охватить всевозможные комбинации входных данных (говоря точнее, эффективное подмножество всех комбинаций), мы оставляем количество тестов неизменным и меняем количество внутренних структурных комбинаций кода».</p>
<subtitle><emphasis><strong>Последний взгляд назад</strong></emphasis></subtitle><p>Существует три важных навыка, которые необходимо освоить тем, кто впервые изучает TDD:</p>
<p>• три основных подхода, которые используются, чтобы заставить тест работать: подделка реализации, триангуляция и очевидная реализация;</p>
<p>• устранение дублирования между функциональным кодом и тестами – важный способ формирования дизайна;</p>
<p>• способность контролировать расстояние между тестами: когда дорога становится скользкой, необходимо двигаться маленькими шажками; когда дальнейший путь ясен, можно увеличить скорость.</p>
</section></section><section><title><p>Часть II</p>
<p>На примере xUnit</p>
</title><section><p>Какой подход использовать при создании инструмента для разработки через тестирование? Естественно, разработку через тестирование.</p>
<p>Архитектура xUnit хорошо реализуется на языке Python, поэтому во второй части книги я перейду на использование Python. Не беспокойтесь, для тех, кто никогда раньше не имел дела с Python, я добавлю в текст необходимые пояснения. Когда вы прочитаете вторую часть, вы, во-первых, освоите базовые навыки программирования на Python, во-вторых, узнаете, как самому разработать свою собственную инфраструктуру для автоматического тестирования, и, в-третьих, ознакомитесь с более сложным примером использования методики TDD – три по цене одного!</p>
</section><section><title><p>18. Первые шаги на пути к xUnit</p>
</title><p>Разработка инструмента тестирования с использованием самого этого инструмента для тестирования многим может показаться чем-то, напоминающим хирургическую операцию на своем собственном мозге. («Только не вздумай трогать центры моторики! О! Слишком поздно! Игра окончена».) Сначала эта идея может показаться жутковатой. Однако инфраструктура тестирования обладает более сложной внутренней логикой, если сравнивать с относительно несложным денежным примером, рассмотренным в первой части книги. Часть II можно рассматривать как шаг в сторону разработки «настоящего» программного обеспечения. Кроме того, вы можете рассматривать этот материал как упражнение в самодокументируемом программировании.</p>
<p>Прежде всего, у нас должна быть возможность создать тест и запустить тестовый метод. Например: TestCase("testMethod"). run(). Возникает проблема: мы собираемся написать тест для программного кода, который мы будем использовать для написания тестов. Так как у нас пока еще нет даже намека на инфраструктуру тестирования, мы вынуждены проверить правильность нашего самого первого шага вручную. К счастью, мы достаточно хорошо отдохнули, а значит, вероятность того, что мы допустим ошибку, относительно невелика. Однако чтобы сделать ее еще меньше, мы планируем двигаться маленькими-маленькими шажками, тщательно проверяя все, что мы делаем. Вот список задач, который приходит на ум, когда начинаешь размышлять о разработке собственной инфраструктуры тестирования:</p>
<empty-line></empty-line><p><strong>Вызов тестового метода</strong></p>
<p>Вызов метода setUp перед обращением к методу</p>
<p>Вызов метода tearDown после обращения к методу</p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<empty-line></empty-line><p>Конечно же, мы по-прежнему работаем в стиле «сначала тесты». Для нашего прототеста нам потребуется небольшая программа, которая должна отображать на экране значение «истина», если произошло обращение к тестовому методу, и значение «ложь» в противном случае. Теперь представим, что у нас есть тест, который устанавливает флаг внутри тестового метода, в этом случае мы могли бы после выполнения теста отобразить состояние флага на экране и самостоятельно убедиться в том, что флаг установлен правильно. Выполнив проверку вручную, мы сможем попробовать автоматизировать процесс.</p>
<p>Итак, у нас наметилась следующая стратегия. Мы создаем объект, который соответствует нашему тесту. В объекте содержится флаг. Перед выполнением тестового метода флаг должен быть установлен в состояние «ложь». Тестовый метод устанавливает флаг в состояние «истина». После выполнения тестового метода мы должны проверить состояние флага. Назовем наш тестовый класс именем WasRun<a type="note" l:href="#n_10">[10]</a>, так как объект этого класса будет сигнализировать нам о том, был ли выполнен тестовый метод. Флаг внутри этого класса также будет называться wasRun (это несколько сбивает с толку, однако wasRun – такое подходящее имя). Собственно объект (экземпляр класса WasRun) будет называться просто test. То есть мы сможем написать инструкцию assert test.wasRun (assert – встроенная инструкция языка Python).</p>
<p>Язык программирования Python является интерпретируемым – команды исполняются по мере чтения их из файла с исходным кодом. Поэтому, чтобы выполнить тестирование, мы можем написать следующий короткий файл и попробовать запустить его:</p>
<empty-line></empty-line><p>test = WasRun(«testMethod»)</p>
<p>print(test.wasRun)</p>
<p>test.testMethod()</p>
<p>print(test.wasRun)</p>
<empty-line></empty-line><p>Мы ожидаем, что эта миниатюрная программа напечатает None до выполнения тестового метода и 1 – после. (В языке Python значение None является аналогом null или nil и наряду с числом 0 соответствует значению «ложь».) Однако программа не делает того, что мы от нее ждем. И немудрено – мы еще не определили класс WasRun (сначала тесты!).</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>class WasRun:</p>
<p>pass</p>
<empty-line></empty-line><p>(Ключевое слово pass используется в случае, если реализация класса или метода отсутствует.) Теперь интерпретатор сообщает нам, что в классе WasRun нет атрибута с именем wasRun. Создание атрибута происходит в момент создания объекта (экземпляра класса), то есть в процессе выполнения конструктора (для удобства конструктор любого класса называется __init__). Внутри конструктора мы присваиваем флагу wasRun значение None (ложь):</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>class WasRun:</p>
<p>def __init__(self, name):</p>
<p>self.wasRun = None</p>
<empty-line></empty-line><p>Теперь программа действительно отображает на экране значение None, однако после этого интерпретатор сообщает нам, что мы должны определить в классе WasRun метод testMethod. (Было бы неплохо, если бы среда разработки автоматически реагировала на это: самостоятельно создавала бы функцию-заглушку и открывала редактор с курсором, установленным в теле этой функции. Не правда ли, это было бы просто здорово? Кстати, некоторые производители IDE уже додумались до этого.)</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def testMethod(self):</p>
<p>pass</p>
<empty-line></empty-line><p>Запускаем файл и видим на экране два значения: None и None<a type="note" l:href="#n_11">[11]</a>. Нам хотелось бы видеть None и 1. Чтобы получить желаемый результат, в теле метода testMethod присвоим флагу wasRun желаемое значение:</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def testMethod(self):</p>
<p>self.wasRun = 1</p>
<empty-line></empty-line><p>Запускаем программу – то, что нужно! Мы получили желаемый результат. Зеленая полоса – ур-р-ра! Нам предстоит сложный рефакторинг, однако если мы видим перед собой зеленую полосу, значит, мы добились прогресса.</p>
<p>Теперь, вместо того чтобы напрямую обращаться к нашему тестовому методу, мы должны использовать наш реальный интерфейс – метод run(). Изменим тест следующим образом:</p>
<empty-line></empty-line><p>test= WasRun(«testMethod»)</p>
<p>print(test.wasRun)</p>
<p>test.run()</p>
<p>print(test.wasRun)</p>
<empty-line></empty-line><p>Чтобы заставить тест работать, достаточно воспользоваться следующей несложной реализацией:</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def run(self):</p>
<p>self.testMethod()</p>
<empty-line></empty-line><p>Наша тестовая программа снова печатает на экране то, что нам нужно. Зачастую во время рефакторинга возникает ощущение, что необходимо разделить код, с которым вы работаете, на две части, чтобы работать с ними по отдельности. Если в конце работы они снова сольются воедино, – замечательно. Если нет, значит, вы можете оставить их отдельно друг от друга. В данном случае со временем мы планируем создать класс TestCase, однако вначале мы должны обособить части нашего примера.</p>
<p>Следующий этап – динамический вызов метода testMethod. Одной из приятных отличительных характеристик языка Python является возможность использования имен классов и методов в качестве функций (см. создание экземпляра класса WasRun). Получив атрибут, соответствующий имени теста, мы можем обратиться к нему, как к функции. В результате будет выполнено обращение к методу с соответствующим именем<a type="note" l:href="#n_12">[12]</a>.</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>class WasRun:</p>
<p>def __init__(self, name):</p>
<p>self.wasRun = None</p>
<p>self.name = name</p>
<p>def run(self):</p>
<p>method = getattr(self, self.name)</p>
<p>method()</p>
<empty-line></empty-line><p>Это еще один шаблон рефакторинга: разработать код, который работает с некоторым конкретным экземпляром, и обобщить его, чтобы он мог работать со всеми остальными экземплярами, для этого константы заменяются переменными. В данном случае роль константы играет не некоторое значение, а фиксированный код (имя конкретного метода). Однако принцип остается тем же. В рамках TDD эта проблема решается очень легко: методика TDD снабжает вас конкретными работающими примерами, исходя из которых можно выполнить обобщение. Это значительно проще, чем выполнять обобщение исходя только из собственных умозаключений.</p>
<p>Теперь наш маленький класс WasRun занят решением двух разных задач: во-первых, он следит за тем, был ли выполнен метод; во-вторых, он динамически вызывает метод. Пришло время разделить полномочия (разделить нашу работу на две разные части). Прежде всего, создадим пустой суперкласс TestCase и сделаем класс WasRun производным классом:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>class TestCase:</p>
<p>pass</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>class WasRun(TestCase):.</p>
<empty-line></empty-line><p>Теперь переместим атрибут name из подкласса в суперкласс:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def __init__(self, name):</p>
<p>self.name = name</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def __init__(self, name):</p>
<p>self.wasRun = None</p>
<p>TestCase.__init__(self, name)</p>
<empty-line></empty-line><p>Наконец, замечаем, что метод run() использует только атрибуты суперкласса, значит, скорее всего, он должен располагаться в суперклассе. (Я всегда стараюсь размещать операции рядом с данными.)</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def __init__(self, name):</p>
<p>self.name= name</p>
<p>def run(self):</p>
<p>method = getattr(self, self.name)</p>
<p>method()</p>
<empty-line></empty-line><p>Естественно, между выполнениями этих модификаций я каждый раз запускаю тесты, чтобы убедиться, что все работает как надо.</p>
<p>Нам надоело смотреть на то, как наша программа каждый раз печатает одно и то же: None и 1. Использовав разработанный механизм, мы можем теперь написать:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>class TestCaseTest(TestCase):</p>
<p>def testRunning(self):</p>
<p>test = WasRun("testMethod")</p>
<p>assert(not test.wasRun)</p>
<p>test.run()</p>
<p>assert(test.wasRun)</p>
<p>TestCaseTest("testRunning"). run()</p>
<empty-line></empty-line><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p>Вызов метода setUp перед обращением к методу</p>
<p>Вызов метода tearDown после обращения к методу</p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<empty-line></empty-line><p>Сердцем этого теста являются операторы print, превращенные в выражения assert, таким образом, вы можете видеть, что выполненная нами процедура – это усложненный шаблон рефакторинга «Выделение метода» (Extract Method).</p>
<p>Я открою вам маленький секрет. Шажки, которыми мы двигались от теста к тесту в данной главе, выглядят смехотворно маленькими. Однако до того, как получить представленный результат, я пытался выполнить разработку более крупными шагами и потратил на это около шести часов (конечно, мне пришлось тратить дополнительное время на изучение тонкостей языка Python). Я два раза начинал с нуля и каждый раз думал, что мой код сработает, однако этого не происходило. Я понял, что попытка пропустить самый начальный, самый примитивный этап разработки, – это грубейшее нарушение принципов TDD.</p>
<p>Конечно же, вы не обязаны постоянно перемещаться такими лилипутскими шажками. После того как вы освоите TDD, вы сможете двигаться вперед более уверенно, реализуя между тестами значительно больший объем функциональности. Однако чтобы в совершенстве освоить TDD, вы должны научиться перемещаться маленькими шажками тогда, когда это необходимо.</p>
<p>Далее мы планируем перейти к решению задачи обращения к методу setUp(). Однако вначале подведем итог.</p>
<p>В данной главе мы</p>
<p>• поняли, как начать работу со смехотворно малюсенького шага;</p>
<p>• реализовали функциональность путем создания фиксированного кода, а затем обобщения этого кода путем замены констант на переменные;</p>
<p>• использовали шаблон «Встраиваемый переключатель» (Pluggable Selector) и дали себе обещание не использовать его вновь в течение как минимум четырех месяцев, так как он существенно усложняет анализ кода;</p>
<p>• начали работу над инфраструктурой тестирования маленькими шажками.</p>
</section><section><title><p>19. Сервируем стол (метод setUp)</p>
</title><p>Начав писать тесты, вы обнаружите, что действуете в рамках некоторой общей последовательности (Билл Уэйк (Bill Wake) придумал сокращение 3A – <emphasis>Arrange, Act, Assert</emphasis>):</p>
<p>• вначале вы создаете некоторые тестовые объекты – <emphasis>Arrange</emphasis>;</p>
<p>• затем заставляете эти объекты действовать – <emphasis>Act</emphasis>;</p>
<p>• потом проверяете результаты их работы – <emphasis>Assert</emphasis>.</p>
<empty-line></empty-line><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strong>Вызов метода setUp перед обращением к методу</strong></p>
<p>Вызов метода tearDown после обращения к методу</p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<empty-line></empty-line><p>Первый этап – <emphasis>Arrange</emphasis> – зачастую совпадает для нескольких разных тестов, в то время как второй и третий этапы для разных тестов различаются. У меня есть два числа: 7 и 9. Если я сложу их, я должен получить 16; если я вычту второе из первого, я ожидаю получить –2; наконец, если я перемножу их, я полагаю, должно получиться 63. Операции и ожидаемые результаты различаются, однако исходные данные одни и те же – два числа: 7 и 9.</p>
<p>Если подобное повторяется раз за разом в разных масштабах (а ведь так оно и есть), мы должны подумать о том, как можно оптимизировать создание тестовых объектов. Возникает конфликт между следующими двумя ограничениями:</p>
<p><emphasis> Производительность</emphasis>. Мы хотим, чтобы тесты срабатывали как можно быстрее. Отсюда следует, что если одни и те же объекты используются в нескольких тестах, желательно, чтобы создание этих объектов выполнялось всего один раз.</p>
<p><emphasis> Изоляция</emphasis>. Успех или неудача одного теста никак не должны влиять на работу других тестов. Если несколько тестов используют одни и те же объекты и если один из тестов меняет внутреннее состояние какого-либо объекта, результаты работы остальных тестов, скорее всего, изменятся.</p>
<p>Взаимозависимость между тестами приводит к одному весьма неприятному эффекту: если один тест перестает работать, остальные десять тестов тоже перестают работать, несмотря на то, что тестируемый ими код выполняется правильно. Характерен также и другой, еще более неприятный эффект, когда порядок выполнения тестов имеет значение: если я запускаю тест A перед тестом Б, оба теста выполняются успешно, если я запускаю тест Б перед тестом А, тест А не выполняется. Или, еще хуже, код, проверяемый тестом Б, действует неправильно, однако из-за того, что тест А запускается перед тестом Б, тест Б выполняется успешно.</p>
<p>Итак, мы хотим избежать взаимозависимости между тестами. Предположим, что мы можем сделать процедуру создания объектов достаточно быстрой. В этом случае мы могли бы создавать объекты для теста каждый раз перед выполнением очередного теста. Этот подход в замаскированном виде уже использовался нами в классе WasRun, в котором требовалось, чтобы перед запуском теста флаг wasRun сбрасывался в состояние «ложь». Напишем тест:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testSetUp(self):</p>
<p>test= WasRun("testMethod")</p>
<p>test.run()</p>
<p>assert(test.wasSetUp)</p>
<empty-line></empty-line><p>Чтобы запустить этот код, необходимо добавить в конец нашего файла строку TestCaseTest(«testSetUp»). run(). Интерпретатор вежливо сообщает нам, что атрибут с именем wasSetUp отсутствует. И немудрено, ведь мы пока еще не определили значение этого атрибута. Вот необходимый для этого код:</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def setUp(self):</p>
<p>self.wasSetUp= 1</p>
<empty-line></empty-line><p>Однако метод setUp() должен быть откуда-то вызван. Обращение к методу setUp() – это работа класса TestCase. Добавим соответствующий код:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def setUp(self):</p>
<p>pass</p>
<p>def run(self):</p>
<p>self.setUp()</p>
<p>method = getattr(self, self.name)</p>
<p>method()</p>
<empty-line></empty-line><p>Чтобы заставить тест работать, мы сделали целых два шага – это слишком много, особенно если учесть, что мы движемся почти вслепую. Проверим, работает ли тест? Да, работает. Однако если вы хотите чему-то научиться, попробуйте придумать, как мы можем заставить тест работать, изменяя лишь по одному методу за один шаг.</p>
<p>Немедленно воспользуемся новым механизмом, чтобы сократить длину наших тестов. Прежде всего упростим класс WasRun, для этого перенесем процедуру установки флага wasRun в метод setUp():</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def setUp(self):</p>
<p>self.wasRun = None</p>
<p>self.wasSetUp = 1</p>
<p>Теперь можно упростить метод testRunning() – освободить его от</p>
<p>обязанности проверять состояние флага перед вызовом тестового метода. Можем ли мы быть настолько уверенными в правильной работе нашего кода? Только при условии, что в наборе тестов присутствует тестовый метод testSetUp(). Это часто встречающийся шаблон – один тест может быть простым, только если в системе имеется другой тест, выполняющийся успешно:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testRunning(self):</p>
<p>test = WasRun("testMethod")</p>
<p>test.run()</p>
<p>assert(test.wasRun)</p>
<empty-line></empty-line><p>Мы также можем упростить сами тесты. В обоих случаях мы создаем экземпляр класса WasRun, а ведь задача создания тестовых объектов возлагается на подготовительный этап – именно об этом мы с вами говорили. Стало быть, мы можем создать объект WasRun в методе setUp(), а затем использовать его в тестовых методах. Каждый тестовый метод выполняется в отдельном экземпляре класса TestCaseTest, поэтому два разных теста не могут быть взаимозависимы. (Мы исходим из того, что объект не будет взаимодействовать с внешним миром некоторым непредусмотренным уродливым способом, например путем изменения значений глобальных переменных.)</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def setUp(self):</p>
<p>self.test = WasRun("testMethod")</p>
<p>def testRunning(self):</p>
<p>self.test.run()</p>
<p>assert(self.test.wasRun)</p>
<p>def testSetUp(self):</p>
<p>self.test.run()</p>
<p>assert(self.test.wasSetUp)</p>
<empty-line></empty-line><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p>Вызов метода tearDown после обращения к методу</p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<empty-line></empty-line><p>Теперь сделаем так, чтобы после выполнения тестового метода обязательно выполнялся метод tearDown().</p>
<p>В данной главе мы</p>
<p>• решили, что на текущий момент тестов важнее простота, чем их производительность;</p>
<p>• написали тест для метода setUp() и реализовали этот метод;</p>
<p>• использовали метод setUp(), чтобы упростить тестируемый объект-контейнер теста;</p>
<p>• использовали метод setUp(), чтобы упростить тесты, проверяющие созданный нами тестовый объект (я же говорил, что временами это напоминает нейрохирургическую операцию на собственном мозге).</p>
</section><section><title><p>20. Убираем со стола (метод tearDown)</p>
</title><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strong>Вызов метода tearDown после обращения к методу</strong></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<empty-line></empty-line><p>Иногда для выполнения теста требуется выделить некоторые внешние ресурсы. Очевидно, что связанные с этим операции должны выполняться в теле метода setUp(). Если мы хотим, чтобы тесты были независимыми друг от друга, мы должны позаботиться об освобождении этих ресурсов. Для выполнения связанных с этим операций предлагаю использовать специальный метод tearDown(), который будет автоматически выполняться после завершения теста.</p>
<p>Как можно протестировать выполнение метода tearDown()? Проще всего – использовать еще один флаг. Однако все эти флаги начинают сбивать меня с толку. Если мы будем использовать флаги, мы упустим один очень важный аспект: метод setUp() должен быть выполнен непосредственно перед обращением к тестовому методу, а метод tearDown() – непосредственно после обращения к тестовому методу. Чтобы убедиться в этом, я намерен изменить стратегию тестирования. Предлагаю создать миниатюрный журнал, в котором будет отмечаться последовательность выполнения методов. Каждый метод будет добавлять в конец журнала соответствующую запись. Таким образом, просмотрев журнал, мы сможем установить порядок выполнения методов.</p>
<empty-line></empty-line><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p>Вызов метода tearDown после обращения к методу</p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<p><strong>Строка журнала в классе WasRun</strong></p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def setUp(self):</p>
<p>self.wasRun = None</p>
<p>self.wasSetUp = 1</p>
<p>self.log = "setUp "</p>
<empty-line></empty-line><p>Теперь можно изменить метод testSetUp(), чтобы вместо флага он проверял содержимое журнала:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testSetUp(self):</p>
<p>self.test.run()</p>
<p>assert("setUp " == self.test.log)</p>
<empty-line></empty-line><p>После этого мы можем удалить флаг wasSetUp. Мы также можем добавить в журнал запись о выполнении метода:</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def testMethod(self):</p>
<p>self.wasRun = 1</p>
<p>self.log = self.log + "testMethod "</p>
<empty-line></empty-line><p>В результате нарушается работа теста testSetUp(), так как в момент выполнения этого метода журнал содержит строку «setUp testMethod». Изменяем ожидаемое значение:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testSetUp(self):</p>
<p>self.test.run()</p>
<p>assert("setUp testMethod " == self.test.log)</p>
<empty-line></empty-line><p>Теперь этот тест выполняет работу обоих тестов, поэтому можно удалить testRunning и переименовать testSetUp:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def setUp(self):</p>
<p>self.test = WasRun("testMethod")</p>
<p>def testTemplateMethod(self):</p>
<p>self.test.run()</p>
<p>assert("setUp testMethod " == self.test.log)</p>
<empty-line></empty-line><p>Мы используем экземпляр класса WasRun всего в одном месте, поэтому необходимо отменить добавленный ранее хитрый трюк, связанный с setUp():</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testTemplateMethod(self):</p>
<p>test = WasRun("testMethod")</p>
<p>test.run()</p>
<p>assert("setUp testMethod " == test.log)</p>
<empty-line></empty-line><p>Нет ничего страшного в том, что мы сделали рефакторинг, исходя из нескольких ранних соображений, а чуть позже отменили его, – подобная ситуация складывается достаточно часто. Некоторые предпочитают подождать, пока у них накопится достаточное количество оснований для рефакторинга, иными словами, они оттягивают выполнение рефакторинга, чтобы быть полностью уверенными в его необходимости. Они поступают так потому, что не любят аннулировать результаты проделанной работы. Однако я предпочитаю не отвлекаться на рассуждения о том, не придется ли в будущем отменять то или иное исправление, необходимое мне в настоящем. Вместо этого я предпочитаю сосредоточиться на дизайне. По этой причине я рефлекторно делаю рефакторинг тогда, когда считаю нужным, ни капли не опасаясь, что сразу после этого мне, возможно, придется отменить его.</p>
<empty-line></empty-line><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p>Вызов метода tearDown после обращения к методу</p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<empty-line></empty-line><p>Теперь мы готовы к реализации метода tearDown(). Ага! Опять я вас поймал! Теперь мы готовы к тестированию метода tearDown():</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testTemplateMethod(self):</p>
<p>test = WasRun("testMethod")</p>
<p>test.run()</p>
<p>assert("setUp testMethod tearDown " == test.log)</p>
<empty-line></empty-line><p>Он потерпел неудачу. Чтобы заставить его работать, выполняем несложные добавления:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def run(self, result):</p>
<p>result.testStarted()</p>
<p>self.setUp()</p>
<p>exec "self." + self.name + "()"</p>
<p>self.tearDown()</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def setUp(self):</p>
<p>self.log = "setUp "</p>
<p>def testMethod(self):</p>
<p>self.log = self.log + "testMethod "</p>
<p>def tearDown(self):</p>
<p>self.log = self.log + "tearDown "</p>
<empty-line></empty-line><p>Неожиданно мы получаем ошибку не в классе WasRun, а в классе TestCaseTest. У нас нет «пустой» реализации метода teardown() в классе TestCase:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def tearDown(self):</p>
<p>pass</p>
<empty-line></empty-line><p>Мы начинаем получать пользу от разрабатываемой инфраструктуры. Замечательно! Никакого рефакторинга не требуется. Очевидная реализация, созданная нами после обнаружения ошибки, сработала, и код получился чистым.</p>
<empty-line></empty-line><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p>Отчет о результатах</p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<empty-line></empty-line><p>Далее мы перейдем к формированию отчета о результатах выполнения тестов. Вместо использования встроенного в Python механизма обработки ошибок мы планируем реализовать и использовать собственный механизм наблюдения за работой тестов.</p>
<p>В данной главе мы</p>
<p>• перешли от использования флагов к использованию журнала;</p>
<p>• создали тесты для метода tearDown() и реализовали этот метод с использованием нового механизма журналирования;</p>
<p>• обнаружили проблему и вместо того чтобы возвращаться назад, смело исправили ошибку.</p>
</section><section><title><p>21. Учет и контроль</p>
</title><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p><strong>Отчет о результатах</strong></p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<empty-line></empty-line><p>Метод tearDown() должен выполняться, даже когда в процессе выполнения теста возникло исключение. Однако чтобы добиться этого, мы должны перехватывать исключения. (Честно говоря, я уже пытался реализовать это, но у меня не получилось, и я вернул все на свои места.) Если при реализации перехвата исключений мы допустим ошибку, мы можем не заметить этого, так как стандартный механизм доклада об исключениях не будет функционировать.</p>
<p>Работая в стиле TDD, важно понимать, что особое значение имеет порядок, в котором вы реализуете тесты. Выбирая тест, над которым я буду работать дальше, я стараюсь выбрать тот, который, во-первых, послужит для меня источником новых знаний, а во-вторых, достаточно прост, чтобы я был уверен в том, что могу заставить его работать. Если я добиваюсь успешного выполнения этого теста, но захожу в тупик при реализации следующего, я вполне могу выполнить откат назад на два шага. Было бы неплохо, если бы среда разработки оказывала мне в этом помощь. Например, было бы неплохо, если бы в момент срабатывания всех тестов автоматически создавалась резервная копия всего исходного кода, с которым я работаю.</p>
<p>После выполнения всех тестов желательно получить информацию о том, как они выполнились, например: «запущено 5, неудачных 2: TestCaseTest.testFooBar – ZeroDivideException, MoneyTest.testNegation – AssertionError». Если тесты перестают выполняться или результаты перестают отображаться на экране мы, по крайней мере, сможем обнаружить ошибку. Однако наша инфраструктура не обязана знать обо всех разработанных тестах.</p>
<p>Пусть метод TestCase.run() возвращает объект класса TestResult с результатами выполнения теста (вначале тест будет только один, однако позже мы усовершенствуем этот объект).</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testResult(self):</p>
<p>test = WasRun("testMethod")</p>
<p>result = test.run()</p>
<p>assert("1 run, 0 failed" == result.summary())</p>
<empty-line></empty-line><p>Начнем с поддельной реализации:</p>
<empty-line></empty-line><p><strong>TestResult</strong></p>
<p>class TestResult:</p>
<p>def summary(self):</p>
<p>return "1 run, 0 failed"</p>
<empty-line></empty-line><p>Теперь сделаем так, чтобы в результате выполнения метода TestCase.run() возвращался объект класса TestResult:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def run(self):</p>
<p>self.setUp()</p>
<p>method = getattr(self, self.name)</p>
<p>method()</p>
<p>self.tearDown()</p>
<p>return TestResult()</p>
<empty-line></empty-line><p>Теперь, когда все тесты выполнились успешно, можно сделать реализацию метода summary() реальной. Как и раньше, будем двигаться маленькими шажками. Для начала заменим количество выполненных тестов константой:</p>
<empty-line></empty-line><p><strong>TestResult</strong></p>
<p>def __init__(self):</p>
<p>self.runCount = 1</p>
<p>def summary(self):</p>
<p>return "%d run, 0 failed" % self.runCount</p>
<empty-line></empty-line><p>(Оператор % в языке Python является аналогом функции sprintf в языке C.) Однако runCount не может быть константой, это должна быть переменная, значение которой вычисляется исходя из количества выполненных тестов. Мы можем инициализировать эту переменную значением 0, а затем увеличивать ее на единицу при выполнении очередного теста.</p>
<p><strong>TestResult</strong></p>
<p>def __init__(self):</p>
<p>self.runCount = 0</p>
<p>def testStarted(self):</p>
<p>self.runCount = self.runCount + 1</p>
<p>def summary(self):</p>
<p>return "%d run, 0 failed" % self.runCount</p>
<empty-line></empty-line><p>Теперь мы должны позаботиться о вызове этого нового метода:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def run(self):</p>
<p>result = TestResult()</p>
<p>result.testStarted()</p>
<p>self.setUp()</p>
<p>method = getattr(self, self.name)</p>
<p>method()</p>
<p>self.tearDown()</p>
<p>return result</p>
<empty-line></empty-line><p>Мы точно так же могли бы преобразовать константу «0», обозначающую количество тестов, потерпевших неудачу, в переменную, как сделали это с переменной runCount, однако существующие тесты этого не требуют. Поэтому напишем новый тест:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testFailedResult(self):</p>
<p>test = WasRun("testBrokenMethod")</p>
<p>result = test.run()</p>
<p>assert("1 run, 1 failed", result.summary)</p>
<empty-line></empty-line><p>Здесь:</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def testBrokenMethod(self):</p>
<p>raise Exception</p>
<p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p><strikethrough>Отчет о результатах</strikethrough></p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<p>Отчет о неудачных тестах</p>
<empty-line></empty-line><p>Мы немедленно замечаем, что исключение, генерируемое в методе WasRun.testBrokenMethod(), не перехватывается. Нам хотелось бы перехватить это исключение и в отчете о результатах тестирования отметить, что тест потерпел неудачу. Добавим соответствующий пункт в список задач.</p>
<empty-line></empty-line><p>Подведем итог. Мы</p>
<p>• разработали поддельную реализацию и начали поэтапно делать ее реальной путем замены констант переменными;</p>
<p>• написали еще один тест;</p>
<p>• когда тест потерпел неудачу, написали еще один тест меньшего масштаба, чтобы обеспечить выполнение неудачного теста.</p>
</section><section><title><p>22. Обработка неудачного теста</p>
</title><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p><strikethrough>Отчет о результатах</strikethrough></p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<p><strong>Отчет о неудачных тестах</strong></p>
<empty-line></empty-line><p>Напишем еще один тест меньшего масштаба, демонстрирующий, что при обнаружении неудачного теста наша инфраструктура распечатывает на экране корректный результат:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testFailedResultFormatting(self):</p>
<p>result = TestResult()</p>
<p>result.testStarted()</p>
<p>result.testFailed()</p>
<p>assert("1 run, 1 failed" == result.summary())</p>
<empty-line></empty-line><p>В данном тесте фигурируют два новых метода: testStarted() и testFailed(). Первый из них должен вызываться в начале работы теста, а второй – в случае, если тест не срабатывает. Тестовый метод testFailedResultFormatting() предполагает, что, если эти два метода вызываются в указанном порядке, отчет о результате тестирования должен выглядеть корректно. Если мы заставим этот тестовый метод работать, наша проблема сведется к тому, чтобы обеспечить вызов метода testStarted() в начале выполнения теста и вызов testFailed() в случае, если тест потерпел неудачу.</p>
<p>Чтобы реализовать функциональность методов testStarted() и testFailed(), воспользуемся двумя счетчиками: счетчиком запущенных тестов и счетчиком неудачных тестов:</p>
<empty-line></empty-line><p><strong>TestResult</strong></p>
<p>def __init__(self):</p>
<p>self.runCount = 0</p>
<p>self.errorCount = 0</p>
<p>def testFailed(self):</p>
<p>self.errorCount = self.errorCount + 1</p>
<empty-line></empty-line><p>Если счетчик будет работать корректно (мы должны были бы это протестировать, однако кофе, похоже, ударил мне в голову), отчет будет напечатан корректно:</p>
<empty-line></empty-line><p><strong>TestResult</strong></p>
<p>def summary(self):</p>
<p>return "%d run, %d failed" % (self.runCount, self.failureCount)</p>
<empty-line></empty-line><p>Теперь можно предположить, что, если обращение к методу testFailed() будет выполнено корректно, мы получим на экране желаемый результат. Но где следует вызвать этот метод? В обработчике исключения, перехваченного в процессе выполнения тестового метода:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def run(self):</p>
<p>result = TestResult()</p>
<p>result.testStarted()</p>
<p>self.setUp()</p>
<p>try:</p>
<p>method = getattr(self, self.name)</p>
<p>method()</p>
<p>except:</p>
<p>result.testFailed()</p>
<p>self.tearDown()</p>
<p>return result</p>
<empty-line></empty-line><p>В этом коде присутствует одно тонкое место: если исключение возникает во время выполнения метода setUp(), оно не будет перехвачено. Это означает, что в определенной степени тесты зависят друг от друга. Однако прежде, чем менять код, мы должны написать еще один тест. (Я научил мою старшую дочку Бетани программировать в стиле TDD, когда ей было 12 лет. Это самый первый стиль программирования, с которым она познакомилась. Она не умеет программировать иначе и абсолютно уверена, что добавлять в программу новый функциональный код можно только в случае, если существует тест, который терпит неудачу. Однако более опытные программисты, как правило, вынуждены напоминать себе о том, что сначала необходимо писать тесты, а потом – код, заставляющий их выполняться.) Я оставляю этот следующий тест и его реализацию вам в качестве самостоятельного упражнения (мои пальцы опять устали):</p>
<empty-line></empty-line><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p>Выполнение нескольких тестов</p>
<p><strikethrough>Отчет о результатах</strikethrough></p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<p><strikethrough>Отчет о неудачных тестах</strikethrough></p>
<p>Перехват и отчет об ошибках setUp</p>
<empty-line></empty-line><p>Далее мы сделаем так, чтобы наша инфраструктура смогла запустить несколько тестов подряд.</p>
<empty-line></empty-line><p>В данной главе мы</p>
<p>• обеспечили успешное выполнение нашего теста меньшего масштаба;</p>
<p>• заново приступили к реализации более крупного теста;</p>
<p>• обеспечили успешное выполнение крупного теста, воспользовавшись механизмом, реализованным для маленького теста;</p>
<p>• обратили внимание на потенциальную проблему, но вместо того, чтобы немедленно браться за ее решение, добавили соответствующую пометку в список задач.</p>
</section><section><title><p>23. Оформляем тесты в набор</p>
</title><p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p><strong>Выполнение нескольких тестов</strong></p>
<p><strikethrough>Отчет о результатах</strikethrough></p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<p><strikethrough>Отчет о неудачных тестах</strikethrough></p>
<p>Перехват и отчет об ошибках setUp</p>
<empty-line></empty-line><p>Мы не можем оставить работу над xUnit, не реализовав класс TestSuite, представляющий собой набор тестов. Конец нашего файла, где мы запускаем все наши тесты, выглядит весьма неопрятно:</p>
<empty-line></empty-line><p>print(TestCaseTest(«testTemplateMethod»). run(). summary())</p>
<p>print(TestCaseTest("testResult"). run(). summary())</p>
<p>print(TestCaseTest("testFailedResultFormatting"). run(). summary())</p>
<p>print(TestCaseTest("testFailedResult"). run(). summary())</p>
<empty-line></empty-line><p>Дублирование – это всегда плохо, за исключением случаев, когда вы используете его в качестве мотивации для поиска недостающего элемента дизайна. В данном случае нам хотелось бы сгруппировать тесты и запустить их при помощи одной команды. (Мы приложили массу усилий для изоляции тестов, однако все эти усилия не окупят себя, если мы будем запускать тесты по одному.) Еще одна хорошая причина, по которой было бы неплохо реализовать TestSuite, заключается в том, что этот класс хорошо демонстрирует использование шаблона «Компоновщик» (Composite), – мы хотим, чтобы набор тестов вел себя в точности так же, как единичный тест.</p>
<p>Мы хотим обладать возможностью создать набор тестов (объект TestSuite), добавить в него несколько тестов и получить общий результат выполнения всех этих тестов:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testSuite(self):</p>
<p>suite = TestSuite()</p>
<p>suite.add(WasRun("testMethod"))</p>
<p>suite.add(WasRun("testBrokenMethod"))</p>
<p>result = suite.run()</p>
<p>assert("2 run, 1 failed" == result.summary())</p>
<empty-line></empty-line><p>Для успешного выполнения теста создадим в объекте TestSuite список тестов и реализуем метод add(), который просто добавляет тест, переданный в качестве аргумента, в список:</p>
<empty-line></empty-line><p><strong>TestSuite</strong></p>
<p>class TestSuite:</p>
<p>def __init__(self):</p>
<p>self.tests = []</p>
<p>def add(self, test):</p>
<p>self.tests.append(test)</p>
<empty-line></empty-line><p>(В языке Python оператор [] создает пустую коллекцию.)</p>
<empty-line></empty-line><p>Однако с реализацией метода run() возникают проблемы. Мы хотим, чтобы результаты срабатывания всех тестов накапливались в едином объекте класса TestResult. Таким образом, мы можем написать следующий код:</p>
<empty-line></empty-line><p><strong>TestSuite</strong></p>
<p>def run(self):</p>
<p>result = TestResult()</p>
<p>for test in tests:</p>
<p>test.run(result)</p>
<p>return result</p>
<empty-line></empty-line><p>Здесь оператор цикла «for test in tests» выполняет итерации по всем элементам последовательности tests, присваивает их по одному переменной цикла test и запускает соответствующий тест. Однако шаблон «Компоновщик» (Composite) подразумевает, что набор объектов должен обладать точно таким же интерфейсом, каким обладает отдельный объект. Если мы передаем параметр методу TestCase.run(), значит, мы должны передавать точно такой же параметр методу TestSuite.run(). Можно использовать одну из трех альтернатив.</p>
<p>• Воспользоваться встроенным в язык Python механизмом параметров со значениями по умолчанию. К сожалению, значение параметра по умолчанию вычисляется во время компиляции, но не во время выполнения, а мы не хотим повторно использовать один и тот же объект TestResult.</p>
<p>• Разделить метод на две части – одна создает объект TestResult, а вторая выполняет тест, используя переданный ей объект TestResult. Я не могу придумать хороших имен для двух частей метода, а это означает, что данная стратегия не является самой лучшей.</p>
<p>• Создавать объекты TestResult в вызывающем коде.</p>
<empty-line></empty-line><p>Мы будем создавать объекты TestResult в вызывающем коде. Этот шаблон называется «Накапливающий параметр» (Collecting Parameter).</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testSuite(self):</p>
<p>suite = TestSuite()</p>
<p>suite.add(WasRun("testMethod"))</p>
<p>suite.add(WasRun("testBrokenMethod"))</p>
<p>result = TestResult()</p>
<p>suite.run(result)</p>
<p>assert("2 run, 1 failed" == result.summary())</p>
<empty-line></empty-line><p>При использовании данного подхода метод run() не возвращает никакого явного значения:</p>
<empty-line></empty-line><p><strong>TestSuite</strong></p>
<p>def run(self, result):</p>
<p>for test in tests:</p>
<p>test.run(result)</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>def run(self, result):</p>
<p>result.testStarted()</p>
<p>self.setUp()</p>
<p>try:</p>
<p>method = getattr(self, self.name)</p>
<p>method()</p>
<p>except:</p>
<p>result.testFailed()</p>
<p>self.tearDown()</p>
<empty-line></empty-line><p>Теперь мы можем облагородить обращение к тестовым методам в конце файла:</p>
<empty-line></empty-line><p><strong>suite = TestSuite()</strong></p>
<p>suite.add(TestCaseTest("testTemplateMethod"))</p>
<p>suite.add(TestCaseTest("testResult"))</p>
<p>suite.add(TestCaseTest("testFailedResultFormatting"))</p>
<p>suite.add(TestCaseTest("testFailedResult"))</p>
<p>suite.add(TestCaseTest("testSuite"))</p>
<p>result = TestResult()</p>
<p>suite.run(result)</p>
<p>print(result.summary())</p>
<p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p><strong>Выполнение нескольких тестов</strong></p>
<p><strikethrough>Отчет о результатах</strikethrough></p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<p><strikethrough>Отчет о неудачных тестах</strikethrough></p>
<p>Перехват и отчет об ошибках setUp</p>
<p>Создать объект TestSuite автоматически на основе класса TestCase</p>
<empty-line></empty-line><p>Здесь слишком много повторяющегося кода, от которого можно избавиться, если обеспечить способ конструирования набора тестов автоматически, исходя из предоставленного класса TestCase.</p>
<p>Однако вначале восстановим корректное выполнение четырех не неудачных тестов (эти тесты используют старый интерфейс функции run() без аргументов):</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def testTemplateMethod(self):</p>
<p>test = WasRun("testMethod")</p>
<p>result = TestResult()</p>
<p>test.run(result)</p>
<p>assert("setUp testMethod tearDown " == test.log)</p>
<p>def testResult(self):</p>
<p>test = WasRun("testMethod")</p>
<p>result = TestResult()</p>
<p>test.run(result)</p>
<p>assert("1 run, 0 failed" == result.summary())</p>
<p>def testFailedResult(self):</p>
<p>test = WasRun("testBrokenMethod")</p>
<p>result = TestResult()</p>
<p>test.run(result)</p>
<p>assert("1 run, 1 failed" == result.summary())</p>
<p>def testFailedResultFormatting(self):</p>
<p>result = TestResult()</p>
<p>result.testStarted()</p>
<p>result.testFailed()</p>
<p>assert("1 run, 1 failed" == result.summary())</p>
<empty-line></empty-line><p>Обратите внимание, что каждый из тестов создает экземпляр класса TestResult – эту операцию можно выполнить однократно внутри метода setUp(). Благодаря реализации этой идеи мы упростим тесты, однако сделаем их несколько более сложными в прочтении:</p>
<empty-line></empty-line><p><strong>TestCaseTest</strong></p>
<p>def setUp(self):</p>
<p>self.result = TestResult()</p>
<p>def testTemplateMethod(self):</p>
<p>test = WasRun("testMethod")</p>
<p>test.run(self.result)</p>
<p>assert("setUp testMethod tearDown " == test.log)</p>
<p>def testResult(self):</p>
<p>test = WasRun("testMethod")</p>
<p>test.run(self.result)</p>
<p>assert("1 run, 0 failed" == self.result.summary())</p>
<p>def testFailedResult(self):</p>
<p>test = WasRun("testBrokenMethod")</p>
<p>test.run(self.result)</p>
<p>assert("1 run, 1 failed" == self.result.summary())</p>
<p>def testFailedResultFormatting(self):</p>
<p>self.result.testStarted()</p>
<p>self.result.testFailed()</p>
<p>assert("1 run, 1 failed" == self.result.summary())</p>
<p>def testSuite(self):</p>
<p>suite = TestSuite()</p>
<p>suite.add(WasRun("testMethod"))</p>
<p>suite.add(WasRun("testBrokenMethod"))</p>
<p>suite.run(self.result)</p>
<p>assert("2 run, 1 failed" == self.result.summary())</p>
<p><strikethrough>Вызов тестового метода</strikethrough></p>
<p><strikethrough>Вызов метода setUp перед обращением к методу</strikethrough></p>
<p><strikethrough>Вызов метода tearDown после обращения к методу</strikethrough></p>
<p>Метод tearDown должен вызываться даже в случае неудачи теста</p>
<p><strikethrough>Выполнение нескольких тестов</strikethrough></p>
<p><strikethrough>Отчет о результатах</strikethrough></p>
<p><strikethrough>Строка журнала в классе WasRun</strikethrough></p>
<p><strikethrough>Отчет о неудачных тестах</strikethrough></p>
<p>Перехват и отчет об ошибках setUp</p>
<p>Создать объект TestSuite автоматически на основе класса TestCase</p>
<empty-line></empty-line><p>Все эти бесчисленные ссылки self выглядят ужасно, однако без этого в языке Python никак не обойтись. Если бы этот язык изначально был объектно-ориентированным, наверное, в этих ссылках не было бы надобности, а ссылки на глобальные переменные требовали бы квалификации. Однако язык Python изначально является интерпретируемым языком с добавленной в него поддержкой объектов (надо отметить, что поддержка объектов в этом языке реализована великолепно). В результате по умолчанию переменные считаются глобальными, а явные ссылки на self – необходимыми.</p>
<p>Я оставляю реализацию оставшихся пунктов вам в качестве упражнения. Надеюсь, обретенные навыки работы в стиле TDD помогут вам.</p>
<empty-line></empty-line><p>Чтобы подвести итог, напомню, что в данной главе мы</p>
<p>• написали тест для класса TestSuite;</p>
<p>• написали часть реализации, однако не добились успешного выполнения тестов – это нарушение правил (я уверен, что существует простая поддельная реализация, которая заставила бы тесты работать, благодаря чему мы могли бы выполнять рефакторинг, имея перед глазами зеленую полоску, однако сейчас я не хочу думать на эту тему);</p>
<p>• изменили интерфейс метода run(), благодаря чему набор тестов можно использовать точно так же, как и отдельный тест, – в результате тесты наконец выполнились успешно;</p>
<p>• выполнили рефакторинг имеющихся тестов – переместили общий код создания объекта результатов в метод setUp().</p>
</section><section><title><p>24. Ретроспектива xUnit</p>
</title><p>Если перед вами встала задача разработки своей собственной инфраструктуры тестирования, методика, описанная в части II данной книги, послужит вам руководством. Не следует слишком много внимания уделять деталям реализации – значительно больший интерес представляют тесты. Если вы напишете код, обеспечивающий успешное выполнение представленных здесь тестов, в вашем распоряжении окажется минимальная инфраструктура тестирования, пригодная для запуска тестов в условиях изоляции и обеспечивающая композицию тестов. Вы сможете приступить к разработке программного кода в стиле TDD.</p>
<p>На момент написания данной книги инфраструктура тестирования xUnit адаптирована для более чем 30 языков программирования. Язык, на котором вы программируете, скорее всего, уже обладает своей собственной реализацией xUnit. Однако, даже если кто-то уже сделал это до вас, возможно, будет лучше, если вы попробуете разработать свою собственную новую версию xUnit самостоятельно. На то есть две важные причины:</p>
<p><emphasis> Контроль над реализацией</emphasis>. Основополагающая характеристика xUnit – это простота. Мартин Фаулер (Martin Fowler) сказал: «Никогда в истории программной индустрии еще не было случая, чтобы столь многие разработчики были обязаны столь немногому количеству строк программного кода». На мой взгляд, некоторые реализации xUnit к настоящему времени стали слишком большими и сложными. Если вы разработаете собственную версию xUnit, то получите инструмент, который вы будете контролировать в полном объеме.</p>
<p><emphasis> Обучение</emphasis>. Когда я сталкиваюсь с необходимостью изучить новый язык программирования, я приступаю к реализации xUnit. Когда я добиваюсь срабатывания первых восьми-десяти тестов, я овладеваю навыками работы с основными конструкциями и возможностями нового для меня языка.</p>
<p>Когда вы начнете работать с xUnit, вы обнаружите, что существует значительная разница между выражениями assert, потерпевшими неудачу, и ошибками других типов, возникающими в процессе выполнения тестов. В отличие от остальных ошибок выражения assert требуют больше времени для отладки. Из-за этого большинство реализаций xUnit отличает сбои операторов assert от всех остальных ошибок: в рамках GUI зачастую информация об ошибках отображается в начале списка.</p>
<p>Инфраструктура JUnit объявляет простой интерфейс Test, который реализуется классами TestCase и TestSuite. Если вы хотите создать тестовый класс, который мог бы взаимодействовать со стандартными средствами тестирования, встроенными в JUnit, вы можете реализовать функции интерфейса Test самостоятельно:</p>
<empty-line></empty-line><p>public interface Test {</p>
<p>public abstract int countTestCases();</p>
<p>public abstract void run(TestResult result);</p>
<p>}</p>
<empty-line></empty-line><p>В языках с оптимистическим (динамическим) приведением типов можно даже не объявлять о поддержке этого интерфейса – достаточно реализовать входящие в его состав операции. При использовании языка сценариев Сценарий может ограничивать реализацию countTestCases() возвратом единицы и выполнять проверку TestResult на отказ, а вы можете выполнять ваши сценарии с обычными объектами TestCase.</p>
</section></section><section><title><p>Часть III. Шаблоны разработки через тестирование</p>
</title><section><p>Далее следуют «величайшие хиты» – шаблоны разработки через тестирование. Некоторые из них являются эффективными приемами работы в стиле TDD, другие – шаблонами проектирования и, наконец, третьи – шаблонами рефакторинга. Третья часть книги является коллекцией справочного материала, необходимого как для освоения представленных в книге примеров, так и для самостоятельного совершенствования навыков работы в стиле TDD. Здесь представлены сведения, которые помогут лучше понять смысл примеров, рассмотренных в первых двух частях книги, а также подогреют ваш интерес и стимулируют обратиться к дополнительной информации, которую следует искать в других источниках.</p>
</section><section><title><p>25. Шаблоны разработки через тестирование</p>
</title><p>Прежде чем приступить к обсуждению эффективных методов тестирования, давайте попробуем ответить на несколько стратегических вопросов:</p>
<p>• Что такое тестирование?</p>
<p>• Когда мы выполняем тестирование?</p>
<p>• Какая логика нуждается в тестировании?</p>
<p>• Какие данные нуждаются в тестировании?</p>
<subtitle><emphasis><strong>Тест</strong></emphasis></subtitle><p>Каким образом следует тестировать программное обеспечение? При помощи автоматических тестов.</p>
<p><emphasis>Тестировать</emphasis> означает <emphasis>проверять</emphasis>. Ни один программист не считает работу над некоторым фрагментом кода завершенной, не проверив его работоспособность (исключение составляют либо слишком самоуверенные, либо слишком небрежные программисты, но я надеюсь, что среди читателей данной книги таких нет). Однако, если вы тестируете свой код, это не означает, что у вас <emphasis>есть</emphasis> тесты. <emphasis>Тест</emphasis> – это процедура, которая позволяет либо подтвердить, либо опровергнуть работоспособность кода. Когда программист проверяет работоспособность разработанного им кода, он выполняет тестирование вручную: нажимает кнопки на клавиатуре и смотрит на результат работы программы, отображаемый на экране. В данном контексте тестирование состоит из двух этапов: запуск кода и проверка результатов его работы. <emphasis>Автоматический тест</emphasis> выполняется автоматически: вместо программиста запуском кода и проверкой результатов занимается компьютер, который отображает на экране результат выполнения теста: <emphasis>код работоспособен</emphasis> или <emphasis>код неработоспособен</emphasis>. В чем состоит принципиальное отличие автоматического теста от тестирования кода вручную?</p>
<p>На рис. 25.1 представлена диаграмма взаимовлияния между стрессом и тестированием (она напоминает диаграммы Герри Вейнберга (Gerry Weinberg) в его книге <emphasis>Quality Software Management</emphasis>). Стрелка между узлами диаграммы означает, что увеличение первого показателя влечет за собой увеличение второго показателя. Стрелка с кружком означает, что увеличение первого показателя влечет за собой уменьшение второго показателя.</p>
<empty-line></empty-line><image l:href="#i_010.png"></image><p><strong>Рис. 25.1.</strong> Зловещая спираль «нет времени для тестирования»</p>
<empty-line></empty-line><p>Что происходит, когда уровень стресса возрастает?</p>
<p>Чем больший стресс вы ощущаете, тем меньше вы тестируете разрабатываемый код. Чем меньше вы тестируете разрабатываемый код, тем больше ошибок вы допускаете. Чем больше ошибок вы допускаете, тем выше уровень стресса, который вы ощущаете. Получается замкнутый круг с положительной обратной связью: рост стресса приводит к росту стресса.</p>
<p>Что надо сделать, чтобы разорвать этот зловещий цикл? Необходимо либо добавить новый элемент, либо заменить один из элементов, либо изменить стрелки. Попробуем заменить «тестирование» на «автоматическое тестирование».</p>
<p>«Я только что внес в код изменение. Нарушил ли я тем самым его работоспособность?» Рисунок 25.1 показывает динамику в действии. При использовании автоматического тестирования, когда я начинаю ощущать стресс, я запускаю тесты. Тесты превращают страх в скуку. «Нет, я ничего не сломал. Тесты по-прежнему показывают зеленую полосу.» Чем больший стресс я ощущаю, тем чаще я запускаю тесты. Выполнив тесты, я успокаиваюсь. Когда я спокоен, я допускаю меньше ошибок, а это ведет к снижению уровня стресса.</p>
<p>«Да поймите же вы, что у нас нет времени на тестирование!» – теперь эта жалоба перестает быть актуальной, так как выполнение автоматического тестирования почти не требует времени. Компьютер выполняет тестирование значительно быстрее, чем человек. Если вы не выполняете тестирования, вы опасаетесь за корректность кода. Используя автоматическое тестирование, вы можете выбирать удобный для вас уровень страха.</p>
<p>Должны ли вы запустить тест сразу же после его написания, даже если вы полностью уверены, что он не сработает? Конечно, вы можете этого не делать. Но… Приведу поучительный пример. Некоторое время назад я работал с двумя очень умными молодыми программистами над реализацией транзакций, выполняемых внутри оперативной памяти (это чрезвычайно мощная технология, поддержка которой должна быть добавлена во все современные языки программирования). Перед нами встал вопрос: как реализовать откат транзакции, если начали выполнение транзакции, затем изменили значение нескольких переменных, а затем нарушили ее выполнение (транзакция была уничтожена сборщиком мусора)? Достаточно просто, чтобы проверить способности малоопытных разработчиков. Отойдите в сторону и смотрите, как работает мастер. Вот тест. Теперь подумаем над тем, как заставить его работать. Мы приступили к написанию кода.</p>
<p>Прошло два часа. Два часа, заполненных мучениями и разочарованиями (в большинстве случаев при возникновении ошибки среда разработки давала фатальный сбой и ее приходилось перезапускать). Испробовав множество методов решения проблемы, мы отменили все изменения в коде, восстановили изначальное состояние системы и вернулись к тому, с чего начали: заново написали тот самый тест. На удачу запустили его. Он успешно выполнился. Это было потрясение… Оказалось, что механизм поддержки транзакций на самом деле не менял значений переменных, пока транзакция не считалась полностью выполненной. Надеюсь, теперь вы сами решите для себя, нужно ли вам запускать тесты сразу же после их написания.</p>
<subtitle><emphasis><strong>Изолированный тест (Isolated Test)</strong></emphasis></subtitle><p>Каким образом выполнение одного теста может повлиять на выполнение другого? Никаким.</p>
<p>Я впервые столкнулся с автоматическим тестированием, когда был еще молодым программистом. В то время в компании с другими программистами (привет, Джоси, привет, Джон!) я занимался разработкой отладчика с графическим интерфейсом. Для контроля корректности его работы использовалась длинная серия автоматических тестов. Это был набор автоматически выполняемых тестов, основанных на взаимодействии с графическим интерфейсом (специальная программа перехватывала нажатия клавиш и события мыши, а затем автоматически воспроизводила их, имитируя работу пользователя с программой). Для выполнения всей серии тестов требовалось длительное время, поэтому обычно тесты запускались вечером, перед уходом с работы, и выполнялись в течение почти всей ночи. Каждое утро, когда я приходил на работу, я видел на своем стуле аккуратно сложенную пачку листов, на которых были распечатаны результаты ночного тестирования. (Привет, Эл!) В удачные дни это мог быть всего один лист, на котором было написано, что ничего не поломалось. В плохие дни на стуле могла лежать огромная кипа бумаги – по одному листу на каждый «сломанный» тест. Постепенно я стал пугаться вида листов бумаги на моем стуле, – если я приходил на работу и видел на своем стуле кипу бумажных листов, меня немедленно бросало в дрожь.</p>
<p>Работая в таком стиле, я пришел к двум важным выводам. Во-первых, тесты должны выполняться достаточно быстро, чтобы я мог запускать их самостоятельно и делать это достаточно часто. В этом случае я мог бы обнаруживать ошибки раньше, чем кто-либо другой. Во-вторых, спустя некоторое время я заметил, что огромная кипа бумаги далеко не всегда означает огромную кучу проблем. Чаще оказывалось, что в самом начале выполнения тестов один из них завершался неудачей, оставляя систему в непредсказуемом состоянии, из-за чего следующий тест тоже завершался неудачей, а за ним и многие другие – по цепочке.</p>
<p>В то время мы пытались решить эту проблему, автоматически перезапуская систему перед выполнением каждого теста, однако для этого требовалось слишком большое время. Именно тогда у меня возникла еще одна хорошая мысль: тестирование можно выполнять на более низком уровне: вовсе не обязательно, чтобы каждый из тестов выполнялся в отношении всего приложения в целом. Чтобы убедиться в работоспособности всего приложения, достаточно протестировать каждую из его составных частей. Тестирование части приложения можно выполнить быстрее, чем тестирование всего приложения. Однако самый важный вывод состоял в том, что выполнение одного теста никоим образом не должно влиять на выполнение другого теста. Тесты должны полностью игнорировать друг друга. Если один из тестов не срабатывает, это значит, что в программе присутствует одна проблема. Если не срабатывают два теста, значит, в программе присутствуют две проблемы.</p>
<p>Если тесты изолированы друг от друга, значит, порядок их выполнения не имеет значения. Если я хочу выполнить не все, а некоторое подмножество тестов, я не должен беспокоиться о том, что некоторый тест не сработает только потому, что некоторый другой тест не был предварительно запущен.</p>
<p>Производительность является основной причиной, по которой предлагается делать данные общими для нескольких тестов. Требование изоляции тестов принуждает вас разделить проблему на несколько ортогональных измерений, благодаря чему формирование среды для каждого из тестов выполняется достаточно просто и быстро. Иногда, чтобы выполнить подобное разделение, приходится прикладывать значительные усилия. Если вы хотите, чтобы разрабатываемое вами приложение можно было протестировать при помощи набора изолированных друг от друга тестов, вы должны «собрать» это приложение из множества относительно небольших взаимодействующих между собой объектов. Я всегда знал, что это неплохая идея, и всегда радовался, когда мне удавалось реализовать ее на деле, однако я не был знаком ни с одной методикой, которая позволяла бы мне регулярно воплощать эту идею в жизнь. Ситуация изменилась в лучшую сторону после того, как я стал писать изолированные тесты.</p>
<subtitle><emphasis><strong>Список тестов (Test List)</strong></emphasis></subtitle><p>Что необходимо тестировать? Прежде чем начать, запишите на листке бумаги список всех тестов, которые вам потребуются. Чтобы успешно справляться со стрессом, вы должны постоянно соблюдать важное правило: никогда не делайте шага вперед, пока не узнаете, в каком месте ваша нога должна коснуться земли. Приступая к сеансу программирования, определите, какие задачи вы намерены решить в ходе этого сеанса.</p>
<p>В рамках весьма распространенной стратегии предлагается держать все в голове. Я пробовал использовать этот подход в течение нескольких лет, однако постоянно сталкивался с одной и той же проблемой. По мере того как я работаю, передо мной возникают все новые и новые задачи, которые необходимо решить. Чем больше задач предстоит решить, тем меньше внимания я уделяю тому, над чем я работаю. Чем меньше внимания я уделяю тому, над чем я работаю, тем меньше задач мне удается решить. Чем меньше задач мне удается решить, тем больше вещей, о которых мне приходится помнить в процессе работы. Замкнутый круг.</p>
<p>Я пытался игнорировать случайные элементы списка и программировать по прихоти, однако это не позволяет разорвать замкнутый круг.</p>
<p>Я выработал привычку записывать на листок бумаги все задачи, которые планирую решить в течение нескольких следующих часов. Этот листок постоянно лежит рядом с моим компьютером. Похожий список задач, которые я планирую решить в течение ближайшей недели или ближайшего месяца, приколот к стене над моим компьютером. Если я записал все эти задачи на бумагу, я уверен в том, что я ничего не забуду. Если передо мной возникает новая задача, я быстро и осознанно решаю, к какому списку («сейчас» или «позднее») она принадлежит и нужно ли вообще ею заниматься.</p>
<p>В контексте разработки через тестирование, список задач – это список тестов, которые мы планируем реализовать. Прежде всего включите в список примеры всех операций, которые требуется реализовать. Далее, для каждой из операций, которые еще не существуют, внесите в список нуль-версию этой операции. Наконец, перечислите в списке все изменения, которые потребуется выполнить, чтобы в конце сеанса программирования получить чистый код.</p>
<p>Но зачем записывать тесты на бумагу, когда можно записать их один за другим в виде готового тестирующего кода? Существует пара причин, по которым я не рекомендую заниматься массовым созданием тестов. Во-первых, каждый из тестов создает некоторую инерцию, мешающую выполнению рефакторинга. Чем больше тестов, тем больше эта инерция. Согласитесь, что выполнить рефакторинг кода, для тестирования которого написаны два теста, сложнее, чем выполнить рефакторинг кода, для тестирования которого написан всего один тест. Конечно, существуют инструменты автоматизированного рефакторинга, которые упрощают эту задачу (например, специальный пункт в меню осуществляет модификацию имени переменной в строке, где она объявляется, и во всех местах, в которых эта переменная используется). Однако представьте, что вы написали десять тестов для некоторого метода и <emphasis>после</emphasis> этого обнаружили, что порядок аргументов метода следует изменить на обратный. В подобной ситуации придется приложить существенные усилия, чтобы заставить себя сделать рефакторинг. Во-вторых, чем больше не работающих тестов, тем дольше путь к зеленой полосе. Если перед вами десять «сломанных» тестов, зеленую полосу вы увидите еще не скоро. Если вы хотите быстро получить перед собой зеленую полосу, вы должны выкинуть все десять тестов. Если же вы хотите добиться успешного выполнения всех этих тестов, вы будете вынуждены долгое время смотреть на красную полосу. Если вы настолько приучены к опрятности и аккуратности кодирования, что не можете позволить себе даже дойти до туалета, пока висит красная полоса, значит, вам предстоит серьезное испытание.</p>
<p>Консервативные скалолазы придерживаются одного важного правила. У человека есть две руки и две ноги, всего четыре конечности, которыми он может цепляться за скалу. В любой момент по крайней мере три конечности должны быть надежно сцеплены со скалой. Динамические перемещения, когда скалолаз перемещает с места на место одновременно две конечности, считаются чрезвычайно опасными. Методика TDD в чистом виде подразумевает использование похожего принципа: в любой момент времени вы должны быть не дальше одного изменения от зеленой полосы.</p>
<p>По мере того как вы заставляете тесты срабатывать, перед вами будет возникать необходимость реализации новых тестов. Заносите эти новые тесты в список задач. То же самое относится и к рефакторингу.</p>
<p>«Это выглядит ужасно &lt;вздох&gt;. Добавим это в список. Мы вернемся к этому перед тем, как завершить работу над задачей.»</p>
<p>Необходимо позаботиться о пунктах, оставшихся в списке на момент завершения сеанса программирования. Если на самом деле вы находитесь в середине процесса реализации некоторой функциональности, воспользуйтесь этим же списком позднее. Если вы обнаружили необходимость выполнения более крупномасштабного рефакторинга, выполнить который в настоящий момент не представляется возможным, внесите его в список «позднее». Я не могу припомнить ситуации, когда мне приходилось переносить реализацию теста в список «позднее». Если я могу придумать тест, который может не сработать, реализация этого теста важнее, чем выпуск кода, над которым я работаю.</p>
<subtitle><emphasis><strong>Сначала тест (Test First)</strong></emphasis></subtitle><p>Когда нужно писать тесты? Перед тем как вы приступите к написанию тестируемого кода.</p>
<p>Вы не должны выполнять тестирование после. Конечно, вашей основной целью является работающая функциональность. Однако вам необходима методика формирования дизайна, вам нужен метод контроля над объемом работ.</p>
<p>Рассмотрим обычную диаграмму взаимовлияния между стрессом и тестированием (не путать со стресс-тестированием – это совершенно другая вещь): верхний узел – это стресс; он соединяется с тестированием (нижний узел) отрицательной связью; тестирование, в свою очередь, соединяется со стрессом также отрицательной связью. Эта диаграмма представлена в первом разделе данной главы. Чем больший стресс вы испытываете, тем меньше вы выполняете тестирование. Когда вы знаете, что выполняемого тестирования недостаточно, у вас повышается уровень стресса. Замкнутый цикл с положительной обратной связью. Что можно сделать, чтобы разорвать его?</p>
<p>Что, если мы всегда будем выполнять тестирование вначале? В этом случае мы можем инвертировать диаграмму: вверху будет располагаться узел «Предварительное тестирование», который посредством отрицательной связи будет соединяться с расположенным внизу узлом «Стресс», который, в свою очередь, также посредством отрицательной связи будет соединяться с узлом «Предварительное тестирование».</p>
<p>Когда мы начинаем работу с написания тестов, мы снижаем стресс, а значит, тестирование может быть выполнено более тщательно. Конечно, уровень стресса зависит от множества других факторов, стало быть можно допустить, что возникнет ситуация, в которой из-за высокого уровня стресса нам все-таки придется отказаться от тестирования. Однако, помимо всего прочего, предварительное тестирование является мощным инструментом формирования дизайна и средством контроля над объемом работы. Значит, скорее всего, мы будем выполнять тестирование даже при среднем уровне стресса.</p>
<subtitle><emphasis><strong>Сначала оператор assert (Assert First)</strong></emphasis></subtitle><p>Когда следует писать оператор assert<a type="note" l:href="#n_13">[13]</a>? Попробуйте писать их в первую очередь. Неужели вам не нравится самоподобие?</p>
<p>• С чего следует начать построение системы? С формулировки пожеланий<a type="note" l:href="#n_14">[14]</a> о том, как должна работать система, полученная в результате вашей работы.</p>
<p>• С чего следует начать разработку некоторой функциональности? С написания тестов, которые должны выполниться успешно, когда код будет полностью завершен.</p>
<p>• С чего начать написание теста? С операторов assert, которые должны выполняться в ходе тестирования.</p>
<p>С этой методикой познакомил меня Джим Ньюкирк. Когда я начинаю разработку теста с операторов assert, я ощущаю мощный упрощающий эффект. Когда вы пишете тест, вы решаете несколько проблем одновременно, даже несмотря на то, что при этом вам не нужно думать о реализации.</p>
<p>• Частью чего является новая функциональность? Является ли она модификацией существующего метода? Является ли она новым методом существующего класса? Является ли она методом с известным именем, но реализованным в другом месте? А может быть, новая функциональность – это новый класс?</p>
<p>• Какие имена присвоить используемым элементам?</p>
<p>• Как можно проверить правильность результата работы кода?</p>
<p>• Что считать правильным результатом работы кода?</p>
<p>• Какие другие тесты можно придумать исходя из данного теста?</p>
<p>Малюсенький мозг, такой как у меня, не сможет хорошо поработать над решением всех этих проблем, если они будут решаться одновременно. Две проблемы из приведенного списка можно легко отделить от всех остальных: «Что считать правильным результатом?» и «Как можно проверить правильность результата?»</p>
<p>Например, представьте, что нам надо реализовать обмен данными с другой системой через сокет. После завершения операции сокет должен быть закрыт, а в буфер должна быть прочитана строка abc:</p>
<empty-line></empty-line><p>testCompleteTransaction() {</p>
<p>…</p>
<p>assertTrue(reader.isClosed());</p>
<p>assertEquals("abc", reply.contents());</p>
<p>}</p>
<empty-line></empty-line><p>Откуда должен быть прочитан объект reply? Конечно же, из сокета:</p>
<empty-line></empty-line><p>testCompleteTransaction() {</p>
<p>…</p>
<p>Buffer reply = reader.contents();</p>
<p>assertTrue(reader.isClosed());</p>
<p>assertEquals("abc", reply.contents());</p>
<p>}</p>
<empty-line></empty-line><p>А откуда берется сокет? Мы создаем его, подключаясь к серверу:</p>
<empty-line></empty-line><p>testCompleteTransaction() {</p>
<p>…</p>
<p>Socket reader = Socket("localhost", defaultPort());</p>
<p>Buffer reply = reader.contents();</p>
<p>assertTrue(reader.isClosed());</p>
<p>assertEquals("abc", reply.contents());</p>
<p>}</p>
<empty-line></empty-line><p>Однако перед этим мы должны установить соединение с сервером:</p>
<empty-line></empty-line><p>testCompleteTransaction() {</p>
<p>Server writer = Server(defaultPort(), "abc");</p>
<p>Socket reader = Socket("localhost", defaultPort());</p>
<p>Buffer reply = reader.contents();</p>
<p>assertTrue(reader.isClosed());</p>
<p>assertEquals("abc", reply.contents());</p>
<p>}</p>
<empty-line></empty-line><p>Теперь мы можем изменить имена в соответствии с используемым контекстом, однако в данном случае мы малюсенькими шажками сформировали набросок теста, генерируя каждое решение в течение пары секунд. Мы начали с написания оператора assert.</p>
<subtitle><emphasis><strong>Тестовые данные (Test Data)</strong></emphasis></subtitle><p>Какие данные следует использовать для предварительных тестов? Используйте данные, которые делают тест простым для чтения и понимания. Помните, что вы пишете тесты для людей. Не разбрасывайте данные в изобилии по всему тесту только потому, что вам хочется добавить в тест как можно больше разнообразных данных. Если в разных местах теста используются разные данные, разница должна быть осмысленной. Если не существует концептуальной разницы между 1 и 2, используйте 1.</p>
<p>Вместе с тем, если ваша система должна поддерживать несколько разновидностей ввода, значит, все эти разновидности должны быть отражены в тестах. Однако не следует использовать в качестве входных данных список из десяти элементов, если при использовании списка из трех элементов будет получен точно такой же дизайн и реализация.</p>
<p>Старайтесь не использовать одну и ту же константу в нескольких местах для обозначения более чем одного понятия. Например, если вы намерены тестировать операцию plus(), вам наверняка захочется в качестве теста использовать операцию 2 + 2 – ведь это классический пример сложения. Возможно, вам захочется использовать другую операцию: 1 + 1 – ведь она самая простая из всех возможных. Однако не забывайте, что в данном случае речь идет о двух разных слагаемых, которые могут быть разными объектами. При использовании выражения 2 + 2 слагаемые оказываются одинаковыми, а значит, тест не является достаточно общим. Представьте, что в ходе дальнейшей разработки вы пришли к выводу, что результат выполнения операции plus() по тем или иным причинам должен зависеть от порядка слагаемых (сложно представить себе ситуацию, в которой результат сложения зависит от порядка слагаемых, однако может случиться, что операция plus() может перестать быть просто сложением, таким образом, общая идея должна быть вам понятной). Чтобы обеспечить более полноценное тестирование, попробуйте использовать 2 в качестве первого аргумента и 3 в качестве второго аргумента (в свое время тест 3 + 4 был классическим начальным тестом при запуске новой виртуальной машины Smalltalk).</p>
<p>Альтернативой шаблону «Тестовые данные» (Test Data) является шаблон «Реалистичные данные» (Realistic Data), в рамках которого для тестирования используются данные из реального мира. Реалистичные данные удобно применять в следующих ситуациях:</p>
<p>• вы занимаетесь тестированием системы реального времени, используя цепочки внешних событий, которые возникают в реальных условиях эксплуатации;</p>
<p>• вы сравниваете вывод текущей системы с выводом предыдущей системы (параллельное тестирование);</p>
<p>• вы выполняете рефакторинг кода, имитирующего некоторый реальный процесс, и ожидаете, что после рефакторинга результирующие данные будут в точности такими же, как до рефакторинга, в особенности если речь идет о точности операций с плавающей точкой.</p>
<subtitle><emphasis><strong>Понятные данные (Evident Data)</strong></emphasis></subtitle><p>Каким образом в тесте можно отразить назначение тех или иных данных? Добавьте в тест ожидаемый и реально полученный результат и попытайтесь сделать отношение между ними понятным. Вы пишете тесты не только для компьютера, но и для читателя. Через несколько дней, месяцев или лет кто-нибудь будет смотреть на ваш код и спрашивать себя: «Что имел в виду этот шутник, когда писал этот запутанный код?» Попробуйте оставить своему читателю как можно больше подсказок, имейте в виду, что этим разочарованным читателем можете оказаться вы сами.</p>
<p>Вот пример. Если мы конвертируем одну валюту в другую, мы берем комиссию 1,5 за выполнение операции. Представьте, что мы обмениваем американские доллары (USD) на британские фунты стерлингов (GBP). Пусть курс обмена будет составлять 2:1. Если мы хотим обменять $100, в результате мы должны получить 50 GBP – 1,5 % = 49,25 GBP. Мы могли бы написать следующий тест:</p>
<empty-line></empty-line><p>Bank bank = new Bank().</p>
<p>bank.addRate("USD", "GBP", STANDARD_RATE);</p>
<p>bank.commission(STANDARD_COMMISSION);</p>
<p>Money result = bank.convert(new Note(100, "USD"), "GBP");</p>
<p>assertEquals(new Note(49.25, "GBP"), result);</p>
<empty-line></empty-line><p>Однако вместо этого мы можем сделать порядок вычислений более очевидным:</p>
<empty-line></empty-line><p>Bank bank = new Bank();</p>
<p>bank.addRate("USD", "GBP", 2);</p>
<p>bank.commission(0.015);</p>
<p>Money result = bank.convert(new Note(100, "USD"), "GBP");</p>
<p>assertEquals(new Note(100 / 2 * (1–0.015), "GBP"), result);</p>
<empty-line></empty-line><p>Прочитав этот тест, я вижу взаимосвязь между входными значениями и значениями, используемыми в составе формулы.</p>
<p>Шаблон «Понятные данные» (Evident Data) обладает побочным эффектом: он в некоторой степени облегчает программирование. После того как мы в понятной форме записали выражение assert, мы получаем представление о том, что именно нам необходимо запрограммировать. В данном случае мы видим, что тестируемый код должен содержать операции деления и умножения. Мы даже можем воспользоваться шаблоном «Поддельная реализация» (Fake It), чтобы узнать, где должна располагаться та или иная операция.</p>
<p>Шаблон «Понятные данные» (Evident Data) выглядит как исключение из правила о том, что в коде не должно быть «магических» чисел. Дело в том, что в рамках одного метода легко понять назначение того или иного числа. Однако если в программе уже имеются объявленные символьные константы, я предпочитаю использовать их вместо конкретных численных значений.</p>
</section><section><title><p>26. Шаблоны красной полосы</p>
</title><p>В данной главе речь пойдет о шаблонах, которые подскажут вам, когда писать тесты, где писать тесты и когда прекратить писать тесты.</p>
<subtitle><emphasis><strong>Тест одного шага (One Step Test)</strong></emphasis></subtitle><p>Какой следующий тест лучше всего выбрать из списка задач для реализации? Выбирайте тест, который, во-первых, научит вас чему-либо, а во-вторых, который вы сможете реализовать.</p>
<p>Каждый тест должен соответствовать одному шагу в направлении к вашей основной цели. Взгляните на этот список тестов и попробуйте определить, какой тест лучше всего выбрать в качестве следующего для реализации:</p>
<empty-line></empty-line><p>плюс;</p>
<p>минус;</p>
<p>умножение;</p>
<p>деление;</p>
<p>сложение с такой же валютой;</p>
<p>равенство;</p>
<p>равенство нулю;</p>
<p>нулевой обмен;</p>
<p>обмен одной и той же валюты;</p>
<p>обмен двух валют;</p>
<p>курс кросс-обмена.</p>
<empty-line></empty-line><p>Не существует единственно правильного ответа. То, что для меня, ни разу не занимавшегося реализацией этих объектов, будет выглядеть как один шаг, для вас, обладающих достаточным опытом, может оказаться одной десятой шага. Если вы не можете найти в списке тест, соответствующий одному шагу, добавьте в список дополнительные тесты, реализация которых поможет вам приблизиться к реализации тестов, уже присутствующих в списке.</p>
<p>Когда я смотрю на список тестов, я рассуждаю: «Это очевидно, это очевидно, об этом я не имею ни малейшего представления, это очевидно, здесь – никаких идей, о чем я думал, когда писал это? А! Вспомнил! Я думаю, что мог бы это сделать». Этот последний тест я реализую следующим. С одной стороны, он не кажется мне очевидным, с другой стороны, я уверен в том, что смогу заставить его работать.</p>
<p>Программа, выросшая из подобных тестов, может быть написана в рамках нисходящего подхода (сверху вниз), так как вы можете начать с теста, который ориентирован на вариант полного вычисления. Программа, выросшая из тестов, может быть написана и в рамках восходящего подхода (снизу вверх), так как вы начинаете с небольших кусочков и собираете их в конструкцию постепенно увеличивающегося размера.</p>
<p>И нисходящий, и восходящий подходы не представляют реального описания процесса. Во-первых, вертикальная метафора – это упрощенная визуализация процесса изменения программы в течение разработки. Для описания процесса разработки, основанной на тестировании, лучше подходит метафора <emphasis>Развития</emphasis> или <emphasis>Эволюции</emphasis>: внешняя среда влияет на программу, а программа влияет на внешнюю среду. Во-вторых, если мы хотим, чтобы в нашей метафоре присутствовало направление, лучшим описанием будет «от известного к неизвестному». Подразумевается, что мы обладаем некоторыми знаниями и опытом и ожидаем, что в процессе разработки мы будем узнавать нечто новое. Объединим эти две метафоры и получим, что программа эволюционирует от известного к неизвестному.</p>
<subtitle><emphasis><strong>Начальный тест (Starter Test)</strong></emphasis></subtitle><p>С какого теста следует начать разработку? Начните с тестирования варианта операции, который не подразумевает выполнения каких-либо осмысленных действий, то есть ничего не делает.</p>
<p>Приступая к реализации операции, вы прежде всего должны ответить на вопрос: «Где она должна располагаться?» Пока вы не ответите на этот вопрос, вы не будете знать, какой код необходимо написать, чтобы протестировать эту операцию. Как уже неоднократно рекомендовалось, не следует решать несколько проблем одновременно. Значит, вы должны выбрать такой тест, который позволит вам искать ответ только на один этот вопрос и на время забыть обо всех остальных вопросах.</p>
<p>Если вы с самого начала приступите к реализации реалистичного теста, вам придется искать ответы на несколько вопросов одновременно:</p>
<p>• Где должна располагаться операция?</p>
<p>• Какие входные данные считать корректными?</p>
<p>• Каким должен быть корректный результат выполнения операции при использовании выбранных входных данных?</p>
<p>Если вы начнете с реалистичного теста, вы слишком долгое время будете вынуждены действовать без обратной связи. Красный – зеленый – рефакторинг, красный – зеленый – рефакторинг. На выполнение этого цикла должно уходить всего несколько минут.</p>
<p>Но как сократить время цикла? Для этого вы можете воспользоваться тривиальными входными и выходными данными. Вот простой пример: если функция должна складывать многозначные вещественные числа с точностью до тысячного знака после запятой, вовсе не обязательно начинать ее реализацию с теста, проверяющего результат сложения таких огромных чисел. Вполне можно начать с тривиального теста 3 + 4 = 7. Вот еще один пример. В группе электронных новостей, посвященной экстремальному программированию, один из участников поинтересовался, как написать программу минимизации количества полигонов (многоугольников), составляющих некоторую поверхность. На вход подается набор полигонов, комбинация которых представляет собой некоторый трехмерный объект. На выходе должна получиться комбинация полигонов, которая описывает точно такой же объект (поверхность), но включает в себя минимальное возможное количество полигонов. «Как я могу разработать подобную программу, если для того, чтобы заставить тест сработать, я должен быть как минимум доктором наук?»</p>
<p>Используя шаблон «Начальный тест» (Starter Test), мы получаем ответ:</p>
<p>• Вывод должен быть точно таким же, как ввод. Некоторые комбинации полигонов изначально являются минимальными.</p>
<p>• Ввод должен быть как можно меньшего размера. Например, единственный полигон или даже пустой список полигонов.</p>
<p>Мой начальный тест выглядел следующим образом:</p>
<empty-line></empty-line><p>Reducer r = new Reducer(new Polygon());</p>
<p>assertEquals(0, reducer.result(). npoints);</p>
<empty-line></empty-line><p>Отлично! Первый тест заработал. Теперь можно перейти к остальным тестам в списке…</p>
<p>К начальному тесту следует применить рассмотренное ранее правило «Тест одного шага» (One Step Test): самый первый тест должен научить вас чему-то новому, кроме того, вы должны обладать возможностью достаточно быстро заставить его работать. Если вы реализуете подобный код уже не в первый раз, вы можете выбрать начальный тест для одной или даже двух операций. Вы должны быть уверены, что сможете быстро заставить тест работать. Если вы приступаете к реализации чего-либо достаточно сложного и делаете это впервые, начните с самого простого теста, который вы только можете представить.</p>
<p>Я часто замечаю, что мой начальный тест работает на достаточно высоком уровне и скорее напоминает тест всего приложения. Например, простой сетевой сервер. Самый первый тест выглядит следующим образом:</p>
<empty-line></empty-line><p>StartServer</p>
<p>Socket= new Socket</p>
<p>Message = "hello"</p>
<p>Socket.write(message)</p>
<p>AssertEquals(message, socket.read)</p>
<empty-line></empty-line><p>Остальные тесты пишутся только на стороне сервера: «Предположим, что мы получаем строки наподобие этой…»</p>
<subtitle><emphasis><strong>Объясняющий тест (Explanation Test)</strong></emphasis></subtitle><p>Как распространить в своей команде использование автоматического тестирования? Для любых объяснений используйте тесты и спрашивайте тесты у тех, кто пытается вам что-либо объяснить.</p>
<p>Если вы единственный член команды, работающий в стиле TDD, вы можете почувствовать себя неуютно и одиноко. Однако вскоре после того, как вы начнете работать в стиле TDD, вы обратите внимание на уменьшение количества проблем, связанных с интеграцией, и снижение количества дефектов, обнаруженных в проверенном коде. Дизайн вашего кода будет проще, и его легче будет объяснять. Может случиться так, что ваши коллеги проявят интерес к тестированию и предварительному тестированию разрабатываемого кода.</p>
<p>Опасайтесь оголтелого энтузиазма со стороны новичков. Подобный энтузиазм может оттолкнуть тех, кто еще не до конца понял преимущества и необходимость предварительного тестирования. Если внедрение TDD производить насильственными методами, это может привести к негативным результатам. Если вы руководитель или лидер, вы не должны насильно заставлять людей менять стиль, в рамках которого они работают.</p>
<p>Но что можно сделать? Лучше всего предлагать вашим коллегам объяснять работу кода в форме тестов: «Подожди-ка, если я правильно понял, объект Foo будет таким, а объект Bar будет таким, значит, в результате получится 76?» Кроме того, вы можете объяснять работу кода в виде тестов: «Вот как это работает. Если объект Foo будет таким, а объект Bar будет таким, в результате получится 76. Однако если объект Foo будет таким, а объект Bar будет таким, в результате получится 67».</p>
<p>Вы можете делать это на более высоком уровне абстракции. Если кто-то пытается объяснить вам работу кода при помощи диаграммы последовательности обмена сообщениями, вы можете предложить ему преобразовать эту диаграмму в более понятную форму. После этого вы пишете тест, содержащий в себе все видимые на диаграмме объекты и сообщения.</p>
<subtitle><emphasis><strong>Тест для изучения (Learning Test)<a type="note" l:href="#n_15">[15]</a></strong></emphasis></subtitle><p>Когда необходимо писать тесты для программного обеспечения, разработанного сторонними разработчиками? Перед тем как вы впервые воспользуетесь новыми возможностями этого программного обеспечения.</p>
<p>Предположим, что вы приступаете к разработке программы, основанной на использовании библиотеки Mobile Information Device Profile (MIDP) для языка Java. Вы собираетесь сохранить некоторые данные в объекте RecordStore и затем извлечь их оттуда. Должны ли вы просто написать код в надежде на то, что он заработает? Это один из возможных методов разработки.</p>
<p>Есть альтернативный метод. Обратите внимание на то, что вы собираетесь использовать новый метод нового класса. Вместо того чтобы просто воспользоваться им внутри разрабатываемого вами кода, вы пишете небольшой тест, который позволяет вам убедиться в том, что API работает так, как вы того ожидаете. Таким образом, вы можете написать:</p>
<empty-line></empty-line><p>RecordStore store;</p>
<empty-line></empty-line><p>public void setUp() {</p>
<p>store = RecordStore.openRecordStore("testing", true);</p>
<p>}</p>
<empty-line></empty-line><p>public void tearDown() {</p>
<p>RecordStore.deleteRecordStore("testing");</p>
<p>}</p>
<empty-line></empty-line><p>public void testStore() {</p>
<p>int id = store.addRecord(new byte[] {5, 6}, 0, 2);</p>
<p>assertEquals(2, store.getRecordSize(id));</p>
<p>byte[] buffer = new byte[2];</p>
<p>assertEquals(2, store.getRecord(id, buffer, 0));</p>
<p>assertEquals(5, buffer[0]);</p>
<p>assertEquals(6, buffer[1]);</p>
<p>}</p>
<empty-line></empty-line><p>Если ваше понимание API совпадает с действительностью, значит, тест сработает с первого раза.</p>
<p>Джим Ньюкирк рассказал мне о проекте, в котором разработка тестов для обучения выполнялась на регулярной основе. Как только от сторонних разработчиков поступала новая версия пакета, немедленно запускались имеющиеся тесты. В случае необходимости в тесты вносились исправления. Если тесты завершались неудачей, не было никакого смысла запускать приложение, так как оно определенно не заработает. Если же все тесты выполнялись успешно, значит, и приложение заработает.</p>
<subtitle><emphasis><strong>Еще один тест (Another Test)</strong></emphasis></subtitle><p>Как предотвратить уход дискуссии от основной темы? Когда возникает посторонняя, но интересная мысль, добавьте в список еще один тест и вернитесь к основной теме.</p>
<p>Я люблю пространные дискуссии (вы уже прочитали большую часть книги, поэтому, скорее всего, пришли к такому же выводу самостоятельно). Если постоянно жестко следить за соблюдением основной темы обсуждения, можно потерять множество бриллиантовых идей. Вы перескакиваете с одной темы на другую, затем на третью и, наконец, не успеваете заметить, что ушли далеко от того, с чего начали. А кого это волнует, ведь обсуждать вещи в таком стиле – это круто!</p>
<p>Иногда программирование – это прорыв, генерация гениальной идеи и вдохновение. Однако в большинстве случаев программирование – весьма рутинная работа. У меня есть десять вещей, которые я должен реализовать. Я постоянно откладываю на потом задачу номер четыре. Один из способов избежать работы (и, возможно, сопутствующего страха) – вступить в длинные пространные рассуждения на самые разные темы.</p>
<p>Потеряв огромное количество времени впустую, я пришел к выводу, что иногда лучше сосредоточиться на конкретной проблеме и не отвлекаться на побочные мысли. Когда я работаю в подобном стиле, я приветствую любые новые идеи, однако не позволяю им слишком сильно отвлекать мое внимание. Я записываю новые идеи в список и затем возвращаюсь к тому, над чем я работаю.</p>
<subtitle><emphasis><strong>Регрессионный тест (Regression Test)</strong></emphasis></subtitle><p>Что необходимо сделать в первую очередь в случае, если обнаружен дефект? Написать самый маленький из всех возможных тестов, который не работает, и восстановить его работоспособность.</p>
<p>Регрессионные тесты – это тесты, которые вы наверняка написали бы в процессе обычной разработки, если бы своевременно обнаружили проблему. Каждый раз, столкнувшись с необходимостью написать регрессионный тест, подумайте о том, как вы могли бы узнать о необходимости написать этот тест ранее, то есть тогда, когда выполняли разработку.</p>
<p>Полезным может оказаться тестирование на уровне всего приложения. Регрессионные тесты для всего приложения дают пользователям возможность сообщить вам, что неправильно и чего они на самом деле ожидают. Регрессионные тесты меньшего масштаба являются для вас способом улучшить качество тестирования. Если вы получили доклад о дефекте, в котором описывается появление большого отрицательного целого числа в отчете, значит, в будущем вам необходимо уделить дополнительное внимание тестированию граничных значений для целых чисел.</p>
<p>Возможно, для того чтобы изолировать дефект, вам потребуется выполнить рефакторинг системы. В этом случае, демонстрируя дефект, система как бы говорит вам: «Ты еще не вполне закончил проектировать меня».</p>
<subtitle><emphasis><strong>Перерыв (Break)</strong></emphasis></subtitle><p>Что делать, если вы почувствовали усталость или зашли в тупик? Прервите работу и отдохните.</p>
<p>Выпейте кофе, пройдитесь или даже вздремните. Стряхните с себя эмоциональное напряжение, связанное с решениями, которые вы принимаете, и символами, которые вы набираете на клавиатуре.</p>
<p>Иногда самого короткого перерыва достаточно, чтобы недостающая идея возникла в вашей голове. Возможно, вставая из-за компьютера, вы неожиданно нащупаете нужную нить: «Да я же не попробовал этот метод с пересмотренными параметрами!» В любом случае прервитесь. Дайте себе пару минут. Идея никуда не убежит.</p>
<p>Если, несмотря на отдых, идея не приходит вам в голову, пересмотрите цели, которые вы поставили перед собой для текущего сеанса программирования. Можно ли считать эти цели по-прежнему реалистичными, или вы должны выбрать новые цели? Является ли то, чего вы пытаетесь достичь, невозможным? Если так, то каким образом это повлияет на всю вашу команду?</p>
<p>Дэйв Унгар (Dave Ungar) называет это Методологией душа (Shower Methodology). Если вы знаете, что писать, – пишите. Если вы не знаете, что писать, примите душ и стойте под ним до тех пор, пока не поймете, что нужно писать. Очень многие команды были бы более счастливыми, более продуктивными и пахли бы существенно лучше, если бы воспользовались этим советом.</p>
<p>TDD – это усовершенствование предложенной Унгаром методологии душа. Если вы знаете, что писать, пишите очевидную реализацию. Если вы не знаете, что писать, создайте поддельную реализацию. Если правильный дизайн по-прежнему не ясен, триангулируйте. Если вы по-прежнему не знаете, что писать, можете, наконец, принять душ.</p>
<p>На рис. 26.1 показана динамика процессов, связанных с перерывом. В процессе работы вы устаете. В результате внимание рассеивается, и вам становится сложнее заметить, что вы устали. Поэтому вы продолжаете работать и устаете еще больше.</p>
<p>Чтобы разорвать этот замкнутый круг, необходимо добавить дополнительный внешний элемент.</p>
<p>• В масштабе нескольких часов держите бутылку с водой рядом с вашей клавиатурой и время от времени прихлебывайте из нее. Благодаря этому естественная физиология будет подсказывать вам, когда и зачем необходимо сделать короткий перерыв в работе.</p>
<empty-line></empty-line><image l:href="#i_011.png"></image><p><strong>Рис. 26.1.</strong> Усталость негативно влияет на рассудительность, которая негативно влияет на усталость</p>
<empty-line></empty-line><p>• В масштабе дня вы должны хорошо отдохнуть после завершения рабочего времени.</p>
<p>• В масштабе недели вы отдыхаете в выходные дни. Отдых наполнит вас силами и идеями, благодаря чему вы сможете приступать к новой рабочей неделе. (Моя жена утверждает, что самые лучшие идеи возникают у меня вечером в пятницу.)</p>
<p>• В масштабе года вы получаете отпуск, что позволяет вам полностью освежиться. Французы подходят к этому вопросу очень правильно – двух последовательных недель отпуска недостаточно. В течение первой недели вы сбрасываете с себя рабочее напряжение, а в течение второй недели подсознательно готовите себя к работе. Поэтому, чтобы хорошо отдохнуть и эффективно работать в течение всего следующего года, требуется три, а лучше четыре недели отдыха.</p>
<p>Существует обратная сторона данного шаблона. Иногда, если перед вами стоит сложная проблема, требуется, наоборот, поднажать, поднапрячься и потратить дополнительное время и усилия, чтобы решить ее. Однако большинство программистов инфицировано духом саморазрушения: «Я угроблю свое здоровье, отрекусь от своей семьи и даже выпрыгну из окна, лишь бы этот код заработал». Поэтому я не буду давать здесь каких-либо советов. Если вы чувствуете, что у вас развивается болезненное пристрастие к кофе, наверное, вам не стоит делать слишком частых перерывов. В крайнем случае, просто пройдитесь.</p>
<subtitle><emphasis><strong>Начать сначала (Do over)</strong></emphasis></subtitle><p>Что делать, если вы зашли в тупик? Выкиньте код и начните работу сначала.</p>
<p>Вы заблудились. Вы решили передохнуть. Вымыли руки. Еще раз попытались вспомнить дальнейший путь. И все равно вы заблудились. Код, который выглядел так неплохо всего час назад, теперь выглядит запутанно и непонятно, одним словом, отвратительно. Вы не можете представить себе, как заставить работать следующий тест, а впереди у вас еще 20 тестов, которые необходимо реализовать.</p>
<p>Подобное случалось со мной несколько раз, пока я писал эту книгу. Код получался слишком кривым. «Но я должен закончить книгу. Мои дети хотят есть, а сборщики налогов стучаться в мою дверь.» У меня возникает желание выпрямить код настолько, чтобы можно было продолжать двигаться вперед. Однако на самом деле в большинстве случаев продуктивнее отдохнуть немного и начать все заново. Однажды я был вынужден выкинуть 25 страниц рукописи потому, что она была основана на очевидно глупом программистском решении.</p>
<p>Хорошую историю на эту тему рассказал мне Тим Макиннон (Tim Mackinnon). Однажды он проводил собеседование с потенциальным новым сотрудником. Чтобы оценить уровень его мастерства, он предложил ему программировать в паре в течение часа. К концу этого часа они реализовали несколько новых тестов и провели несколько сеансов рефакторинга. Однако это был конец рабочего дня, они оба чувствовали себя усталыми, поэтому решили полностью убрать из системы результаты своей работы.</p>
<p>Если вы программируете в паре, смена партнера – это хороший повод отказаться от плохого кода и начать решение задачи с начала. Вы пытаетесь объяснить смысл запутанного кода, над которым работали до этого, и вдруг ваш партнер, совершенно не связанный с ошибками, которые вы допустили, берет у вас клавиатуру и говорит: «Я ужасно извиняюсь за мою тупость, но что, если мы попробуем начать по-другому?»</p>
<subtitle><emphasis><strong>Дешевый стол, хорошие кресла (Cheap Desk, Nice Chair)</strong></emphasis></subtitle><p>В какой физической обстановке следует использовать TDD? Используйте удобное, комфортное кресло. На всей остальной мебели можно сэкономить.</p>
<p>Вы не сможете хорошо программировать, если ваша спина будет болеть. К сожалению, организации, которые выкладывают по $100 000 в месяц за работу команды программистов, как правило, отказываются тратить $10 000 на покупку хороших кресел.</p>
<p>Я предлагаю использовать дешевые, самые примитивные и ужасные на вид столы для установки компьютеров, но купить самые лучшие кресла, которые я только смогу найти. Дешевых столов можно купить столько, сколько нужно, значит, я получаю в свое распоряжение достаточное количество рабочего места и могу легко его увеличить. При этом я чувствую себя комфортно за компьютером, моя спина не устает.</p>
<p>Если вы программируете в паре, позаботьтесь о том, чтобы вам было удобно. Расчистите пространство на столе, чтобы вам было удобно передавать клавиатуру из рук в руки. Когда я работаю наставником, я люблю выполнять один простой прием: незаметно подходить со спины к программирующей паре и ненавязчиво поправлять клавиатуру так, чтобы она располагалась удобно по отношению к человеку, который с ней работает.</p>
<p>Манфред Лэндж (Manfred Lange) считает, что аккуратное распределение ресурсов необходимо выполнить также в отношении компьютерного аппаратного обеспечения. Рекомендуется использовать дешевые/медленные/старые компьютеры для индивидуальной электронной почты и работы с Интернетом, но зато приобрести самые современные и самые быстрые компьютеры для разработки.</p>
</section><section><title><p>27. Шаблоны тестирования</p>
</title><p>В данной главе более подробно описываются методики разработки тестов.</p>
<subtitle><emphasis><strong>Дочерний тест (Child Test)</strong></emphasis></subtitle><p>Как заставить работать тест, который оказался слишком большим? Напишите тест меньшего размера, который представляет собой неработающую часть большого теста. Добейтесь успешного выполнения маленького теста. Заново напишите большой тест.</p>
<p>Ритм красный – зеленый – рефакторинг чрезвычайно важен для достижения успеха. Не бойтесь потратить дополнительные усилия, чтобы поддерживать этот ритм, – дополнительные усилия с лихвой окупят себя. Я достаточно часто попадаю в подобную ситуацию: сначала записываю тест, а потом оказывается, что для его реализации требуется выполнить не одно, а несколько изменений. Я неожиданно оказываюсь на большом расстоянии от зеленой полосы. Даже десять минут с красной полосой заставляют меня нервничать.</p>
<p>Когда тест оказывается слишком большим, я, прежде всего, пытаюсь усвоить урок. Почему тест оказался слишком большим? Что надо было сделать иначе, чтобы тест получился меньше по размеру?</p>
<p>Покончив с размышлениями, я удаляю изначальный тест и начинаю заново. «Похоже, заставить все эти три вещи работать одновременно – это слишком сложная задача. Однако если я вначале добьюсь успешной работы A, B и C, мне не составит труда заставить работать всю эту штуку целиком.» Иногда я действительно удаляю тест, однако в некоторых случаях я просто изменяю его имя так, чтобы оно начиналось на x, – в этом случае тестовый метод не будет выполнен. (Скажу вам по секрету, что иногда я вообще не трогаю изначальный тест. Да, да! Только т-с-с-с! Никому об этом не рассказывайте! Слава богу, в большинстве подобных случаев мне удается быстро заставить работать дочерний тест. Однако получается, что я в течение пары минут живу вместе с двумя сломанными тестами. Возможно, когда я так поступаю, я совершаю ошибку. Этот пережиток сохранился у меня с тех времен, когда я выполнял тестирование после завершения разработки или вообще не тестировал свой код.)</p>
<p>Попробуйте оба варианта. Прислушайтесь к своим ощущениям. Если у вас есть два сломанных теста, вы, как правило, начинаете программировать иначе. Делайте выводы.</p>
<subtitle><emphasis><strong>Поддельный объект (Mock Object)</strong></emphasis></subtitle><p>Как выполнять тестирование объекта, который базируется на сложном и тяжеловесном ресурсе? Создайте поддельную версию ресурса, которая будет возвращать константы.</p>
<p>Использование поддельных объектов – это тема для отдельной книги. Существует огромное количество материала, посвященного поддельным объектам<a type="note" l:href="#n_16">[16]</a>. Здесь я попытаюсь очень коротко познакомить читателей с этой концепцией.</p>
<p>Классическим примером является база данных. Чтобы запустить базу данных, требуется значительное время, поддержка чистоты базы данных требует дополнительных затрат, кроме того, если база данных располагается на удаленном сервере, ваши тесты будут связаны с конкретным физическим местоположением в сети. Наконец, база данных является емким источником ошибок разработки.</p>
<p>Чтобы уменьшить количество проблем, рекомендуется в процессе тестирования отказаться от работы непосредственно с базой данных. Большинство тестов пишется в отношении объекта, который функционирует подобно базе данных, однако располагается в оперативной памяти.</p>
<empty-line></empty-line><p>public void testOrderLookup() {</p>
<p>Database db = new MockDatabase();</p>
<p>db.expectQuery("select order_no from Order where cust_no is 123");</p>
<p>db.returnResult(new String[] {"Order 2","Order 3"});</p>
<p>.</p>
<p>}</p>
<empty-line></empty-line><p>Если объект MockDatabase не принимает ожидаемого запроса, он генерирует исключение. Если запрос корректен, объект возвращает нечто, напоминающее результирующий набор данных, состоящий из нескольких постоянных строк.</p>
<p>Помимо высокой производительности и надежности поддельные объекты обладают еще одним преимуществом: читабельностью. Если вы работаете с реальной базой данных, заполненной реальными данными, в результате обработки запроса вы можете получить ответ, состоящий из 14 строк. Возможно, вам будет нелегко понять, откуда взялось число 14 и в чем, собственно, состоит смысл теста.</p>
<p>Если вы хотите воспользоваться поддельными объектами, не следует хранить тяжеловесные ресурсы в глобальных переменных (даже если они замаскированы с использованием шаблона «Одиночка» (Singleton)). Если вы так поступите, вам придется вначале настроить глобальный поддельный объект, затем выполнить тест, а затем позаботиться о том, чтобы вернуть поддельный объект в исходное состояние.</p>
<p>В свое время я очень строго следил за выполнением этого правила. Мы вместе с Массимо Арнольди (Massimo Arnoldi) разрабатывали код, который взаимодействовал с набором курсов обмена валют, хранящимся в глобальной переменной. Для разных тестов требовалось использовать разные наборы данных, и в некоторых случаях курсы обмена валют должны были быть разными для разных тестов. Вначале мы пытались использовать для тестирования глобальную переменную, однако в конце концов нас это утомило, и однажды утром (смелые решения, как правило, приходят ко мне по утрам) мы решили передавать объект Exchange (в котором хранились курсы обмена) в качестве параметра везде, где это было необходимо. Мы думали, что нам придется модифицировать сотни методов. Однако дело кончилось тем, что мы добавили дополнительный параметр в десять или пятнадцать методов и по ходу дела подчистили другие аспекты дизайна.</p>
<p>Шаблон поддельных объектов заставляет тщательно следить за видимостью объектов, снижая взаимозависимости между ними. Поддельные объекты добавляют в проект некоторый риск, – что, если поддельный объект ведет себя не так, как реальный объект? Чтобы снизить этот риск, вы можете разработать специальный набор тестов для поддельных объектов, которые должны быть выполнены в отношении реального объекта, чтобы убедиться в том, что имитация достаточно близка к оригиналу.</p>
<subtitle><emphasis><strong>Самошунтирование (Self Shunt)</strong></emphasis></subtitle><p>Как можно убедиться в том, что один объект корректно взаимодействует с другим? Заставьте тестируемый объект взаимодействовать не с целевым объектом, а с вашим тестом.</p>
<p>Предположим, что вы хотите динамически обновлять зеленую полосу, отображаемую в рамках тестируемого пользовательского интерфейса. Если мы сможем подключить наш объект к объекту TestResult, значит, мы сможем получать оповещения о запуске теста, о том, что тест не сработал, а также о том, что весь набор тестов начал работу или, наоборот, завершил работу. Каждый раз, получив оповещение о запуске теста, мы можем выполнить обновление интерфейса. Вот соответствующий тест:</p>
<empty-line></empty-line><p><strong>ResultListenerTest</strong></p>
<p>def testNotification(self):</p>
<p>result = TestResult()</p>
<p>listener = ResultListener()</p>
<p>result.addListener(listener)</p>
<p>WasRun("testMethod"). run(result)</p>
<p>assert 1 == listener.count</p>
<empty-line></empty-line><p>Тест нуждается в объекте, который подсчитывал бы количество оповещений:</p>
<empty-line></empty-line><p><strong>ResultListener</strong></p>
<p>class ResultListener:</p>
<p>def __init__(self):</p>
<p>self.count = 0</p>
<p>def startTest(self):</p>
<p>self.count = self.count + 1</p>
<empty-line></empty-line><p>Подождите-ка! Зачем нам нужен отдельный объект Listener? Все необходимые функции мы можем возложить на объект TestCase. В этом случае объект TestCase становится подобием поддельного объекта.</p>
<empty-line></empty-line><p><strong>ResultListenerTest</strong></p>
<p>def testNotification(self):</p>
<p>self.count = 0</p>
<p>result = TestResult()</p>
<p>result.addListener(self)</p>
<p>WasRun("testMethod"). run(result)</p>
<p>assert 1 == self.count</p>
<p>def startTest(self):</p>
<p>self.count = self.count + 1</p>
<empty-line></empty-line><p>Тесты, написанные с использованием шаблона «Самошунтирование» (Self Shunt), как правило, читаются лучше, чем тесты, написанные без него. Предыдущий тест является неплохим примером. Счетчик был равен 0, а затем стал равен 1. Вы можете проследить за последовательностью действий прямо в коде теста. Почему счетчик стал равен 1? Очевидно, кто-то обратился к методу startTest(). Где произошло обращение к методу startTest()? Это произошло в начале выполнения теста. Вторая версия теста использует два разных значения переменной count в одном месте, в то время как первая версия присваивает переменной count значение 0 в одном классе и проверяет эту переменную на равенство значению 1 в другом.</p>
<p>Возможно, при использовании шаблона «Самошунтирование» (Self Shunt) вам потребуется применить шаблон рефакторинга «Выделение интерфейса» (Extract Interface), чтобы получить интерфейс, который должен быть реализован вашим тестом. Вы должны сами определить, что проще: выделение интерфейса или тестирование существующего объекта в рамках концепции «черный ящик». Однако я часто замечал, что интерфейсы, выделенные при выполнении самошунтирования, в дальнейшем, как правило, оказываются полезными для решения других задач.</p>
<p>В результате использования шаблона «Самошунтирование» (Self Shunt) вы можете наблюдать, как тесты в языке Java обрастают разнообразными причудливыми интерфейсами. В языках с оптимистической типизацией класс теста обязан реализовать только те операции интерфейса, которые действительно используются в процессе выполнения теста. Однако в Java вы обязаны реализовать абсолютно все операции интерфейса несмотря на то, что некоторые из них будут пустыми. По этой причине интерфейсы следует делать как можно менее емкими. Реализация каждой операции должна либо возвращать значение, либо генерировать исключение – это зависит от того, каким образом вы хотите быть оповещены о том, что произошло нечто неожиданное.</p>
<subtitle><emphasis><strong>Строка-журнал (Log String)</strong></emphasis></subtitle><p>Как можно убедиться в том, что обращение к методам осуществляется в правильном порядке? Создайте строку, используйте ее в качестве журнала. При каждом обращении к методу добавляйте в строку-журнал некоторое символьное сообщение.</p>
<p>Данный прием продемонстрирован ранее, в главе 20, где мы тестировали порядок обращения к методам класса TestCase. В нашем распоряжении имеется шаблонный метод, который, как мы предполагаем, обращается к методу setUp(), затем к тестовому методу, а затем к методу tearDown(). Нам хотелось бы убедиться в том, что обращение к методам осуществляется в указанном порядке. Реализуем методы так, чтобы каждый из них добавлял свое имя в строку-журнал. Исходя из этого можно написать следующий тест:</p>
<empty-line></empty-line><p>def testTemplateMethod(self):</p>
<p>test = WasRun("testMethod")</p>
<p>result = TestResult()</p>
<p>test.run(result)</p>
<p>assert("setUp testMethod tearDown " == test.log)</p>
<empty-line></empty-line><p>Реализация тоже очень проста:</p>
<empty-line></empty-line><p><strong>WasRun</strong></p>
<p>def setUp(self):</p>
<p>self.log = "setUp "</p>
<p>def testMethod(self):</p>
<p>self.log = self.log + "testMethod "</p>
<p>def tearDown(self):</p>
<p>self.log = self.log + "tearDown "</p>
<empty-line></empty-line><p>Шаблон «Строка-журнал» (Log String) особенно полезен в случае, когда вы реализуете шаблон «Наблюдатель» (Observer) и желаете протестировать порядок поступления оповещений. Если вас прежде всего интересует, какие именно оповещения генерируются, однако порядок их поступления для вас не важен, вы можете создать множество строк, добавлять строки в множество при обращении к методам и в выражении assert использовать операцию сравнения множеств.</p>
<p>Шаблон «Строка-журнал» (Log String) хорошо сочетается с шаблоном «Самошунтирование» (Self Shunt). Объект-тест реализует методы шунтируемого интерфейса так, что каждый из них добавляет запись в строку-журнал, затем проверяется корректность этих записей.</p>
<subtitle><emphasis><strong>Тестирование обработки ошибок (Crush Test Dummy)</strong></emphasis></subtitle><p>Как можно протестировать работу кода, обращение к которому происходит в случае ошибки, возникновение которой маловероятно? Создайте специальный объект, который вместо реальной работы генерирует исключение.</p>
<p>Непротестированный код считается неработающим. Но что же тогда делать с кодом обработки ошибок? Надо ли его тестировать? Только в случае, если вы хотите, чтобы он работал.</p>
<p>Предположим, что мы хотим проверить, что происходит с нашим приложением в случае, если на диске не остается свободного места. Неужели для этого необходимо вручную создавать огромное количество файлов? Есть альтернатива. Мы можем <emphasis>сымитировать</emphasis> заполнение диска, фактически использовав шаблон «Подделка» (Fake It).</p>
<p>Вот наш тест для класса File:</p>
<empty-line></empty-line><p>private class FullFile extends File {</p>
<p>public FullFile(String path) {</p>
<p>super(path);</p>
<p>}</p>
<p>public boolean createNewFile() throws IOException {</p>
<p>throw new IOException();</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Теперь мы можем написать тест <emphasis>ожидаемого</emphasis> исключения:</p>
<empty-line></empty-line><p>public void testFileSystemError() {</p>
<p>File f = new FullFile("foo");</p>
<p>try {</p>
<p>saveAs(f);</p>
<p>fail();</p>
<p>} catch (IOException e) {</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Тест кода обработки ошибки напоминает шаблон «Поддельный объект» (Mock Object), однако в данном случае нам не надо подделывать весь объект. Для реализации этой методики удобно использовать анонимные внутренние классы языка Java. При этом вы можете переопределить только один необходимый вам метод. Сделать это можно прямо внутри теста, благодаря чему код теста станет более понятным:</p>
<empty-line></empty-line><p>public void testFileSystemError() {</p>
<p>File f = new File("foo") {</p>
<p>public boolean createNewFile() throws IOException {</p>
<p>throw new IOException();</p>
<p>}</p>
<p>};</p>
<p>try {</p>
<p>saveAs(f);</p>
<p>fail();</p>
<p>} catch (IOException e) {</p>
<p>}</p>
<p>}</p>
<subtitle><emphasis><strong>Сломанный тест (Broken Test)</strong></emphasis></subtitle><p>Как следует завершить сеанс программирования, если вы программируете в одиночку? Оставьте последний тест неработающим.</p>
<p>Этому приему научил меня Ричард Гэбриел (Richard Gabriel). Вы заканчиваете сеанс на середине предложения. Когда вы возвращаетесь к работе, вы смотрите на начало предложения и вспоминаете, о чем вы думали, когда писали его. Вспомнив ход своих мыслей, вы завершаете предложение и продолжаете работу. Если по возвращении к работе вам не надо завершать никакого предложения, вы вынуждены потратить несколько минут, чтобы сначала просмотреть уже написанный код, изучить список задач, вспомнить, над чем вы собирались работать, затем попытаться восстановить прежнее состояние ваших мыслей и наконец приступить к работе.</p>
<p>Я использовал подобный трюк при работе над моими одиночными проектами и мне очень понравился эффект. В конце рабочего сеанса следует написать тест и запустить его, чтобы убедиться, что он не работает. Вернувшись к коду, вы сразу увидите место, откуда можно продолжить. Вы получаете хорошо заметную закладку, которая помогает вам вспомнить, о чем вы думали. Оставленный неработающим тест должен быть прост в реализации, благодаря чему вы сможете быстро выйти на прежний маршрут и продолжить движение к победе.</p>
<p>Сначала я думал, что оставленный недоделанным тест будет действовать мне на нервы. Однако нет. Ведь вся программа в целом еще далека от завершения, один сломанный тест не сделает ее менее завершенной, и я отлично знаю об этом. Возможность быстро восстановить общий ход разработки спустя несколько недель простоя стоит того, чтобы немножко поступиться принципами и оставить работу, имея перед глазами красную полосу.</p>
<subtitle><emphasis><strong>Чистый выпускаемый код (Clean Check-in)</strong></emphasis></subtitle><p>Как следует завершить сеанс программирования, если вы программируете в составе команды? Все ваши тесты должны работать.</p>
<cite><p><emphasis>Я противоречу сам себе? Да.</emphasis></p>
<text-author><emphasis>Бубба Уитман (Bubba Whitman), брат Уолта – портового грузчика</emphasis></text-author></cite><p>Когда вы работаете над кодом не один, а вместе с вашими коллегами, ситуация полностью меняется. Когда вы возвращаетесь к работе над кодом, над которым помимо вас работают еще несколько человек, вы не можете сказать точно, что именно произошло с кодом с того момента, как вы видели его последний раз. По этой причине, прежде чем выпускать разрабатываемый вами код, убедитесь, что все тесты выполняются успешно. (Это напоминает правило изоляции тестов, в соответствии с которым каждый тест гарантированно оставляет систему в хорошем известном состоянии. Это правило можно применить и в отношении программистов, которые поочередно интегрируют свой код в систему, каждый раз проверяя, остается система в хорошем состоянии или нет.)</p>
<p>Набор тестов, которые вы запускаете в ходе интеграции, может быть существенно объемнее набора тестов, который вы запускаете каждую минуту в процессе разработки функциональности. (До того времени, пока это не станет слишком утомительным, я рекомендую вам постоянно запускать полный набор тестов.) Что делать, если при попытке интеграции вы обнаружили, что один тест из полного набора завершается неудачей?</p>
<p>Самое простое правило: отбросьте проделанную работу и начните все заново. Сломанный сигнализирует, что вы не обладаете достаточным запасом знаний, чтобы запрограммировать то, над чем вы работаете. Если команда будет действовать в соответствии с этим правилом, у ее членов появится тенденция выполнять интеграцию более часто, так как тот, кто успеет приступить к интеграции раньше других, не рискует потерять проделанную работу. По всей видимости, частая интеграция и проверка – это неплохая практика.</p>
<p>Существует другой, менее строгий подход: вы можете исправить дефект и попробовать снова выполнить интеграцию. Однако не забывайте, что вы не должны слишком долго занимать интеграционные ресурсы: если вы не можете решить проблему в течение нескольких минут, откажитесь от идеи интеграции и начните работу заново. Об этом можно не говорить, но я все-таки скажу, что комментирование одного теста с целью заставить работать весь набор строго запрещается и должно приводить к самым серьезным карательным санкциям.</p>
</section><section><title><p>28. Шаблоны зеленой полосы</p>
</title><p>Когда у вас есть сломанный тест, вы должны заставить его работать. Если вы рассматриваете красную полосу как состояние, из которого следует выйти как можно быстрее, вы должны овладеть приемами быстрого получения зеленой полосы. Используйте следующие шаблоны, чтобы заставить ваш тест выполниться (даже если полученный в результате этого код не просуществует и часа).</p>
<subtitle><emphasis><strong>Подделка (Fake It)</strong></emphasis></subtitle><p>Если у вас есть тест, завершающийся неудачей, какой должна быть самая первая реализация? Сделайте так, чтобы тестируемый метод возвращал константу. После того как тест начал работать, постепенно трансформируйте константу в выражение с использованием переменных.</p>
<p>Пример использования этого подхода продемонстрирован в ходе разработки нашей реализации xUnit. Вначале мы использовали строковую константу:</p>
<empty-line></empty-line><p>return «1 run, 0 failed»</p>
<empty-line></empty-line><p>Затем эта строка была преобразована в выражение:</p>
<empty-line></empty-line><p>return «%d run, 0 failed» % self.runCount</p>
<empty-line></empty-line><p>Однако этим дело не кончилось. В конце мы получили выражение:</p>
<empty-line></empty-line><p>return «%d run, %d failed» % (self.runCount, self failureCount)</p>
<empty-line></empty-line><p>Шаблон «Подделка» (Fake It) напоминает страховочную веревку, которая соединяет вас с верхней точкой маршрута, когда вы карабкаетесь по скале. Пока что вы еще не забрались на самый верх (тест на месте и работает, но тестируемый код некорректен). Однако в любой точке маршрута вы держитесь за веревку и знаете, что когда достигнете самого верха, то будете в безопасности (тест работает в ходе рефакторинга, а также после получения окончательного кода).</p>
<p>Шаблон «Подделка» (Fake It) многим может показаться совершенно бесполезным. Зачем писать код, который абсолютно точно придется заменить другим? Дело в том, что иметь хоть какой-то работающий код – это лучше, чем вообще не иметь работающего кода, в особенности если у вас есть тесты, которые могут доказать работоспособность кода. Петер Хансен (Peter Hansen) рассказал мне следующую историю:</p>
<p><emphasis>Буквально вчера два новичка в области TDD – мой партнер и я – решили в точности следовать букве закона. То есть мы написали тест, а затем написали самый простой, но совершенно бесполезный код, который обеспечивал срабатывание теста. Пока мы писали этот код, мы обнаружили, что тест написан неправильно</emphasis>.</p>
<p>Каким образом поддельная реализация подсказала им, что написанный ими тест некорректен? Я понятия не имею, однако я счастлив, что они вовремя обнаружили это. Быть может, если они не воспользовались бы поддельной реализацией, они пошли бы по ложному пути. Возможно, исправление связанных с этим ошибок обошлось бы им дороже.</p>
<p>При использовании шаблона «Подделка» (Fake It) возникает как минимум два положительных эффекта:</p>
<p><emphasis> Психологический</emphasis>. Если перед вами зеленая полоса, вы чувствуете себя совершенно иначе, чем когда перед вами красная полоса. Когда полоса зеленая, вы знаете, на чем стоите. Вы можете смело и уверенно приступать к рефакторингу.</p>
<p><emphasis> Контроль над объемом работы</emphasis>. Программисты привыкли пытаться предвидеть появление в будущем самых разнообразных проблем. Если вы начинаете с конкретного примера и затем осуществляете обобщение кода, это помогает вам избавиться от лишних опасений. Вы можете сконцентрироваться на решении конкретной проблемы и поэтому выполнить работу лучше. При переходе к следующему тесту вы опять же концентрируетесь на нем, так как знаете, что предыдущий тест гарантированно работает.</p>
<p>Нарушает ли шаблон «Подделка» (Fake It) правило о том, что не следует писать код, который вам не потребуется? Я так не думаю, ведь на этапе рефакторинга вы удаляете дублирование данных между тестом и тестируемым кодом. Допустим, я написал<a type="note" l:href="#n_17">[17]</a>:</p>
<empty-line></empty-line><p>assertEquals(new MyDate(«28.2.02»), new MyDate(«1.3.02»). yesterday());</p>
<empty-line></empty-line><p><strong>MyDate</strong></p>
<p>public MyDate yesterday() {</p>
<p>return new MyDate("28.2.02");</p>
<p>}</p>
<empty-line></empty-line><p>Между тестом и кодом существует дублирование. Попробуем исправить ситуацию:</p>
<empty-line></empty-line><p><strong>MyDate</strong></p>
<p>public MyDate yesterday() {</p>
<p>return new MyDate(new MyDate("1.3.02"). days()-1);</p>
<p>}</p>
<empty-line></empty-line><p>Однако дублирование по-прежнему присутствует. Чтобы избавиться от него, заменяем MyDate(«1.3.02») на this (в моем тесте эти значения равны). Получается:</p>
<empty-line></empty-line><p><strong>MyDate</strong></p>
<p>public MyDate yesterday() {</p>
<p>return new MyDate(this.days()-1);</p>
<p>}</p>
<empty-line></empty-line><p>Однако увидеть возможность подобных подстановок с первого взгляда удается далеко не всегда и далеко не всем, поэтому для пущей ясности вы можете использовать триангуляцию, по крайней мере до тех пор, пока вам не надоест. Когда вам надоест, вы чаще будете пользоваться шаблоном «Подделка» (Fake It) или «Очевидная реализация» (Obvious Implementation).</p>
<subtitle><emphasis><strong>Триангуляция (Triangulate)</strong></emphasis></subtitle><p>Какой самый консервативный способ позволяет формировать абстракцию при помощи тестов? Делайте код абстрактным только в случае, если у вас есть два или более примера.</p>
<p>Рассмотрим пример. Предположим, мы хотим написать функцию, которая возвращает сумму двух целых чисел. Мы пишем:</p>
<empty-line></empty-line><p>public void testSum() {</p>
<p>assertEquals(4, plus(3, 1));</p>
<p>}</p>
<empty-line></empty-line><p>private int plus(int augend, int addend) {</p>
<p>return 4;</p>
<p>}</p>
<empty-line></empty-line><p>Чтобы получить представление о правильном дизайне, мы добавляем еще один пример:</p>
<empty-line></empty-line><p>public void testSum() {</p>
<p>assertEquals(4, plus(3, 1));</p>
<p>assertEquals(7, plus(3, 4));</p>
<p>}</p>
<empty-line></empty-line><p>Теперь, когда у нас есть еще один пример, мы можем сделать реализацию метода plus() абстрактной:</p>
<empty-line></empty-line><p>private int plus(int augend, int addend) {</p>
<p>return augend + addend;</p>
<p>}</p>
<empty-line></empty-line><p>Триангуляция выглядит привлекательно, так как правила ее выполнения вполне понятны. Правила для шаблона «Подделка» (Fake It) основаны на ощущении дублирования кода между тестом и поддельным кодом. Это ощущение может быть субъективным, поэтому правила выглядят несколько туманными. Несмотря на то, что они кажутся простыми, правила триангуляции создают замкнутый цикл. После того как мы написали два выражения assert и сформировали абстрактную корректную реализацию метода plus(), мы можем уничтожить одно из выражений assert, так как теперь оно является избыточным. А сделав это, мы сможем упростить реализацию plus(), чтобы этот метод возвращал константу. После этого нам надо будет снова добавить выражение assert.</p>
<p>Я использую триангуляцию только в случае, если я действительно не уверен, какая абстракция является корректной. В других ситуациях я предпочитаю использовать шаблон «Подделка» (Fake It) или «Очевидная реализация» (Obvious Implementation).</p>
<subtitle><emphasis><strong>Очевидная реализация (Obvious Implementation)</strong></emphasis></subtitle><p>Как реализоать простую операцию? Просто реализуйте ее.</p>
<p>Шаблоны «Подделка» (Fake It) и «Триангуляция» (Triangulate) позволяют вам двигаться маленькими шажками. Но иногда вы абсолютно уверены в том, как можно корректно реализовать операцию. Вперед! Пишите то, что вы думаете. Например, должен ли я использовать шаблон «Подделка» (Fake It) для реализации чего-либо столь же простого, как метод plus()? Как правило, нет. Обычно для таких простых методов я просто пишу очевидную реализацию. Если при этом передо мной неожиданно появляется красная полоса за красной полосой, я перехожу на более короткий шаг.</p>
<p>В шаблонах «Подделка» (Fake It) и «Триангуляция» (Triangulate) не существует никакой особенной добродетели. Если вы знаете, что писать, и если это получится достаточно быстро, то смело пишите готовый код. Однако помните, что, используя только очевидную реализацию, вы требуете от себя совершенства<a type="note" l:href="#n_18">[18]</a>. С психологической точки зрения это может быть разрушительный ход. Что, если написанное вами на самом деле не является самым простым изменением, которое заставляет тест работать? Что, если ваш партнер покажет вам еще более простой вариант кода? Вы проиграли! Ваш мир рухнул! Вы в ступоре.</p>
<p>Известный слоган гласит: «чистый код, который работает». Если вы будете решать проблему «чистый код» одновременно с проблемой «который работает», для вас это может оказаться слишком много. Как только вы поймете это, вернитесь обратно к решению проблемы «который работает» и только после этого принимайтесь за решение проблемы «чистый код».</p>
<p>При использовании шаблона «Очевидная реализация» (Obvious Implementation) следите за тем, насколько часто вы сталкиваетесь с красной полосой. Часто приходится попадать в ловушку: я записываю очевидную реализацию, но она не работает. Но теперь я точно знаю, что именно я должен написать. Поэтому я вношу в код изменения. Однако тест по-прежнему не работает. Но теперь-то я уж точно знаю… Это часто случается при возникновении ошибок типа «индекс отличается на единицу» и «положительные/отрицательные числа».</p>
<p>Прежде всего вы должны следить за соблюдением ритма красный – зеленый – рефакторинг. Очевидная реализация – это вторая передача. Будьте готовы снизить скорость, если ваш мозг начинает выписывать чеки, которые не могут быть оплачены вашими пальцами.</p>
<subtitle><emphasis><strong>От одного ко многим (One to Many)</strong></emphasis></subtitle><p>Как реализовать операцию с коллекцией объектов? Сначала реализуйте эту операцию, манипулирующую единственным объектом, затем модернизируйте ее для работы с коллекцией таких объектов.</p>
<p>Например, предположим, что мы разрабатываем функцию, которая суммирует массив чисел. Мы можем начать с одного числа:</p>
<empty-line></empty-line><p>public void testSum() {</p>
<p>assertEquals(5, sum(5));</p>
<p>}</p>
<p>private int sum(int value) {</p>
<p>return value;</p>
<p>}</p>
<empty-line></empty-line><p>(Я добавил метод sum() в класс TestCase, чтобы не создавать новый класс ради одного метода.)</p>
<p>Теперь мы хотим протестировать sum(new int[] {5, 7}). Для начала добавим в метод sum() параметр, соответствующий массиву целых чисел:</p>
<empty-line></empty-line><p>public void testSum() {</p>
<p>assertEquals(5, sum(5, new int[] {5}));</p>
<p>}</p>
<p>private int sum(int value, int[] values) {</p>
<p>return value;</p>
<p>}</p>
<empty-line></empty-line><p>Этот этап можно рассматривать как пример применения шаблона «Изоляция изменения» (Isolate Change). После того как мы добавили параметр, мы можем менять реализацию, не затрагивая код теста.</p>
<p>Теперь мы можем использовать коллекцию вместо единственного значения:</p>
<empty-line></empty-line><p>private int sum(int value, int[] values) {</p>
<p>int sum = 0;</p>
<p>for (int i = 0; i &lt; values.length; i++)</p>
<p>sum += values[i];</p>
<p>return sum;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь можно удалить неиспользуемый параметр:</p>
<empty-line></empty-line><p>public void testSum() {</p>
<p>assertEquals(5, sum(new int[] {5}));</p>
<p>}</p>
<p>private int sum(int[] values) {</p>
<p>int sum = 0;</p>
<p>for (int i = 0; i &lt; values.length; i++)</p>
<p>sum += values[i];</p>
<p>return sum;</p>
<p>}</p>
<empty-line></empty-line><p>Предыдущий шаг – это тоже демонстрация шаблона «Изоляция изменения» (Isolate Change). Мы изменили код и в результате можем менять тест, не затрагивая код. Теперь мы можем расширить тест, как планировали:</p>
<empty-line></empty-line><p>public void testSum() {</p>
<p>assertEquals(12, sum(new int[] {5, 7}));</p>
<p>}</p>
</section><section><title><p>29. Шаблоны xUnit</p>
</title><p>В этой главе рассматриваются шаблоны, предназначенные для использования при работе с xUnit.</p>
<subtitle><emphasis><strong>Проверка утверждений</strong></emphasis></subtitle><p>Как убедиться в том, что тест работает правильно? Напишите логическое выражение, которое автоматически подтвердит ваше мнение о том, что код работает.</p>
<p>Если мы хотим сделать тесты полностью автоматическими, значит, абсолютно все предположения о работе тестируемого кода необходимо превратить в тесты, при этом результат выполнения этих тестов должен говорить нам, работает код корректно или нет. Проще говоря, мы должны обладать возможностью щелкнуть на кнопке и через короткое время узнать, работает код корректно или нет. Отсюда следует, что</p>
<p>• в результате выполнения теста должно получиться логическое значение: «истина» (True) указывает, что все в порядке, а «ложь» – что произошло нечто непредвиденное;</p>
<p>• проверка результата каждого теста выполняется компьютером автоматически при помощи какой-либо разновидности оператора assert().</p>
<p>Мне приходилось видеть выражения наподобие assertTrue(rectangle.area()!= 0). Чтобы тест выполнился успешно, метод area() должен вернуть любое ненулевое значение – это не очень полезный тест. Делайте тесты более конкретными. Если площадь прямоугольника должна быть равна 50, так и пишите: assertTrue(rectangle.area() == 50). Во многих реализациях xUnit присутствует специальное выражение assert() для тестирования равенства (эквивалентности). Отличительная его черта состоит в том, что вместо одного логического параметра выражение assertEquals() принимает два произвольных объекта и пытается определить, являются ли они эквивалентными. Преимущество состоит в том, что в случае неудачи выражение assertEquals() сгенерирует более информативное сообщение с указанием двух несовпадающих значений. Ожидаемое значение, как правило, указывается первым. Например, предыдущее выражение в среде JUnit можно переписать следующим образом: assertEquals(50, rectangle.area()).</p>
<p>Думать об объектах, как о черных ящиках, достаточно тяжело. Представим, что у нас есть объект Contract, состояние которого хранится в поле status и может быть экземпляром класса Offered или Running. В этом случае можно написать тест исходя из предполагаемой реализации:</p>
<empty-line></empty-line><p>Contract contract = new Contract(); // по умолчанию состояние Offered</p>
<p>contract.begin(); // состояние меняется на Running</p>
<p>assertEquals(Running.class, contract.status.class);</p>
<empty-line></empty-line><p>Этот тест слишком сильно зависит от текущей реализации объекта status. Однако тест должен завершаться успешно, даже если поле status станет логическим значением. Может быть, когда status меняется на Running, можно узнать дату начала работы над контрактом:</p>
<empty-line></empty-line><p>assertEquals(…, contract.startDate()); // генерирует исключение, если</p>
<p>// status является экземпляром Offered</p>
<empty-line></empty-line><p>Я признаю, что пытаюсь плыть против течения, когда настаиваю на том, что все тесты должны быть написаны только с использованием общедоступного (public) протокола. Существует специальный пакет JXUnit, который является расширением JUnit и позволяет тестировать значения переменных, даже тех, которые объявлены как закрытые.</p>
<p>Желание протестировать объект в рамках концепции белого ящика – это не проблема тестирования, это проблема проектирования. Каждый раз, когда у меня возникает желание протестировать значение переменной-члена, чтобы убедиться в работоспособности кода, я получаю возможность улучшить дизайн системы. Если я забываю о своих опасениях и просто проверяю значение переменной, я теряю такую возможность. Иначе говоря, если идея об улучшении дизайна не приходит мне в голову, ничего не поделаешь. Я проверяю значение переменной, смахиваю непрошеную слезу, вношу соответствующую отметку в список задач и продолжаю двигаться вперед, надеясь, что наступит день, когда смогу найти подходящее решение.</p>
<p>Самая первая версия xUnit для Smalltalk (под названием SUnit) обладала очень простыми выражениями assert. Если одно из выражений терпело неудачу, автоматически открывалось окно отладчика, вы исправляли код и продолжали работу. Среда разработки Java не настолько совершенна, к тому же построение приложений на Java часто выполняется в пакетном режиме, поэтому имеет смысл добавлять в выражение assert() дополнительную информацию о проверяемом условии. Чтобы в случае неудачи выражения assert() можно было вывести на экран дополнительную информацию.</p>
<p>В JUnit это реализуется при помощи необязательного первого параметра<a type="note" l:href="#n_19">[19]</a>. Например, если вы напишете assertTrue(«Должно быть True», false) и тест не сработает, то вы увидите на экране приблизительно следующее сообщение: Assertion failed: Должно быть True. Обычно подобного сообщения достаточно, чтобы направить вас напрямую к источнику ошибки в коде. В некоторых группах разработчиков действует жесткое правило, что все выражения assert() должны снабжаться подобными информационными сообщениями. Попробуйте оба варианта и самостоятельно определите, окупаются ли для вас затраты, связанные с информационными сообщениями.</p>
<subtitle><emphasis><strong>Фикстура<a type="note" l:href="#n_20">[20]</a> (Fixture)</strong></emphasis></subtitle><p>Как создаются общие объекты, которые используются в нескольких тестах? Конвертируйте локальные переменные из тестов в переменные-члены класса TestCase. Переопределите метод setUp() и инициализируйте в нем эти переменные (то есть выполните создание всех необходимых объектов).</p>
<p>Если мы привыкли удалять дублирование из функционального (тестируемого) кода, должны ли мы удалять его из тестирующего кода? Может быть.</p>
<p>Существует проблема: зачастую вам приходится писать больше кода для того, чтобы установить объекты, используемые тестируемым методом, в интересующее вас состояние. Код, инициализирующий объекты, часто оказывается одинаковым для нескольких тестов. Такие объекты называются <emphasis>фикстурой</emphasis> теста (используется также английский термин <emphasis>scaffolding – строительные леса, подмостки</emphasis>). Дублирование подобного кода – это плохо. Вот две основные причины:</p>
<p>• написание подобного кода требует дополнительного времени, даже если мы просто копируем блоки текста через буфер обмена. Но наша задача – добиться того, чтобы написание тестов занимало как можно меньше времени;</p>
<p>• если приходится вручную менять интерфейс, перед нами встает необходимость изменять его в нескольких разных тестах (именно этого всегда следует ожидать от дублирования).</p>
<p>Однако дублирование кода инициализации объектов обладает также некоторыми преимуществами. Если код инициализации располагается непосредственно рядом с тестирующими выражениями assert(), весь код теста можно прочитать от начала и до конца. Если мы выделили код инициализации в отдельный метод, нам приходится помнить о том, что этот метод вызывается, нам приходится вспоминать, как именно выглядят объекты, и только вспомнив все это, мы можем написать остальную часть теста.</p>
<p>Среда xUnit поддерживает оба стиля написания тестов. Если вы думаете, что читателям будет сложно вспомнить объекты фикстуры, вы можете разместить код создания фикстуры непосредственно в теле теста. Однако вы также можете переместить этот код в метод с названием setUp(). В этом методе вы можете создать все объекты, которые будут использоваться в тестовых методах.</p>
<p>Далее приводится пример, который слишком прост, чтобы мотивировать выделение общего кода фикстуры, но зато достаточно короток, чтобы поместиться в данной книге. Мы можем написать:</p>
<empty-line></empty-line><p><strong>EmptyRectangleTest</strong></p>
<p>public void testEmpty() {</p>
<p>Rectangle empty = new Rectangle(0,0,0,0);</p>
<p>assertTrue(empty.isEmpty());</p>
<p>}</p>
<empty-line></empty-line><p>public void testWidth() {</p>
<p>Rectangle empty = new Rectangle(0,0,0,0);</p>
<p>assertEquals(0.0, empty.getWidth(), 0.0);</p>
<p>}</p>
<empty-line></empty-line><p>(Помимо прочего здесь также демонстрируется версия assertEquals() для чисел с плавающей точкой, которая принимает третий параметр – точность сравнения.) Мы можем избавиться от дублирования, написав:</p>
<empty-line></empty-line><p><strong>EmptyRectangleTest</strong></p>
<p>private Rectangle empty;</p>
<empty-line></empty-line><p>public void setUp() {</p>
<p>empty = new Rectangle(0,0,0,0);</p>
<p>}</p>
<empty-line></empty-line><p>public void testEmpty() {</p>
<p>assertTrue(empty.isEmpty());</p>
<p>}</p>
<p>public void testWidth() {</p>
<p>assertEquals(0.0, empty.getWidth(), 0.0);</p>
<p>}</p>
<empty-line></empty-line><p>Общий код выделен в виде отдельного метода. Среда xUnit гарантирует, что метод setUp() объекта TestCase будет обязательно вызван перед обращением к любому тестовому методу этого объекта. Теперь тестовые методы выглядят проще, однако, прежде чем понять их смысл, мы должны вспомнить о существовании метода setUp() и уточнить, что происходит внутри этого метода.</p>
<p>Какой из этих двух стилей предпочтительней? Попробуйте использовать каждый из них. Я фактически всегда выделяю общий код фикстуры и перемещаю его в метод setUp(), однако у меня хорошая память. Те, кто читает мои тесты, часто жалуются, что им приходится вспоминать слишком о многом. Значит, возможно, мне следует выделять меньшей объем кода, чтобы сделать тесты более понятными.</p>
<p>Взаимоотношения между подклассами класса TestCase и экземплярами этих подклассов являются наиболее запутанной стороной инфраструктуры xUnit. Каждый новый тип фикстуры требует создания нового подкласса класса TestCase. Каждая новая фикстура создается внутри экземпляра подкласса, используется один раз, а затем уничтожается.</p>
<p>В предыдущем примере, если мы хотим написать тесты для непустого прямоугольника (Rectangle), нам придется создать новый класс, который можно назвать, например, NormalRectangleTest. У этого класса будет свой собственный метод setUp(), в котором будет создан новый экземпляр Rectangle, необходимый ему для тестирования. Этот экземпляр Rectangle будет соответствовать непустому прямоугольнику. В общем случае, если я хочу использовать несколько отличающуюся фикстуру, я создаю новый подкласс класса TestCase.</p>
<p>Это означает, что не существует прямого простого соответствия между классами тестов и функциональными (тестируемыми) классами. Иногда одна фикстура используется для тестирования нескольких классов (подобное случается нечасто). Иногда для тестирования единственного функционального класса требуется создать две или три фикстуры. На практике в большинстве случаев получается, что количество классов тестов приблизительно совпадает с количеством функциональных классов. Однако это происходит вовсе не потому, что для каждого функционального класса вы создаете один-единственный класс теста.</p>
<subtitle><emphasis><strong>Внешняя фикстура (External Fixture)</strong></emphasis></subtitle><p>Как осуществляется освобождение внешних ресурсов в фикстуре? Переопределите метод tearDown() и освободите в нем ресурсы, выделенные в ходе создания фикстуры.</p>
<p>Помните, что каждый тест должен оставить рабочую среду в том же состоянии, в котором она была до того, как тест начал работу. Например, если внутри теста вы открываете файл, вы должны позаботиться о том, чтобы закрыть его перед тем, как тест завершит работу. Вы можете написать:</p>
<empty-line></empty-line><p>testMethod(self):</p>
<p>file = File("foobar"). open()</p>
<p>try:</p>
<p>…âûïîëíèòü òåñò…</p>
<p>finally:</p>
<p>file.close()</p>
<empty-line></empty-line><p>Если файл используется в нескольких тестах, вы можете сделать его частью общей фикстуры:</p>
<empty-line></empty-line><p>setUp(self):</p>
<p>self.file = File("foobar"). open()</p>
<p>testMethod(self):</p>
<p>try:</p>
<p>…выполнить тест…</p>
<p>finally:</p>
<p>self.file.close()</p>
<empty-line></empty-line><p>Во-первых, возникает неприятное дублирование выражений finally – это означает, что мы упустили что-то в дизайне. Во-вторых, при написании подобного метода можно легко допустить ошибку, например забыть добавить ключевое слово finally или вообще забыть о необходимости закрытия файла. Наконец, в этом тесте существует три сбивающих с толку строки – try, finally и сама команда close, – эти выражения не относятся непосредственно к процедуре тестирования.</p>
<p>Инфраструктура xUnit гарантирует вызов метода под названием tearDown() после выполнения тестового метода. Метод tearDown() будет вызван вне зависимости от того, что случится внутри тестового метода (однако следует иметь в виду, что, если сбой произойдет в ходе выполнения метода setUp(), метод tearDown() вызываться не будет). Мы можем преобразовать предыдущий тест следующим образом:</p>
<empty-line></empty-line><p>setUp(self):</p>
<p>self.file = File("foobar"). open()</p>
<p>testMethod(self):</p>
<p>…выполнить тест…</p>
<p>tearDown(self):</p>
<p>self.file.close()</p>
<subtitle><emphasis><strong>Тестовый метод (Test Method)</strong></emphasis></subtitle><p>Что такое единичный тест? Это метод, имя которого начинается с префикса test.</p>
<p>В процессе разработки вам придется иметь дело с сотнями, а может быть, и тысячами тестов, как можно уследить за всеми этими тестами?</p>
<p>Языки объектно-ориентированного программирования обеспечивают трехуровневую организацию исходного кода:</p>
<p>• модуль (в языке Java – <emphasis>пакет</emphasis>, по-английски, <emphasis>package</emphasis>);</p>
<p>• класс;</p>
<p>• метод.</p>
<p>Если мы пишем тесты как обычный исходный код, мы должны найти способ организации тестов с использованием элементов этой структуры. Если мы используем классы для представления фикстур, значит, методы этих классов являются естественным местом размещения тестирующего кода. Все тесты, использующие некоторую фикстуру, должны быть методами одного класса. Тесты, работающие с другой фикстурой, должны располагаться в другом классе.</p>
<p>В xUnit используется соглашение, в соответствии с которым имя тестового метода должно начинаться с префикса test. Специальные инструменты могут автоматически производить поиск таких методов и создавать из них наборы тестов (TestSuite). Остальная часть имени теста должна информировать будущего, ни о чем не ведающего читателя, зачем написан данный тест. Например, в наборе тестов, созданных при разработке инфраструктуры JUnit, можно обнаружить тест с именем testAssertPosInfinityNotEqualsNeglnfinity. Я не помню, чтобы я писал этот тест, однако, исходя из имени, могу предположить, что в какой то момент разработки было обнаружено, что код метода assert() инфраструктуры JUnit для чисел с плавающей точкой не делал различия между положительной и отрицательной бесконечностью. Использовав тест, я могу быстро найти код JUnit, осуществляющий сравнение чисел с плавающей точкой, и посмотреть, как осуществляется обработка положительной и отрицательной бесконечности. (На самом деле код выглядит не идеально – для поддержки бесконечности используется условный оператор).</p>
<p>Код тестового метода должен легко читаться и быть максимально прямолинейным. Если вы разрабатываете тест и видите, что его код становится слишком длинным, попробуйте поиграть в «детские шажки». Цель игры – написать самый маленький тестовый метод, который представляет собой реальный прогресс в направлении вашей конечной цели. Размер в три строки, судя по всему, является минимальным размером (если, конечно, вы не хотите делать тест намеренно бессмысленным). И постоянно помните о том, что вы пишете тесты для людей, а не только для компьютера и себя самого.</p>
<p>Патрик Логан (Patrick Logan) рассказал об идее, с которой я намерен поэкспериментировать. Эта идея также описана Макконнеллом (McConnell)<a type="note" l:href="#n_21">[21]</a>, а также Кэйном (Caine) и Гордоном (Gordon)<a type="note" l:href="#n_22">[22]</a>:</p>
<p>В <emphasis>последнее время я фактически постоянно применяю методику «основных тезисов» в любой моей работе. Тестирование не является исключением. Когда я пишу тесты, я прежде всего записываю план из нескольких пунктов – тезисов, – которые я хотел бы реализовать в этом тесте. Например</emphasis>:</p>
<empty-line></empty-line><p>/* Добавить в пространство кортежей<a type="note" l:href="#n_23">[23]</a> */</p>
<p>/* Извлечь из пространства кортежей */</p>
<p>/* Читать из пространства кортежей */</p>
<empty-line></empty-line><p><emphasis>Это самые основные тезисы, однако я добавляю в каждую из этих категорий конкретные тесты. Когда я добавляю тесты, я добавляю в мой список тезисов еще один уровень комментариев:</emphasis></p>
<empty-line></empty-line><p>/* Добавить в пространство кортежей */</p>
<p>/* Извлечь из пространства кортежей */</p>
<p>/** Извлечение несуществующего элемента **/</p>
<p>/** Извлечение существующего элемента **/</p>
<p>/** Извлечение нескольких элементов **/</p>
<p>/* Читать из пространства кортежей */</p>
<empty-line></empty-line><p><emphasis>Как правило, мне хватает двух-трех уровней комментариев. Я не могу представить ситуацию, в которой мне могло бы потребоваться больше уровней. Список тезисов становится документацией контракта для тестируемого класса. Приведенные здесь примеры, конечно же, сокращены, однако в языках программирования, поддерживающих контракты, тезисы могли бы быть более конкретными. (Я не использую какие-либо добавления к Java, обеспечивающие автоматизацию в стиле Eiffel.)</emphasis></p>
<p><emphasis>Сразу же после самого низкого уровня комментариев располагается исходный код теста.</emphasis></p>
<subtitle><emphasis><strong>Тест исключения (Exception Test)</strong></emphasis></subtitle><p>Как можно протестировать ожидаемое исключение? Перехватите исключение и игнорируйте его, тест должен терпеть неудачу только в случае, если исключение не сгенерировано.</p>
<p>Предположим, что мы пишем код, осуществляющий поиск значения. Если значение не обнаружено, мы хотим сгенерировать исключение. Тестирование механизма поиска выполняется относительно просто:</p>
<empty-line></empty-line><p>public void testRate() {</p>
<p>exchange.addRate("USD", "GBP", 2);</p>
<p>int rate = exchange.findRate("USD", "GBP");</p>
<p>assertEquals(2, rate);</p>
<p>}</p>
<empty-line></empty-line><p>Тестирование исключения может оказаться неочевидным. Вот как мы это делаем:</p>
<empty-line></empty-line><p>public void testMissingRate() {</p>
<p>try {</p>
<p>exchange.findRate("USD", "GBP");</p>
<p>fail();</p>
<p>} catch (IllegalArgumentException expected) {</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Если метод findRate() не генерирует исключения, произойдет обращение к методу fail() – это метод xUnit, который докладывает о том, что тест потерпел неудачу. Обратите внимание, что мы перехватываем только то исключение, которое должно быть сгенерировано методом findRate(). Благодаря этому, если будет сгенерировано какое-либо другое (неожиданное для нас) исключение (включая сбой метода assert), мы узнаем об этом.</p>
<subtitle><emphasis><strong>Все тесты (All Tests)</strong></emphasis></subtitle><p>Как можно запустить все тесты вместе? Создайте тестовый набор, включающий в себя все имеющиеся тестовые наборы, – один для каждого пакета (package) и один, объединяющий в себе все тесты пакетов для всего приложения.</p>
<p>Предположим, вы добавили подкласс класса TestCase и в этот подкласс вы добавили тестовый метод. В следующий раз, когда будут выполняться все тесты, добавленный вами тестовый метод также должен быть выполнен. (Во мне опять проснулась привычка действовать в стиле TDD – должно быть, вы заметили, что предыдущее предложение – это эскиз теста, который я, наверное, написал бы, если бы не был занят работой над данной книгой.) К сожалению, в большинстве реализаций xUnit, равно как и в большинстве IDE, не поддерживается стандартный механизм запуска абсолютно всех тестов, поэтому в каждом пакете необходимо определить класс AllTests, который реализует статический метод suite(), возвращающий объект класса TestSuite. Вот класс AllTests для «денежного» примера:</p>
<empty-line></empty-line><p>public class AllTests {</p>
<p>public static void main(String[] args) {</p>
<p>junit.swingui.TestRunner.run(AllTests.class);</p>
<p>}</p>
<p>public static Test suite() {</p>
<p>TestSuite result = new TestSuite("TFD tests");</p>
<p>result.addTestSuite(MoneyTest.class);</p>
<p>result.addTestSuite(ExchangeTest.class);</p>
<p>result.addTestSuite(IdentityRateTest.class);</p>
<p>return result;</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Вы также должны включить в класс AllTests() метод main(), благодаря чему класс можно будет запустить напрямую из IDE или из командной строки.</p>
</section><section><title><p>30. Шаблоны проектирования</p>
</title><p>В чем заключается основная идея шаблонов? Нам кажется, что мы постоянно сталкиваемся с разнообразными, неповторяющимися проблемами, однако на деле оказывается, что большая часть проблем, которые нам приходится решать, обусловлена используемыми нами инструментами, но не основной задачей, которая перед нами стоит<a type="note" l:href="#n_24">[24]</a>. Если исходить из этого предположения, то можно найти (и мы действительно находим) общие проблемы со стандартными решениями, несмотря на все разнообразие контекстов, в рамках которых нам приходится работать.</p>
<p>Использование объектов для организации вычислений – это один из лучших примеров стандартного решения, направленного на устранение множества общих проблем, с которыми программистам приходится сталкиваться при разработке самого разнообразного программного обеспечения. Колоссальный успех шаблонов проектирования (design patterns) является доказательством общности проблем, с которыми сталкиваются программисты, использующие объектно-ориентированные языки программирования<a type="note" l:href="#n_25">[25]</a>. Книга <emphasis>Design Patterns</emphasis> («Паттерны проектирования») имела большой успех, однако ее популярность стала причиной сужения взгляда на шаблоны проектирования. Что я имею в виду? Книга рассматривает дизайн как фазу разработки программы, однако авторы совершенно не учитывают, что рефакторинг – это мощный инструмент формирования дизайна. Дизайн в рамках TDD требует несколько иного взгляда на шаблоны проектирования.</p>
<p>В данной главе я расскажу о нескольких полезных шаблонах проектирования. Безусловно, мое изложение не претендует на полноту. Представленная здесь информация может оказаться полезной при изучении рассматриваемых в книге примеров. Вот краткое перечисление рассмотренных здесь шаблонов:</p>
<p>• «Команда» (Command) – обращение к некоторому коду представляется в виде объекта, а не в виде простого сообщения;</p>
<p>• «Объект-значение» (Value Object) – после создания объекта его значение никогда не меняется, благодаря этому удается избежать проблем, связанных с наложением имен (aliasing);</p>
<p>• «Нуль-объект» (Null Object) – соответствует базовому случаю вычислений объекта;</p>
<p>• «Шаблонный метод» (Template Method) – представляет собой инвариантную последовательность операций, определяемую при помощи абстрактных методов, которые можно переопределить с помощью наследования;</p>
<p>• «Встраиваемый объект» (Pluggable Object) – представляет собой вариацию в виде объекта с двумя реализациями или большим их количеством;</p>
<p>• «Встраиваемый переключатель» (Pluggable Selector) – позволяет избежать создания многочисленных подклассов путем динамического обращения к различным методам для различных экземпляров класса;</p>
<p>• «Фабричный метод» (Factory Method) – вместо конструктора для создания объекта используется специальный метод;</p>
<p>• «Самозванец» (Imposter) – представляет собой вариацию путем создания новой реализации существующего протокола;</p>
<p>• «Компоновщик» (Composite) – композиция объектов ведет себя так же, как один объект;</p>
<p>• «Накапливающий параметр» (Collecting Parameter) – результаты вычислений, выполняемых в разных объектах, накапливаются в специальном объекте, который передается объектам, выполняющим вычисления, в качестве параметра.</p>
<p>В табл. 30.1 описывается, на каких этапах TDD используется тот или иной шаблон проектирования.</p>
<empty-line></empty-line><p><strong>Таблица 30.1.</strong> Использование шаблонов проектирования при разработке через тестирование (TDD)</p>
<image l:href="#i_012.png"></image><empty-line></empty-line><image l:href="#i_013.png"></image><empty-line></empty-line><subtitle><emphasis><strong>Команда (Command)</strong></emphasis></subtitle><p>Что делать, если выполнение некоторой операции представляет собой нечто более сложное, чем простое обращение к методу? Создайте объект, соответствующий этой операции, и обратитесь к этому объекту.</p>
<p>Передача сообщений – это отличный механизм. Языки программирования делают передачу сообщений синтаксически простым действием, а среды разработки позволяют с легкостью манипулировать сообщениями (например, автоматическое выполнение рефакторинга по переименованию метода). Однако в некоторых случаях простой передачи сообщения недостаточно.</p>
<p>Например, представьте, что вы хотели бы занести в журнал запись о том, что сообщение было передано. Для этой цели можно воспользоваться средствами языка (например, методы-обертки), однако простые операции журналирования – это далеко не все, в чем вы можете нуждаться. Представьте, что мы хотим вызвать некоторую процедуру, но несколько позднее. Для этой цели можно создать новый программный поток, сразу же приостановить его работу, а затем, когда это потребуется, запустить его. Однако в подобной ситуации нам придется иметь дело с параллельными потоками, а это может оказаться слишком тяжеловесным подходом.</p>
<p>Для выполнения операций с подобными дополнительными условиями зачастую требуются сложные затратные механизмы. Однако в большинстве случаев мы можем избежать излишней сложности и лишних затрат. Проблему вызова можно решить с помощью более конкретной и гибкой формы, чем сообщение. Для этого достаточно создать специальный объект. Создайте объект, представляющий собой вызов операции. Занесите в этот объект все необходимые параметры операции. Когда операция готова к выполнению, используйте для этого универсальный протокол, например метод run().</p>
<p>Отличным примером использования данного подхода является интерфейс Runnable языка Java:</p>
<empty-line></empty-line><p><strong>Runnable</strong></p>
<p>interface Runnable</p>
<p>public abstract void run();</p>
<empty-line></empty-line><p>В рамках реализации метода run() вы можете делать все, что вам нравится. К сожалению, Java не поддерживает синтаксически легковесного способа создания объектов Runnable и обращения к этим объектам, поэтому они не используются так часто, как их эквиваленты в других языках (блоки или лямбда-выражения в Smalltalk/Ruby или LISP).</p>
<subtitle><emphasis><strong>Объект-значение (Value Object)</strong></emphasis></subtitle><p>Как следует спроектировать объект, который будет широко использоваться, но для которого идентификация не имеет особого значения? Настройте состояние объекта в момент его создания и никогда не меняйте его. В результате выполнения любых операций с данным объектом должен получаться новый объект.</p>
<p>Объектно-ориентированный подход – это великолепная вещь. Надеюсь, я имею право написать эту фразу в данной книге. Объекты являются отличным способом организации логики для последующего понимания и роста. Однако существует одна маленькая проблема (хорошо, хорошо, вообще-то проблем больше, однако сейчас мы коснемся только одной из них).</p>
<p>Представьте, что я – объект и у меня есть прямоугольник (Rectangle). Я вычисляю некоторое значение, зависящее от этого прямоугольника, например его площадь. Чуть позже некто (например, другой объект) вежливо просит меня предоставить ему мой прямоугольник для выполнения некоторой операции. Чтобы не показаться невежливым, я предоставляю ему мой прямоугольник. А через пару мгновений, вы только посмотрите, прямоугольник был модифицирован у меня за спиной! Значение площади, которое я вычислил ранее, теперь не соответствует действительности, и не существует способа известить меня об этом.</p>
<p>Это классический пример проблемы наложения имен (aliasing). Если два объекта ссылаются на один и тот же третий объект и если один из первых двух тем или иным образом изменяет третий, общий для них, объект, второму объекту лучше не полагаться на текущее состояние общего объекта.</p>
<p>Существует несколько способов решения проблемы наложения имен. Во-первых, вы можете никому не отдавать объект, от состояния которого вы зависите. Вместо этого в случае необходимости вы можете создавать копии этого объекта. Такой подход может потребовать слишком много времени и слишком много пространства, кроме того, игнорируется ситуация, когда вы хотите сделать изменения некоторого объекта общими для нескольких других объектов, зависящих от его состояния. Еще одно решение – шаблон «Наблюдатель» (Observer). В этом случае, если вы зависите от состояния некоторого объекта, вы должны предварительно сообщить ему об этом, иначе говоря, зарегистрироваться. Объект, за состоянием которого следят, оповещает все зарегистрированные им объекты-наблюдатели о своем изменении. Шаблон «Наблюдатель» (Observer) может затруднить понимание последовательности выполнения операций, кроме того, логика формирования и удаления зависимостей между объектами выглядит далеко не идеальной.</p>
<p>Еще одно решение предлагает несколько ограничить возможности, которыми обладает типичный объект в рамках ООП. Образно говоря, объект становится «менее чем объектом». Что это значит? Обычные объекты обладают состоянием, которое изменяется с течением времени. Если мы захотим, мы можем запретить им меняться. Если у меня есть объект и я знаю, что он не может измениться, я могу передавать ссылки на этот объект любому другому объекту, не беспокоясь при этом о проблеме наложения имен. Если объект не поддерживает возможности своего изменения, никаких модификаций у меня за спиной не может произойти.</p>
<p>Я помню, как похожая ситуация возникла с целыми числами, когда я впервые изучал язык Smalltalk. Если я изменяю бит 2 на 1, почему все двойки не становятся шестерками?</p>
<empty-line></empty-line><p>a:= 2.</p>
<p>b:= a.</p>
<p>a:= a bitAt: 2 put: 1.</p>
<p><strong>a</strong> =&gt; 6</p>
<p><strong>b</strong> =&gt; 2</p>
<empty-line></empty-line><p>Целые числа – это значения, которые маскируются под объекты. В языке Small-talk это утверждение является истиной для небольших целых чисел и имитируется в случае, если целое число не умещается в машинное слово. Когда я устанавливаю бит, то получаю в свое распоряжение новый объект с установленным битом. Старый объект остается неизменным.</p>
<p>В рамках шаблона «Объект-значение» (Value Object) каждая операция должна возвращать новый объект, а первоначальный объект должен оставаться неизменным. Пользователи должны знать, что они используют объект-значение. В этом случае полученный объект следует сохранить (как в предыдущем примере). Конечно же, из-за необходимости создания новых объектов полученный в результате код может оказаться медленным. Однако в данном случае любые проблемы с производительностью должны решаться в точности так же, как и любые другие проблемы с производительностью: вы должны оценить производительность при помощи тестов с реальными данными, определить, насколько часто производится обращение к медленному коду, выполнить профилирование и определить, какой именно код должен быть оптимизирован и как лучше всего этого достичь.</p>
<p>Я предпочитаю использовать «Объект-значение» (Value Object) в ситуациях, когда операции, выполняемые над объектами, напоминают алгебру. Например, пересечение и объединение геометрических фигур, операции над значениями, с каждым из которых хранится единица измерения, а также операции символьной арифметики. Каждый раз, когда использование «Объект-значение» (Value Object) имеет хоть какой-то смысл, я пытаюсь его использовать, так как результирующий код проще читать и отлаживать.</p>
<p>Все объекты-значения должны реализовать операцию сравнения (а во многих языках подразумевается, что они должны реализовать также операцию хеширования). Если я имею один контракт и другой контракт и они не являются одним и тем же объектом, значит, они не равны. Однако если у меня есть одни пять франков и другие пять франков, для меня не имеет значения тот факт, что это два разных объекта – пять франков и в Африке пять франков – они равны.</p>
<subtitle><emphasis><strong>Нуль-объект (Null Object)</strong></emphasis></subtitle><p>Как реализовать специальные случаи использования объектов? Создать специальный объект, представляющий собой специальный случай. Специальный объект должен обладать точно таким же протоколом, что и обычный объект, но он должен вести себя специальным образом.</p>
<p>В качестве примера рассмотрим код, который я позаимствовал из java.io.File:</p>
<empty-line></empty-line><p><strong>java.io.File</strong></p>
<p>public boolean setReadOnly() {</p>
<p>SecurityManager guard = System.getSecurityManager();</p>
<p>if (guard!= null) {</p>
<p>guard.canWrite(path);</p>
<p>}</p>
<p>return fileSystem.setReadOnly(this);</p>
<p>}</p>
<empty-line></empty-line><p>В классе java.io.File можно обнаружить 18 проверок guard!= null. Я преклоняюсь перед усердием, с которым разработчики библиотек Java стараются сделать файлы безопасными для всего остального мира, однако я также начинаю немножко нервничать. Будут ли программисты Oracle и в будущем столь же аккуратны, чтобы не забыть проверить результат выполнения метода getSecurityManager() на равенство значению null?</p>
<p>В рамках альтернативного решения можно создать новый класс LaxSecurity, который вообще не генерирует исключений:</p>
<empty-line></empty-line><p><strong>LaxSecurity</strong></p>
<p>public void canWrite(String path) {</p>
<p>}</p>
<empty-line></empty-line><p>Если кто-то пытается получить SecurityManager, однако предоставить такой объект нет возможности, вместо него мы возвращаем LaxSecurity:</p>
<empty-line></empty-line><p><strong>SecurityManager</strong></p>
<p>public static SecurityManager getSecurityManager() {</p>
<p>return security == null? new LaxSecurity(): security;</p>
<p>}</p>
<p>Теперь мы можем не беспокоиться о том, что кто-то забудет проверить результат выполнения метода на равенство значению null. Изначальный код становится существенно более чистым:</p>
<empty-line></empty-line><p><strong>File</strong></p>
<p>public boolean setReadOnly() {</p>
<p>SecurityManager security = System.getSecurityManager();</p>
<p>security.canWrite(path);</p>
<p>return fileSystem.setReadOnly(this);</p>
<p>}</p>
<p>Однажды во время выступления на конференции OOPSLA нас с Эр</p>
<p>ихом Гаммой (Erich Gamma) спросили, можно ли использовать «Нуль-объект» (Null Object) в рамках одного из классов JHotDraw. Я принялся рассуждать о преимуществах такой модернизации, в то время как Эрих посчитал, что для этого нам придется увеличить код на десять строк, при этом мы избавимся от одного условного оператора – преимущество сомнительно. (К тому же аудитория была весьма недовольна нашей несогласованностью.)</p>
<subtitle><emphasis><strong>Шаблонный метод (Template Method)</strong></emphasis></subtitle><p>Как можно запрограммировать инвариантную последовательность операций, обеспечив при этом возможность модификации или замены отдельных действий в будущем? Напишите реализацию метода исключительно в терминах других методов.</p>
<p>В программировании существует огромное количество классических последовательностей:</p>
<p>• ввод – обработка – вывод;</p>
<p>• отправить сообщение – принять ответ;</p>
<p>• прочитать команду – вернуть результат.</p>
<p>Нам хотелось бы четко и понятно обозначить универсальность этих последовательностей и при этом обеспечить возможность варьирования реализаций каждого из отдельных этапов.</p>
<p>Поддерживаемый любым объектно-ориентированным языком механизм наследования обеспечивает простой способ определения универсальных последовательностей. В суперклассе создается метод, целиком и полностью написанный в терминах других методов. Каждый из подклассов может реализовать эти методы так, как ему удобнее. Например, базовая последовательность выполнения теста определяется в инфраструктуре JUnit следующим образом:</p>
<empty-line></empty-line><p><strong>TestCase</strong></p>
<p>public void runBare() throws Throwable {</p>
<p>setUp();</p>
<p>try {</p>
<p>runTest();</p>
<p>}</p>
<p>finally {</p>
<p>tearDown();</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Классы, производные от TestCase, могут реализовать setUp(), runTest() и tearDown() так, как им этого хочется.</p>
<p>При использовании шаблона «Шаблонный метод» (Template Method) возникает вопрос: надо ли создавать для подметодов реализации по умолчанию? В TestCase.runBare() все три подметода обладают реализациями по умолчанию:</p>
<p>• методы setUp() и tearDown() не выполняют никаких операций;</p>
<p>• метод runTest() динамически обнаруживает и запускает все тестовые методы, исходя из имени класса-теста.</p>
<p>Если общая последовательность не имеет смысла, когда не определен один из ее этапов, вы должны отметить это, воспользовавшись любой подходящей возможностью используемого вами языка программирования:</p>
<p>• в Java можно объявить подметод абстрактным;</p>
<p>• в Smalltalk создайте реализацию метода, которая генерирует ошибку SubclassResponsibility.</p>
<p>Я не рекомендую изначально проектировать код так, чтобы в нем использовался шаблонный метод. Лучше всего формировать шаблонные методы исходя из накопленного опыта. Каждый раз, когда я говорю себе: «Ага, вот последовательность, а вот – детали реализации», – позднее я всегда обнаруживаю, что мне приходится переделывать созданный мною шаблонный метод, заново перетасовывая код между общим и частным.</p>
<p>Если вы обнаружили два варианта последовательности в двух подклассах, вы должны попытаться постепенно приблизить их друг к другу. После того как вы отделите различающиеся части и выделите общую часть, то, что останется, и есть шаблонный метод. После этого вы можете переместить шаблонный метод в суперкласс и избавиться от дублирования.</p>
<subtitle><emphasis><strong>Встраиваемый объект (Pluggable Object)</strong></emphasis></subtitle><p>Как можно выразить несколько разных вариантов поведения кода? Проще всего использовать явный условный оператор:</p>
<empty-line></empty-line><p>if(circle) then {</p>
<p>… код, относящийся к circle.</p>
<p>} else {</p>
<p>… код, не относящийся к circle</p>
<p>}</p>
<empty-line></empty-line><p>Однако подобный корявый код имеет тенденцию распространяться по всей программе. Если для определения разницы между окружностями и не окружностями вы будете использовать условный оператор хотя бы в одном месте вашего кода, с большой долей уверенности можно сказать, что позднее подобный оператор придется добавить также в другом месте, затем в третьем и т. д.</p>
<p>Вторая по важности задача TDD – устранение дублирования, поэтому вы должны подавить угрозу распространения явных условных операторов в зародыше. Если вы видите, что одно и то же условие проверяется в двух разных местах вашего кода, значит, настало время выполнить базовое объектно-ориентированное преобразование: «Встраиваемый объект» (PluggableObject).</p>
<p>Иногда обнаружить необходимость применения этого шаблона не так просто. Один из самых любимых мною примеров использования встраиваемого объекта был придуман мною и Эрихом Гаммой. Представьте, что мы занимаемся разработкой графического редактора. Если вы когда-нибудь занимались чем-либо подобным, должно быть, вы знаете, что операция выделения объектов обладает несколько усложненной логикой. Если указатель мыши находится над графической фигурой и пользователь нажимает кнопку мыши, значит, последующие перемещения мыши приводят к перемещению фигуры, а при отпускании кнопки мыши выбранная фигура остается на новом месте. Если указатель мыши не находится над какой-либо фигурой, значит, нажав кнопку, пользователь выделяет несколько фигур, последующие перемещения мыши приводят к изменению размера прямоугольника выделения, а при отпускании кнопки мыши фигуры внутри прямоугольника выделения становятся выделенными. Изначальный код выглядит примерно так:</p>
<empty-line></empty-line><p><strong>SelectionTool</strong></p>
<p>Figure selected;</p>
<p>public void mouseDown() {</p>
<p>selected = findFigure();</p>
<p>if (selected!= null)</p>
<p>select(selected);</p>
<p>}</p>
<p>public void mouseMove() {</p>
<p>if (selected!= null)</p>
<p>move(selected);</p>
<p>else</p>
<p>moveSelectionRectangle();</p>
<p>}</p>
<p>public void mouseUp() {</p>
<p>if (selected == null)</p>
<p>selectAll();</p>
<p>}</p>
<empty-line></empty-line><p>В глаза бросаются три похожих условных оператора (я же говорил, что они плодятся, как мухи). Что делать, чтобы избавиться от них? Создаем встраиваемый объект, SelectionMode, обладающий двумя реализациями: SingleSelection и MultipleSelection.</p>
<empty-line></empty-line><p><strong>SelectionTool</strong></p>
<p>SelectionMode mode;</p>
<p>public void mouseDown() {</p>
<p>selected = findFigure();</p>
<p>if (selected!= null)</p>
<p>mode = SingleSelection(selected);</p>
<p>else</p>
<p>mode = MultipleSelection();</p>
<p>}</p>
<p>public void mouseMove() {</p>
<p>mode.mouseMove();</p>
<p>}</p>
<p>public void mouseUp() {</p>
<p>mode.mouseUp();</p>
<p>}</p>
<empty-line></empty-line><p>В языках с явными интерфейсами вы обязаны реализовать интерфейс с двумя (или больше) встраиваемыми объектами.</p>
<subtitle><emphasis><strong>Встраиваемый переключатель (Pluggable Selector)<a type="note" l:href="#n_26">[26]</a></strong></emphasis></subtitle><p>Как обеспечить различающееся поведение разных экземпляров одного и того же класса? Сохраните имя метода в переменной и динамически обращайтесь к этому методу.</p>
<p>Что делать, если у вас есть десять подклассов одного базового класса и в каждом из них реализован только один метод? Может оказаться, что создание подклассов – это слишком тяжеловесный механизм для реализации столь небольших различий в поведении объектов.</p>
<empty-line></empty-line><p>abstract class Report {</p>
<p>abstract void print();</p>
<p>}</p>
<p>class HTMLReport extends Report {</p>
<p>void print() {…</p>
<p>}</p>
<p>}</p>
<p>class XMLReport extends Report {</p>
<p>void print() {…</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Альтернативное решение: создать единственный класс с оператором switch. В зависимости от значения поля происходит обращение к разным методам. Однако в этом случае имя метода упоминается в трех местах:</p>
<p>• при создании экземпляра;</p>
<p>• в операторе switch;</p>
<p>• в самом методе.</p>
<empty-line></empty-line><p>abstract class Report {</p>
<p>String printMessage;</p>
<empty-line></empty-line><p>Report(String printMessage) {</p>
<p>this.printMessage = printMessage;</p>
<p>}</p>
<p>void print() {</p>
<p>switch (printMessage) {</p>
<p>case "printHTML":</p>
<p>printHTML();</p>
<p>break;</p>
<p>case "printXML":</p>
<p>printXML():</p>
<p>break;</p>
<p>}</p>
<p>};</p>
<empty-line></empty-line><p>void printHTML() {</p>
<p>}</p>
<empty-line></empty-line><p>void printXML() {</p>
<p>}</p>
<p>}</p>
<empty-line></empty-line><p>Каждый раз, когда вы добавляете новую разновидность печати, вы должны позаботиться о добавлении нового метода печати и редактировании оператора switch.</p>
<p>Шаблон «Встраиваемый переключатель» (Pluggable Selector) предлагает динамически обращаться к методу с использованием механизма рефлексии:</p>
<empty-line></empty-line><p>void print() {</p>
<p>Method runMethod = getClass(). getMethod(printMessage, null);</p>
<p>runMethod.invoke(this, new Class[0]);</p>
<p>}</p>
<empty-line></empty-line><p>По-прежнему существует весьма неприятная зависимость между создателями отчетов и именами методов печати, однако, по крайней мере, мы избавились от оператора switch.</p>
<p>Естественно, этим шаблоном не следует злоупотреблять. Самая большая связанная с ним проблема состоит в отслеживании вызываемого кода. Используйте встраиваемый переключатель только в случае, когда вы оказались в стандартной ситуации: каждый из подклассов обладает всего одним методом, и у вас есть желание сделать этот код более чистым.</p>
<subtitle><emphasis><strong>Фабричный метод (Factory Method)</strong></emphasis></subtitle><p>Как лучше всего создавать объекты в случае, если вы хотите обеспечить гибкость при создании объектов? Вместо того чтобы использовать конструктор, создайте объект внутри специального метода.</p>
<p>Безусловно, конструкторы являются выразительным инструментом. Если вы используете конструктор, всем, кто читает код, однозначно становится ясно, что вы создаете объект. Однако конструкторы, в особенности в Java, не обеспечивают достаточной гибкости.</p>
<p>В рассмотренном ранее «денежном» примере при создании объекта мы хотели бы возвращать объект иного класса. У нас есть следующий тест:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = new Dollar(5);</p>
<p>assertEquals(new Dollar(10), five.times(2));</p>
<p>assertEquals(new Dollar(15), five.times(3));</p>
<p>}</p>
<empty-line></empty-line><p>Мы хотели бы добавить в программу новый класс Money, однако мы не можем этого сделать, так как для тестирования нам нужен экземпляр класса Dollar. Чтобы решить проблему, достаточно добавить в программу дополнительный уровень перенаправления – метод, который будет возвращать объект иного класса. В этом случае мы сможем оставить выражения assert без изменений:</p>
<empty-line></empty-line><p>public void testMultiplication() {</p>
<p>Dollar five = <strong>Money.dollar(5)</strong>;</p>
<p>assertEquals(new Dollar(10), five.times(2));</p>
<p>assertEquals(new Dollar(15), five.times(3));</p>
<p>}</p>
<empty-line></empty-line><p><strong>Money</strong></p>
<p>static Dollar dollar(int amount) {</p>
<p>return new Dollar(amount);</p>
<p>}</p>
<empty-line></empty-line><p>Такой метод называется <emphasis>фабричным методом</emphasis> (Factory Method), так как он предназначен для создания объектов.</p>
<p>Недостаток этого шаблона заключается в том, что предназначение фабричного метода не очевидно: вы должны помнить о том, что этот метод создает объекты, вместе с тем это обычный метод, а не конструктор. Фабричный метод следует использовать только тогда, когда вы действительно нуждаетесь в гибкости, которую он обеспечивает. В противном случае для создания объектов вполне можно использовать обычные конструкторы.</p>
<subtitle><emphasis><strong>Самозванец (Imposter)</strong></emphasis></subtitle><p>Как можно добавить в программу новую вариацию некоторой функциональности? Создайте новый объект с точно таким же протоколом, как и существующий объект, но с отличающейся реализацией.</p>
<p>При использовании процедурно-ориентированного подхода для решения подобной задачи в программу требуется добавить как минимум один условный оператор. Как было продемонстрировано ранее, при обсуждении шаблона «Встраиваемый переключатель» (Pluggable Selector), такие условные операторы имеют тенденцию плодиться подобно саранче. Чтобы избавиться от дублирования, требуется полиморфизм.</p>
<p>Представьте, что у вас уже есть необходимая инфраструктура. У вас уже есть объект, который реализует необходимую функциональность. Теперь вы хотите, чтобы ваша система делала нечто отличающееся. Если вы обнаружили очевидное место для добавления оператора if и при этом не возникает дублирования какой-либо существующей логики, действуйте смело и решительно. Однако зачастую для добавления вариации требуется внести изменения в код нескольких методов.</p>
<p>Если вы работаете в стиле TDD, решение об использовании самозванца может возникнуть исходя из разных предпосылок. Иногда вы пишете тест и у вас возникает желание реализовать новый сценарий. Однако ни один из существующих объектов не выражает того, что вы хотите выразить. Представьте, что мы тестируем графический редактор и нам уже удалось реализовать корректное рисование прямоугольников:</p>
<empty-line></empty-line><p>testRectangle() {</p>
<p>Drawing d = new Drawing();</p>
<p>d. addFigure(new RectangleFigure(0, 10, 50, 100));</p>
<p>RecordingMedium brush = new RecordingMedium();</p>
<p>d. display(brush);</p>
<p>assertEquals("rectangle 0 10 50 100\n", brush.log());</p>
<p>}</p>
<empty-line></empty-line><p>Теперь мы хотим реализовать рисование овалов. В данном случае необходимость применения шаблона «Самозванец» (Imposter) очевидна: заменяем RectangleFigure на OvalFigure.</p>
<empty-line></empty-line><p>testOval() {</p>
<p>Drawing d = new Drawing();</p>
<p>d. addFigure(new <strong>OvalFigure</strong>(0, 10, 50, 100));</p>
<p>RecordingMedium brush = new RecordingMedium();</p>
<p>d. display(brush);</p>
<p>assertEquals("<strong>oval</strong> 0 10 50 100\n", brush.log());</p>
<p>}</p>
<empty-line></empty-line><p>Как правило, чтобы увидеть необходимость использования этого шаблона еще до начала разработки кода, требуется озарение. Именно озарением можно назвать момент, когда Уорд Каннингэм решил, что вектор объектов Money может вести себя так же, как одиночный объект Money. Сначала можно подумать, что они различаются, однако после вы понимаете, что они одинаковы.</p>
<p>Вот два примера использования «Самозванец» (Imposter) в процессе рефакторинга:</p>
<p>• «Нуль-объект» (Null Object) – вы можете рассматривать отсутствие данных в точности так же, как и присутствие данных;</p>
<p>• «Компоновщик» (Composite) – вы можете рассматривать коллекцию объектов как одиночный объект.</p>
<p>Решение об использовании «Самозванец» (Imposter) в процессе рефакторинга принимается для устранения дублирования, впрочем, целью любого рефакторинга является устранение дублирования.</p>
<subtitle><emphasis><strong>Компоновщик (Composite)</strong></emphasis></subtitle><p>Как лучше всего реализовать объект, чье поведение является композицией функций некоторого набора других объектов? Примените шаблон «Самозванец» (Imposter) – заставьте этот объект вести себя подобно тому, как ведут себя отдельные объекты, входящие в набор.</p>
<p>Мой любимый пример основан на двух объектах: Account (счет) и Transaction (транзакция). Этот пример помимо прочего демонстрирует некоторую противоречивость шаблона «Компоновщик» (Composite), но об этом позже. В объекте Transaction хранится изменение величины счета (безусловно, транзакция – это более сложный и интересный объект, однако на данный момент мы ограничимся лишь мизерной долей его возможностей):</p>
<empty-line></empty-line><p><strong>Transaction</strong></p>
<p>Transaction(Money value) {</p>
<p>this.value = value;</p>
<p>}</p>
<empty-line></empty-line><p>Объект Accout вычисляет баланс счета путем суммирования значений относящихся к нему объектов Transaction:</p>
<empty-line></empty-line><p><strong>Account</strong></p>
<p>Transaction transactions[];</p>
<p>Money balance() {</p>
<p>Money sum = Money.zero();</p>
<p>for (int i = 0; i &lt; transactions.length; i++)</p>
<p>sum = sum.plus(transactions[i].value);</p>
<p>return sum;</p>
<p>}</p>
<empty-line></empty-line><p>Все выглядит достаточно просто:</p>
<p>• в объектах Transaction хранятся значения;</p>
<p>• в объекте Account хранится баланс.</p>
<p>Теперь самое интересное. У клиента есть несколько счетов, и он хочет узнать общий баланс по всем этим счетам. Первая мысль, которая приходит в голову: создать новый класс OverallAccount, который суммирует балансы для некоторого набора объектов Account. Дублирование! Дублирование!</p>
<p>А что, если классы Account и Transaction будут поддерживать один и тот же интерфейс? Давайте назовем его Holding (сбережения), потому что сейчас мне не удается придумать что-либо лучшее:</p>
<empty-line></empty-line><p><strong>Holding</strong></p>
<p>interface Holding</p>
<p>Money balance();</p>
<empty-line></empty-line><p>Чтобы реализовать метод balance() в классе Transaction, достаточно вернуть хранящееся в этом классе значение:</p>
<empty-line></empty-line><p><strong>Transaction</strong></p>
<p>Money balance() {</p>
<p>return value;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь в классе Account можно хранить не транзации, а объекты Holding:</p>
<empty-line></empty-line><p><strong>Account</strong></p>
<p>Holding holdings[];</p>
<p>Money balance() {</p>
<p>Money sum = Money.zero();</p>
<p>for (int i = 0; i &lt; holdings.length; i++)</p>
<p>sum = sum.plus(holdings[i].balance());</p>
<p>return sum;</p>
<p>}</p>
<empty-line></empty-line><p>Проблема, связанная с созданием класса OverallAccount, испарилась в воздухе. Объект OverallAccount – это просто еще один объект Account, в котором хранятся не транзакции, а другие объекты Account.</p>
<p>Теперь о противоречивости. В приведенном примере хорошо чувствуется запах шаблона «Компоновщик» (Composite). В реальном мире транзакция не может содержать в себе баланс. В данном случае программист идет на уловку, которая совершенно не логична с точки зрения всего остального мира. Вместе с тем преимущества подобного дизайна неоспоримы, и ради этих преимуществ можно пожертвовать некоторым концептуальным несоответствием. Если присмотреться, подобные несоответствия встречаются нам на каждом шагу: папки (Folders), в которых содержатся другие папки (Folders), наборы тестов (TestSuites), в которых содержатся другие наборы тестов (TestSuites), рисунки (Drawings), в которых содержатся другие рисунки (Drawings). Любая из этих метафор недостаточно хорошо соответствует взаимосвязи между вещами в реальном мире, однако все они существенно упрощают код.</p>
<p>Я вынужден был длительное время экспериментировать с шаблоном «Компоновщик» (Composite), прежде чем научился понимать, когда его следует использовать, а когда – нет. Наверное, вы уже поняли, что я не могу предоставить вам однозначных рекомендаций относительно решения проблемы, в каких ситуациях коллекция объектов является просто коллекцией объектов, а в каких это – объект-компоновщик. Хорошая новость состоит в том, что, когда вы достаточно хорошо освоите рефакторинг, вы наверняка сможете обнаружить возникновение дублирования, воспользоваться шаблоном «Компоновщик» (Composite) и обнаружить, что код существенно упростился.</p>
<subtitle><emphasis><strong>Накапливающий параметр (Collecting Parameter)</strong></emphasis></subtitle><p>Как можно сформировать результат операции, если она распределена между несколькими объектами? Используйте параметр, в котором будут накапливаться результаты операции.</p>
<p>Простым примером является интерфейс java.io.Externalizable. Метод writeExternal этого интерфейса осуществляет запись объекта и всех объектов, на которые ссылается данный объект. Чтобы обеспечить общую запись, все записываемые объекты должны взаимодействовать друг с другом, поэтому методу передается параметр – объект класса ObjectOutput, – в котором осуществляется накопление:</p>
<empty-line></empty-line><p><strong>java.io.Externalizable</strong></p>
<p>public interface Externalizable extends java.io.Serializable {</p>
<p>void writeExternal(ObjectOutput out) throws IOException;</p>
<p>}</p>
<empty-line></empty-line><p>Добавление параметра-накопителя зачастую является последствием использования шаблона «Компоновщик» (Composite). В начале разработки JUnit не было необходимости накапливать результаты выполнения нескольких тестов в объекте TestResult до тех пор, пока в инфраструктуру не была добавлена возможность создания и запуска нескольких тестов.</p>
<p>Необходимость использования параметра-накопителя возникает в ситуации, когда возрастает сложность объекта, получаемого в результате комплексной операции. Например, представьте, что нам необходимо реализовать вывод объекта Expression на экран в виде строки символов. Если обычная, не структурированная строка – это все, что нам нужно, значит, конкатенации будет вполне достаточно:</p>
<empty-line></empty-line><p>testSumPrinting() {</p>
<p>Sum sum = new Sum(Money.dollar(5), Money.franc(7));</p>
<p>assertEquals("5 USD + 7 CHF", sum.toString());</p>
<p>}</p>
<p>String toString() {</p>
<p>return augend + " + " + addend;</p>
<p>}</p>
<empty-line></empty-line><p>Однако если мы хотим отобразить объект Expression в виде древовидной структуры, код может выглядеть следующим образом:</p>
<empty-line></empty-line><p>testSumPrinting() {</p>
<p>Sum sum = new Sum(Money.dollar(5), Money.franc(7));</p>
<p>assertEquals("+\n\t5 USD\n\t7 CHF", sum.toString());</p>
<p>}</p>
<empty-line></empty-line><p>В этом случае придется воспользоваться параметром-накопителем:</p>
<empty-line></empty-line><p>String toString() {</p>
<p>IndentingStream writer = new IndentingStream();</p>
<p>toString(writer);</p>
<p>return writer.contents();</p>
<p>}</p>
<empty-line></empty-line><p>void toString(IndentingWriter writer) {</p>
<p>writer.println("+");</p>
<p>writer.indent();</p>
<p>augend.toString(writer);</p>
<p>writer.println();</p>
<p>addend.toString(writer);</p>
<p>writer.exdent();</p>
<p>}</p>
<subtitle><emphasis><strong>Одиночка (Singleton)</strong></emphasis></subtitle><p>Как можно реализовать глобальную переменную в языке, в котором не поддерживаются глобальные переменные? Не следует этим заниматься. Ваша программа скажет вам большое спасибо, если вместо этого вы еще раз хорошенько обдумаете дизайн и откажетесь от мысли использовать глобальные переменные.</p>
</section><section><title><p>31. Рефакторинг</p>
</title><p>Рассматриваемые здесь шаблоны помогут изменить дизайн системы маленькими шажками.</p>
<p>В рамках TDD рефакторинг<a type="note" l:href="#n_27">[27]</a> используется интересным образом. Обычно рефакторинг не может изменить семантику программы ни при каких условиях. В рамках TDD условия семантики формулируются при помощи тестов, которые уже выполняются успешно. Таким образом, в рамках TDD мы можем, например, заменить константы переменными и с чистой совестью назвать эту процедуру рефакторингом, потому что набор успешных тестов при этом не изменился. Однако набор успешных тестов может состоять всего из одного теста. Возможно, семантика программы должна описываться большим количеством тестов. Возможно также, что некоторые из этих потенциальных тестов в результате выполнения рефакторинга перестали бы срабатывать, если бы они существовали. Однако их нет, поэтому мы о них не беспокоимся.</p>
<p>Отсюда следует, что на программиста, работающего в стиле TDD, возлагается важная обязанность: он должен иметь достаточное количество тестов, описывающих семантику программы. Достаточное настолько, насколько он может судить на момент завершения работы над кодом. Необходимо понимать, что рефакторинг выполняется не с учетом всех существующих тестов, а с учетом всех возможных тестов. Фраза: «Я знаю, что там была проблема, но все тесты выполнились успешно, поэтому я посчитал код завершенным и интегрировал его в систему», – не может считаться оправданием. Пишите больше тестов.</p>
<subtitle><emphasis><strong>Согласование различий (Reconcile Differences)</strong></emphasis></subtitle><p>Как можно унифицировать два схожих фрагмента кода? Постепенно делайте их все более похожими друг на друга. Унифицируйте их только в случае, если они абсолютно идентичны.</p>
<p>Подчас рефакторинг – это весьма нервная работа. Простые изменения в коде очевидны. Если я извлекаю метод и делаю это механически корректно, вероятность того, что поведение системы изменится, чрезвычайно мала. Однако некоторые из изменений заставляют внимательно анализировать последовательность выполнения операций и порядок модификации данных. Построив длинную цепочку умозаключений, вы приходите к выводу, что запланированное вами изменение кода, скорее всего, не приведет к изменению поведения системы. Однако любой подобный рефакторинг уменьшает количество волос на вашей голове.</p>
<p>Сложные изменения – это именно то, чего мы пытаемся избежать, когда придерживаемся стратегии маленьких шажков и конкретной обратной связи. Полностью избежать сложных изменений невозможно, однако можно уменьшить их влияние на остальной код.</p>
<p>Подобные изменения возникают на разных уровнях:</p>
<p>• Два цикла выглядят похоже. Если вы сделаете их идентичными, вы сможете объединить их в единый цикл.</p>
<p>• Две ветви условного оператора выглядят похоже. Сделав их идентичными, вы сможете избавиться от условного оператора.</p>
<p>• Два метода выглядят похоже. Сделав их идентичными, вы сможете избавиться от одного из них.</p>
<p>• Два класса выглядят похоже. Сделав их идентичными, вы сможете избавиться от одного из них.</p>
<p>Иногда задачу согласования различий удобнее решать в обратном порядке. Иными словами, вы представляете себе самый тривиальный последний этап этой процедуры, а затем двигаетесь в обратном направлении. Например, если вы хотите избавиться от нескольких подклассов, наиболее тривиальный последний шаг можно будет выполнить в случае, если подкласс ничего не содержит. Тогда везде, где используется подкласс, можно будет использовать суперкласс, при этом поведение системы не изменится. Что надо сделать, чтобы очистить подкласс от методов и данных? Для начала метод можно сделать полностью идентичным одному из методов суперкласса. Постепенно переместив все методы и все данные в суперкласс, вы сможете заменить ссылки на подкласс ссылками на суперкласс. После этого подкласс можно уничтожить.</p>
<subtitle><emphasis><strong>Изоляция изменений (Isolate Change)</strong></emphasis></subtitle><p>Как можно модифицировать одну часть метода или объекта, состоящего из нескольких частей? Сначала изолируйте изменяемую часть.</p>
<p>Мне приходит в голову аналогия с хирургической операцией: фактически все тело оперируемого пациента покрыто специальной простыней за исключением места, на котором, собственно, осуществляется операция. Благодаря такому покрытию хирург имеет дело с фиксированным набором переменных. Перед выполнением операции врачи сколь угодно долго могут обсуждать, какое влияние на здоровье пациента оказывает тот или иной орган, однако во время операции внимание хирурга должно быть сфокусировано.</p>
<p>Вы можете обнаружить, что после того, как вы изолировали изменение, а затем внесли это изменение в код, результат получился настолько тривиальным, что вы можете отменить изоляцию. Например, если мы обнаружили, что внутри метода findRate() должно присутствовать всего одно действие – возврат значения поля, мы можем вместо обращений к методу findRate() напрямую обратиться к полю. В результате метод findRate() можно будет удалить. Однако подобные изменения не следует выполнять автоматически. Постарайтесь найти баланс между затратами, связанными с использованием дополнительного метода, и пользой, которую приносит дополнительная концепция, добавленная в код.</p>
<p>Для изоляции изменений можно использовать несколько разных способов. Наиболее часто используется шаблон «Выделение метода» (Extract Method), помимо него также используются «Выделение объекта» (Extract Object) и «Метод в объект» (Method Object).</p>
<subtitle><emphasis><strong>Миграция данных (Migrate Data)</strong></emphasis></subtitle><p>Как можно перейти от одного представления к другому? Временно дублируйте данные.</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>Вначале рассмотрим версию «от внутреннего к внешнему». В рамках этого подхода вы изменяете вначале внутреннее представление, а затем внешний интерфейс.</p>
<p>1. Создайте переменную экземпляра в новом формате.</p>
<p>2. Инициализируйте переменную нового формата везде, где инициализируется переменная старого формата.</p>
<p>3. Используйте переменную нового формата везде, где используется переменная старого формата.</p>
<p>4. Удалите старый формат.</p>
<p>5. Измените внешний интерфейс так, чтобы использовать новый формат.</p>
<p>Однако в некоторых ситуациях удобнее сначала изменить API. В этом случае рефакторинг выполняется следующим образом.</p>
<p>1. Добавьте параметр в новом формате.</p>
<p>2. Обеспечьте преобразование параметра в новом формате во внутреннее представление, обладающее старым форматом.</p>
<p>3. Удалите параметр в старом формате.</p>
<p>4. Замените использование старого формата на использование нового формата.</p>
<p>5. Удалите старый формат.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Проблема миграции данных возникает каждый раз, когда используется шаблон «От одного ко многим» (One to Many). Предположим, что мы хотим реализовать объект TestSuite, используя шаблон «От одного ко многим» (One to Many). Мы можем начать так:</p>
<empty-line></empty-line><p>def testSuite(self):</p>
<p>suite = TestSuite()</p>
<p>suite.add(WasRun("testMethod"))</p>
<p>suite.run(self.result)</p>
<p>assert("1 run, 0 failed" == self.result.summary())</p>
<empty-line></empty-line><p>Чтобы реализовать этот тест, начнем с одного элемента test:</p>
<empty-line></empty-line><p>class TestSuite:</p>
<p>def add(self, test):</p>
<p>self.test = test</p>
<p>def run(self, result):</p>
<p>self.test.run(result)</p>
<empty-line></empty-line><p>Теперь мы приступаем к дублированию данных. Вначале инициализируем коллекцию тестов:</p>
<empty-line></empty-line><p><strong>TestSuite</strong></p>
<p>def __init__(self):</p>
<p>self.tests = []</p>
<empty-line></empty-line><p>В каждом месте, где инициализируется поле test, добавляем новый тест в коллекцию:</p>
<empty-line></empty-line><p><strong>TestSuite</strong></p>
<p>def add(self, test):</p>
<p>self.test = test</p>
<p>self.tests.append(test)</p>
<empty-line></empty-line><p>Теперь мы используем коллекцию тестов вместо единичного теста. Исходя из существующего набора тестов данное преобразование можно считать рефакторингом (оно не нарушает семантику), так как в составе коллекции присутствует только один элемент.</p>
<empty-line></empty-line><p><strong>TestSuite</strong></p>
<p>def run(self, result):</p>
<p>for test in self.tests:</p>
<p>test.run(result)</p>
<empty-line></empty-line><p>Теперь можно удалить не используемую переменную экземпляра test:</p>
<empty-line></empty-line><p><strong>TestSuite</strong></p>
<p>def add(self, test):</p>
<p>self.tests.append(test)</p>
<empty-line></empty-line><p>Поэтапную миграцию данных можно использовать также при переходе между эквивалентными форматами, использующими различные протоколы, например, если речь идет о Java, при переходе от Vector/Enumerator к Collection/Iterator.</p>
<subtitle><emphasis><strong>Выделение метода (Extract Method)</strong></emphasis></subtitle><p>Как длинный сложный метод можно сделать простым для чтения? Выделите небольшую часть длинного метода в отдельный метод и обратитесь к этому методу из длинного метода.</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>Выделение метода на самом деле является несколько более сложным атомарным рефакторингом. Здесь я опишу самый типичный случай. К счастью, многие среды разработки поддерживают автоматическое выполнение этого рефакторинга. Итак, чтобы выделить метод:</p>
<p>1. Определите фрагмент кода, который можно выделить в отдельный метод. Хорошими кандидатами являются тела циклов, сами циклы, а также ветви условных операторов.</p>
<p>2. Убедитесь, что внутри этого фрагмента не происходит присваивания значений временным переменным, объявленным вне области видимости, соответствующей этому фрагменту.</p>
<p>3. Скопируйте код из старого метода в новый. Скомпилируйте его.</p>
<p>4. Для каждой временной переменной или параметра первоначального метода, используемого в новом методе, добавьте параметр в новый метод.</p>
<p>5. Сделайте так, чтобы в нужном месте старый метод обращался к новому методу.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Я использую «Выделение метода» (Extract Method), когда пытаюсь понять сложный код. «Значит так, этот кусок кода делает вот это. А этот кусок делает это. К чему мы там дальше обращаемся?» Через полчаса код будет выглядеть гораздо лучше, ваш партнер начнет понимать, что вы действительно оказываете ему помощь, а вы – существенно лучше понимать, что же все-таки происходит внутри кода.</p>
<p>Я использую выделение метода, чтобы избавиться от дублирования, когда вижу, что два метода обладают сходными участками кода. В этом случае я выделяю схожие участки в отдельный метод. (Браузер рефакторинга для Smalltalk – Refactoring Browser – выполняет еще более полезную задачу: он просматривает код в поисках метода, аналогичного коду, который вы намерены выделить, и в случае, если такой метод уже есть, предлагает использовать уже существующий метод вместо того, чтобы создавать новый.)</p>
<p>Разделение методов на множество мелких кусочков может зайти слишком далеко. Если я не вижу, куда идти дальше, я часто использую шаблон «Встраивание метода» (Inline Method), чтобы собрать код в одном месте и увидеть новый, более удобный способ разделения.</p>
<subtitle><emphasis><strong>Встраивание метода (Inline Method)</strong></emphasis></subtitle><p>Как можно упростить код, если становится сложно уследить за последовательностью передачи управления от метода к методу? Замените обращение к методу кодом этого метода.</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>1. Скопируйте код метода в буфер обмена.</p>
<p>2. Вставьте код метода вместо обращения к методу.</p>
<p>3. Замените все формальные параметры фактическими. Если, например, вы передаете reader.getNext(), то есть выражение, обладающее побочным эффектом, будьте осторожны и присвойте полученное значение временной переменной.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Один из моих рецензентов пожаловался на сложность кода в первой части книги, который требует от объекта Bank преобразовать объект Expression в объект Money.</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>Money five = Money.dollar(5);</p>
<p>Expression sum = five.plus(five);</p>
<p>Bank bank = new Bank();</p>
<p>Money reduced = bank.reduce(sum, "USD");</p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>«Это слишком сложно. Почему бы не реализовать преобразование в самом объекте Money?» Ну что же, поставим эксперимент. Как это сделать? Давайте встроим метод Bank.reduce() и посмотрим, как это будет выглядеть:</p>
<empty-line></empty-line><p>public void testSimpleAddition() {</p>
<p>Money five = Money.dollar(5);</p>
<p>Expression sum = five.plus(five);</p>
<p>Bank bank = new Bank();</p>
<p>Money reduced = <strong>sum.reduce(bank, «USD»);</strong></p>
<p>assertEquals(Money.dollar(10), reduced);</p>
<p>}</p>
<empty-line></empty-line><p>Возможно, вторая версия понравится вам больше, возможно, нет. Важно понимать, что при помощи шаблона «Встраивание метода» (Inline Method) вы можете экспериментировать с последовательностью выполнения действий. Когда я выполняю рефакторинг, я формирую у себя в голове мысленную картину системы с кусками логики и потоком выполнения программы, перетекающим от одного объекта к другому объекту. Когда мне кажется, что я вижу нечто многообещающее, я использую рефакторинг, чтобы попробовать это и увидеть результат.</p>
<p>В разгаре битвы я могу вдруг обнаружить, что попался в ловушку собственной гениальности. (Не буду говорить, насколько часто это происходит.) Когда это происходит, я использую «Встраивание метода» (Inline Method), чтобы разобраться в той путанице, которую я создал: «Так, этот объект обращается к этому, этот к этому… не могу понять, что же здесь происходит?» Я встраиваю несколько уровней абстракции и смотрю, что же на самом деле происходит. После этого я могу заново выделить абстракцию, использовав более удобный способ.</p>
<subtitle><emphasis><strong>Выделение интерфейса (Extract Interface)</strong></emphasis></subtitle><p>Как создать альтернативные реализации операций в языке Java? Создайте интерфейс, в котором будут содержаться общие операции.</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>1. Напишите объявление интерфейса. Иногда в качестве имени интерфейса используется имя существующего класса. В этом случае вы должны предварительно переименовать класс.</p>
<p>2. Сделайте так, чтобы существующий класс реализовывал объявленный вами интерфейс.</p>
<p>3. Добавьте в интерфейс все обязательные методы. В случае необходимости измените режим видимости методов класса.</p>
<p>4. Там, где это возможно, измените объявления с класса на интерфейс.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Иногда необходимость выделения интерфейса возникает в случае, когда вы переходите от одной реализации к другой. Например, у вас есть класс Rectangle (прямоугольник), и вы хотите создать класс Oval (овал) – в этом случае вы создаете интерфейс Shape (фигура). В подобных ситуациях подобрать имя для интерфейса, как правило, несложно. Однако иногда приходится изрядно помучиться, прежде чем обнаружится подходящая метафора.</p>
<p>Иногда, когда нужно выделить интерфейс, вы используете шаблон «Тестирование обработки ошибок» (Crash Test Dummy) или «Поддельный объект» (Mock Object). В этом случае подбор подходящего имени выполняется сложнее, так как в вашем распоряжении лишь один пример использования интерфейса. В подобных случаях у меня возникает соблазн наплевать на информативность и назвать интерфейс IFile, а реализующий его класс – File. Однако я приучил себя останавливаться на мгновение и размышлять о том, достаточно ли хорошо я понимаю то, над чем работаю? Возможно, интерфейс лучше назвать File, а реализующий его класс – DiskFile, так как соответствующая реализация основана на том, что данные, содержащиеся в файле, хранятся на жестком диске.</p>
<subtitle><emphasis><strong>Перемещение метода (Move Method)</strong></emphasis></subtitle><p>Как можно переместить метод в новое место, где он должен находиться? Добавьте его в класс, которому он должен принадлежать, затем обратитесь к нему.</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>1. Скопируйте метод в буфер обмена.</p>
<p>2. Вставьте метод в целевой класс. Присвойте ему подобающее имя. Скомпилируйте его.</p>
<p>3. Если внутри метода происходит обращение к первоначальному объекту, добавьте параметр, при помощи которого методу будет передаваться этот объект. Если внутри метода происходит обращение к переменным-членам первоначального объекта, передавайте их в виде параметров. Если внутри метода переменным-членам первоначального объекта присваиваются значения, вы должны отказаться от идеи переноса метода в новый объект.</p>
<p>4. Замените тело первоначального метода обращением к новому методу.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Это один из моих самых любимых шаблонов рефакторинга, выполняемых в процессе консультирования. Дело в том, что он наиболее эффективно демонстрирует неправильные предположения относительно дизайна кода. Вычисление площади – это обязанность объекта Shape (фигура):</p>
<empty-line></empty-line><p><strong>Shape</strong></p>
<p>…</p>
<p>int width = bounds.right() – bounds.left();</p>
<p>int height = bounds.bottom() – bounds.top();</p>
<p>int area = width * height;</p>
<p>…</p>
<empty-line></empty-line><p>Каждый раз, когда я вижу, что внутри метода, принадлежащего одному объекту, происходит обращение к нескольким методам другого объекта, я начинаю смотреть на код с подозрением. В данном случае я вижу, что в методе, принадлежащем объекту Shape, происходит обращение к четырем методам объекта bounds (класс Rectangle). Пришло время переместить эту часть метода в класс Rectangle:</p>
<empty-line></empty-line><p><strong>Rectangle</strong></p>
<p>public int area() {</p>
<p>int width = this.right() – this.left();</p>
<p>int height = this.bottom() – this.top();</p>
<p>return width * height;</p>
<p>}</p>
<empty-line></empty-line><p><strong>Shape</strong></p>
<p>…</p>
<p>int area = bounds.area();</p>
<p>…</p>
<empty-line></empty-line><p>Шаблон рефакторинга «Перемещение метода» (Move Method) обладает тремя важными преимуществами:</p>
<p>• Очень легко увидеть необходимость применения этого вида рефакторинга, при этом не требуется глубокое понимание смысла кода. Как только вы увидите два или больше сообщения, адресованные другому объекту, значит, можно смело приступать.</p>
<p>• Механика выполнения рефакторинга быстра и безопасна.</p>
<p>• Результаты зачастую приводят к просветлению. «Но класс Rectangle не выполняет никаких вычислений… О! Теперь я вижу. Так действительно лучше.»</p>
<p>Иногда возникает желание переместить только часть метода. Вы можете вначале выделить метод, переместить весь метод, а затем встроить метод в первоначальный класс. Или вы можете придумать способ сделать все это за один шаг.</p>
<subtitle><emphasis><strong>Метод в объект (Method Object)</strong></emphasis></subtitle><p>Как лучше всего реализовать сложный метод, использующий несколько параметров и локальных переменных? Преобразуйте метод в отдельный объект.</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>1. Создайте класс с таким же количеством параметров, как и оригинальный метод.</p>
<p>2. Сделайте локальные переменные метода переменными экземпляра нового класса.</p>
<p>3. Определите в новом классе метод с именем run(). Тело этого метода будет таким же, как и тело оригинального метода.</p>
<p>4. В оригинальном методе создайте новый объект и обратитесь к методу run() этого объекта.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Объекты-методы полезны в качестве подготовительного этапа перед добавлением в систему абсолютно нового вида внутренней логики. Например, представьте, что для вычисления общего денежного потока используется несколько разных методов, позволяющих учесть в вычислениях несколько разных компонентов общего денежного потока. Вначале можно создать объект-метод, вычисляющий общий денежный поток первым способом. Затем можно описать следующий способ вычислений при помощи тестов меньшего масштаба. После этого добавление в программу нового способа вычислений будет несложным делом.</p>
<p>Объекты-методы также позволяют упростить код, в отношении которого неудобно использовать шаблон «Выделение метода» (Extract Method). В некоторых ситуациях вы вынуждены иметь дело с блоком кода, который работает с обширным набором временных переменных и параметров, и каждый раз, когда вы пытаетесь выделить хотя бы часть этого кода в отдельный метод, вы вынуждены переносить в новый метод пять или шесть временных переменных и параметров. Получившийся выделенный метод выглядит ничем не лучше, чем первоначальный код, так как его сигнатура слишком длинна. В результате создания объекта-метода вы получаете новое пространство имен, в рамках которого можете извлекать методы, без необходимости передачи в них каких-либо параметров.</p>
<subtitle><emphasis><strong>Добавление параметра (Add Parameter)</strong></emphasis></subtitle><p>Как можно добавить в метод новый параметр?</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>1. Если метод входит в состав интерфейса, сначала добавьте параметр в интерфейс.</p>
<p>2. Воспользуйтесь сообщениями компилятора, чтобы узнать, в каких местах происходит обращение к данному методу. В каждом из этих мест внесите необходимые изменения в вызывающий код.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Добавление параметра зачастую связано с расширением функциональности. Чтобы обеспечить успешное выполнение первого теста, вы написали код без параметра, однако далее условия изменились, и для корректного выполнения вычислений необходимо принять во внимание дополнительные данные.</p>
<p>Добавление параметра также может быть вызвано необходимостью миграции от одного представления данных к другому. Вначале вы добавляете параметр, затем удаляете из кода все ссылки на старый параметр, затем удаляете сам старый параметр.</p>
<subtitle><emphasis><strong>Параметр метода в параметр конструктора (Method Parameter to Constructor Parameter)</strong></emphasis></subtitle><p>Как переместить параметр из метода или методов в конструктор?</p>
<empty-line></empty-line><p><strong>Как</strong></p>
<p>1. Добавьте параметр в конструктор.</p>
<p>2. Добавьте в класс переменную экземпляра с тем же именем, что и параметр.</p>
<p>3. Установите значение переменной в конструкторе.</p>
<p>4. Одну за другой преобразуйте ссылки parameter в ссылки this.parameter.</p>
<p>5. Когда в коде не останется ни одной ссылки на параметр, удалите параметр из метода.</p>
<p>6. После этого удалите ненужный теперь префикс this.</p>
<p>7. Присвойте переменной подходящее имя.</p>
<empty-line></empty-line><p><strong>Зачем</strong></p>
<p>Если вы передаете один и тот же параметр нескольким разным методам одного и того же объекта, вы можете упростить API, передав параметр только один раз (устранив дублирование). Напротив, если вы обнаружили, что некоторая переменная экземпляра используется только в одном методе объекта, вы можете выполнить обратный рефакторинг.</p>
<p>27 Fowler, Martin. <emphasis>Refactoring: Improving the Design of Existing Code.</emphasis> Boston: Addison-Wesley, 1999. Русское издание: Фаулер. М. <emphasis>Рефакторинг: улучшение существующего кода.</emphasis> СПб.: Символ-Плюс, 2003</p>
</section><section><title><p>32. Развитие навыков TDD</p>
</title><p>В данной главе я намерен сформулировать несколько вопросов, над которыми полезно подумать, если вы намерены интегрировать TDD в свой процесс разработки. Некоторые из вопросов просты, другие требуют тщательного обдумывания. Ответы на некоторые из этих вопросов вы найдете здесь же, однако иногда, чтобы ответить на некоторый вопрос, вам придется провести собственные исследования.</p>
<subtitle><emphasis><strong>Насколько большими должны быть шаги?</strong></emphasis></subtitle><p>В этом вопросе на самом деле скрыто два вопроса:</p>
<p>• Какой объем функциональности должен охватывать каждый тест?</p>
<p>• Как много промежуточных стадий должно быть преодолено в процессе каждого сеанса рефакторинга?</p>
<p>Вы можете писать тесты так, что каждый из них будет требовать добавления в функциональный код единственной строки и выполнения небольшого рефакторинга. Вы также можете писать тесты так, что каждый из них будет требовать добавления в функциональный код сотен строк, при этом у вас будут уходить часы на рефакторинг. Какой из этих путей лучше?</p>
<p>Часть ответа состоит в том, что вы должны уметь работать и так и этак. Общая тенденция TDD очевидна – чем меньше шаги, тем лучше. В данной книге мы занимались разработкой маленьких тестов на уровне отдельных фрагментов программы. Однако некоторые программисты экспериментируют в области разработки программ, исходя из тестов на уровне всего приложения.</p>
<p>Если вы только приступаете к освоению рефакторинга, вы должны двигаться маленькими шажками. Процесс ручного рефакторинга чреват ошибками. Чем больше ошибок вы наделаете, тем меньшим будет ваше желание выполнять рефакторинг в дальнейшем. После того как вы 20 раз проделаете рефакторинг малюсенькими шажками, можете приступать к экспериментам по удлинению этих шажков.</p>
<p>Автоматизация существенно ускоряет процессы, связанные с рефакторингом. То, что раньше требовало выполнения 20 маленьких шагов вручную, теперь становится единственным пунктом в меню. Количество изменений, выполняемых в ходе сеанса рефакторинга увеличивается на порядок, и это неизменно сказывается на качестве. Когда вы знаете, что в вашем распоряжении великолепный инструмент, вы становитесь более агрессивным при выполнении рефакторинга. Вы пытаетесь ставить больше экспериментов и смотреть, какой способ структурирования кода лучше.</p>
<p>На момент написания данной книги браузер рефакторинга Refactoring Browser for Smalltalk по-прежнему является наилучшим инструментом в этой категории. В настоящее время многие среды разработки для Java поддерживают развитые средства рефакторинга. Кроме того, поддержка рефакторинга появилась и в других языках и средах разработки.</p>
<subtitle><emphasis><strong>Что не подлежит тестированию?</strong></emphasis></subtitle><p>Флип предложил высказывание, которое может служить ответом на этот вопрос: «Пишите тесты до тех пор, пока страх не превратится в скуку». Высказывание подразумевает, что вы должны найти ответ сами. Однако вы читаете эту книгу для того, чтобы найти в ней ответы на вопросы, поэтому попробуйте воспользоваться следующим списком. Тестировать следует:</p>
<p>• условные операторы;</p>
<p>• циклы;</p>
<p>• операции;</p>
<p>• полиморфизм.</p>
<p>Однако только те из них, которые вы написали сами. Не тестируйте чужой код, если только у вас нет причин не доверять ему. В некоторых ситуациях недостатки (можно сказать жестче: «ошибки») во внешнем коде заставляют добавлять дополнительную логику в разрабатываемый вами код. Надо ли тестировать подобное поведение внешнего кода? Иногда я документирую непредсказуемое поведение (ошибку) внешнего кода при помощи теста, который перестанет выполняться, если в следующей версии внешнего кода ошибка будет исправлена.</p>
<subtitle><emphasis><strong>Как определить качество тестов?</strong></emphasis></subtitle><p>Тесты – это канарейка, которую берут в угольную шахту, чтобы по ее поведению определить присутствие запаха плохого дизайна. Далее перечисляются некоторые атрибуты тестов, которые указывают на то, что дизайн тестируемого кода начинает плохо пахнуть:</p>
<p>• Длинный код инициализации. Если вы вынуждены написать сотни строк кода, создавая объекты для одного простого оператора assert(), значит, что-то не так, значит, ваши объекты слишком большие и их требуется разделить.</p>
<p>• Дублирование кода инициализации. Если вы не можете быстро найти общее место для общего кода инициализации, значит, у вас слишком много объектов, которые слишком тесно взаимодействуют друг с другом.</p>
<p>• Тесты выполняются слишком медленно. Если тесты TDD работают слишком медленно, значит, они не будут запускаться достаточно часто. Значит, программист будет в течение некоторого времени работать, вообще не запуская тестов. Значит, когда он их все-таки запустит, скорее всего, многие из них не сработают. На самом деле здесь кроется серьезная проблема: если тесты работают медленно, значит, тестирование частей и компонентов разрабатываемого приложения связано с проблемами. Сложности при тестировании частей и фрагментов приложения указывают на существование недостатков дизайна. Иными словами, улучшив дизайн, вы можете увеличить скорость работы тестов. (Продолжительность работы набора тестов не должна превышать десяти минут, по аналогии с ускорением свободного падения в 9,8 м/с2. Если для выполнения набора тестов требуется более 10 минут, этот набор обязательно надо сократить или тестируемое приложение должно быть оптимизировано так, чтобы для выполнения набора тестов требовалось не более 10 минут.)</p>
<p>• Хрупкие тесты. Если ваши тесты неожиданно начинают ломаться в самых непредсказуемых местах, это означает, что одна часть разрабатываемого приложения непредсказуемым образом влияет на работу другой части. В этом случае необходимо улучшить дизайн так, чтобы данный эффект исчез. Для этого можно либо устранить связь между частями приложения, либо объединить две части воедино.</p>
<subtitle><emphasis><strong>Как TDD способствует созданию инфраструктур?</strong></emphasis></subtitle><p>Инфраструктура (framework) – набор обобщенного кода, который можно использовать в качестве базы при разработке разнообразных прикладных программ. На самом деле TDD является неплохим инструментом разработки инфраструктур. Парадокс: если вы перестаете думать о будущем вашего кода, вы делаете код значительно более адаптируемым для повторного использования в будущем.</p>
<p>Очень многие умные книги говорят об обратном: «кодируйте для сегодняшнего дня, но проектируйте для завтрашнего» (code for today, design for tomorrow). Похоже, что TDD переворачивает этот совет с ног на голову: «кодируйте для завтрашнего дня, проектируйте для сегодняшнего» (code for tomorrow, design for today). Вот что происходит на практике:</p>
<p>• В программу добавляется первая функциональность. Она реализуется просто и прямолинейно, поэтому реализация выполняется быстро и с наименьшим количеством дефектов.</p>
<p>• В программу добавляется вторая функциональность, которая является вариацией первой. Дублирование между двумя функциональностями объединяется и размещается в одном месте. Различия оказываются в разных местах (как правило, в разных методах или в разных классах).</p>
<p>• В программу добавляется третья функциональность, которая является вариацией первых двух. Уже имеющаяся общая логика, как правило, может использоваться в том виде, в котором она уже присутствует в программе, возможно, потребуется внести незначительные изменения. Отличающаяся логика должна располагаться в отдельном месте – в другом методе или в другом классе.</p>
<p>В процессе разработки мы постепенно приводим код в соответствие с принципом открытости/закрытости (Open/Closed Principle<a type="note" l:href="#n_28">[28]</a>), утверждающим, что объекты должны быть открыты для использования, но закрыты для модификации. Самое интересное, что при использовании TDD этот принцип выполняется именно для тех вариаций, с которыми действительно приходится иметь дело на практике. То есть TDD позволяет формировать инфраструктуры, удобные для представления таких вариаций, с необходимостью реализации которых программист сталкивается на практике. Однако эти инфраструктуры могут оказаться неэффективными в случае, если потребуется реализовать вариацию, которая редко встречается в реальности (или которая не была еще реализована ранее).</p>
<p>Что же произойдет, если необходимость реализации непредвиденной вариации возникнет спустя три года после разработки инфраструктуры? Дизайн быстро эволюционирует так, чтобы сделать вариацию возможной. Принцип открытости/закрытости на короткое время будет нарушен, однако это нарушение обойдется относительно недорого, так как имеющиеся тесты дадут вам уверенность в том, что, изменив код, вы ничего не поломаете.</p>
<p>В пределе, когда вариации возникают достаточно быстро, стиль TDD невозможно отличить от заблаговременного проектирования. Однажды я всего за несколько часов с нуля разработал инфраструктуру составления отчетов. Те, кто следил за этим, были абсолютно уверены, что это трюк. Они думали, что я сел за разработку, уже имея в голове готовую инфраструктуру. Однако это не так. Просто я долгое время практиковал TDD, благодаря этому я исправляю допущенные мною многочисленные ошибки быстрее, чем вы успеваете заметить, что я их допустил.</p>
<subtitle><emphasis><strong>Сколько должно быть тестов?</strong></emphasis></subtitle><p>Насколько емкой должна быть обратная связь? Рассмотрим простую задачу: дано три целых числа, обозначающих длины сторон треугольника. Метод должен возвращать:</p>
<p>• 1 – в случае, если треугольник равносторонний;</p>
<p>• 2 – в случае, если треугольник равнобедренный;</p>
<p>• 3 – в случае, если треугольник не равносторонний и не равнобедренный.</p>
<p>Если длины сторон заданы некорректно (невозможно построить треугольник со сторонами заданной длины), метод должен генерировать исключение.</p>
<p>Вперед! Попробуйте решить задачу (мое решение, написанное на языке Smalltalk, приведено в конце данного подраздела).</p>
<p>Это отчасти напоминает игру «Угадай мелодию» («Я могу закодировать задачу за четыре теста!» – «А я – за три!» – «О’кей попробуйте».) Для решения задачи я написал шесть тестов, а Боб Биндер в своей книге <emphasis>Testing Object-Oriented Systems<a type="note" l:href="#n_29">[29]</a></emphasis> («Тестирование объектно-ориентированных систем») для этой же самой задачи написал 65 тестов. Сколько на самом деле нужно тестов? Вы должны решить это сами, исходя из собственного опыта и рассуждений.</p>
<p>Когда я думаю о необходимом количестве тестов, я пытаюсь оценить приемлемое <emphasis>среднее время между сбоями</emphasis> (MTBF, Mean Time Between Failures). Например, в языке Smalltalk целые числа ведут себя как целые числа, а не как 32-битные значения. Иными словами, максимально возможное значение целого числа ограничивается не тридцатью двумя битами, а объемом памяти. Это означает, что вы можете обойтись без тестирования MAXINT. Безусловно, определенный предел существует, ведь теоретически можно создать целое число, для хранения которого не хватит имеющейся памяти. Но должен ли я тратить время на написание и реализацию теста, пытающегося заполнить память невероятно огромным целым числом? Как это повлияет на MTBF моей программы? Если я в обозримом будущем не собираюсь иметь дело с треугольниками, размер сторон которых измеряется такими числами, значит, моя программа не станет существенно менее надежной, если я не реализую такой тест.</p>
<p>Имеет ли смысл писать тот или иной тест? Это зависит от того, насколько аккуратно вы оцените MTBF. Если обстоятельства требуют, чтобы вы увеличили MTBF от 10 лет до 100 лет, значит, имеет смысл уделить время для разработки самых маловероятных и чрезвычайно редко возникающих ситуаций (если, конечно, вы не можете каким-либо иным образом доказать, что подобные ситуации никогда не могут возникнуть).</p>
<p>Взгляд на тестирование в рамках TDD прагматичен. В TDD тесты являются средством достижения цели. Целью является код, в корректности которого мы в достаточной степени уверены. Если знание особенностей реализации без какого-либо теста дает нам уверенность в том, что код работает правильно, мы не будем писать тест. Тестирование черного ящика (когда мы намеренно игнорируем реализацию) обладает рядом преимуществ. Если мы игнорируем код, мы наблюдаем другую систему ценностей: тесты сами по себе представляют для нас ценность. В некоторых ситуациях это вполне оправданный подход, однако он отличается от TDD.</p>
<empty-line></empty-line><p><strong>TriangleTest</strong></p>
<p>testEquilateral</p>
<p>self assert: (self evaluate: 2 side: 2 side: 2) = 1</p>
<empty-line></empty-line><p>testIsosceles</p>
<p>self assert: (self evaluate: 1 side: 2 side: 2) = 2</p>
<empty-line></empty-line><p>testScalene</p>
<p>self assert: (self evaluate: 2 side: 3 side: 4) = 3</p>
<empty-line></empty-line><p>testIrrational</p>
<p>[self evaluate: 1 side: 2 side: 3]</p>
<p>on: Exception</p>
<p>do: [: ex | ^self].</p>
<p>self fail</p>
<empty-line></empty-line><p>testNegative</p>
<p>[self evaluate: -1 side: 2 side: 2]</p>
<p>on: Exception</p>
<p>do: [: ex | ^self].</p>
<p>self fail</p>
<empty-line></empty-line><p>testStrings</p>
<p>[self evaluate: ‘a’ side: ‘b’ side: ‘c’]</p>
<p>on: Exception</p>
<p>do: [: ex | ^self].</p>
<p>self fail</p>
<empty-line></empty-line><p>evaluate: aNumber1 side: aNumber2 side: aNumber3</p>
<p>| sides |</p>
<p>sides:= SortedCollection</p>
<p>with: aNumber1</p>
<p>with: aNumber2</p>
<p>with: aNumber3.</p>
<p>sides first &lt;= 0 ifTrue: [self fail].</p>
<p>(sides at: 1) + (sides at: 2) &lt;= (sides at: 3) ifTrue: [self fail].</p>
<p>^sides asSet size</p>
<subtitle><emphasis><strong>Когда следует удалять тесты?</strong></emphasis></subtitle><p>Чем больше тестов, тем лучше, однако если два теста являются избыточными по отношению друг к другу, должны ли вы сохранить оба этих теста в наборе? Это зависит от двух критериев.</p>
<p>• Первый критерий – это уверенность. Никогда не удаляйте тест, если в результате этого снизится ваша уверенность в поведении системы.</p>
<p>• Второй критерий – это коммуникация. Если у вас есть два теста, которые тестируют один и тот же участок кода, однако читателем эти тесты рассматриваются как два различных сценария, сохраните оба теста.</p>
<p>Отсюда следует, что, если у вас есть два теста, которые можно считать избыточными как в отношении уверенности, так и в отношении коммуникации, удалите наименее полезный из этих тестов.</p>
<subtitle><emphasis><strong>Как язык программирования и среда разработки влияют на TDD?</strong></emphasis></subtitle><p>Попробуйте использовать подход TDD в среде Smalltalk с браузером Refactoring Browser. Теперь попробуйте работать в среде C++ с редактором vi. Почувствуйте разницу.</p>
<p>В языках программирования и средах разработки, в которых цикл TDD выполняется сложнее (тест – компиляция – запуск – рефакторинг), возникает тенденция двигаться вперед более длинными шагами:</p>
<p>• каждый тест охватывает больший объем кода;</p>
<p>• рефакторинг выполняется с меньшим количеством промежуточных шагов.</p>
<p>Приводит ли это к замедлению разработки, или, наоборот, разработка ускоряется?</p>
<p>В языках программирования и средах, в которых проще выполнить цикл TDD, у вас будет возникать желание больше экспериментировать с кодом. Позволит ли это двигаться быстрее и формировать лучшие решения, или вам кажется, что лучше тратить время на дополнительные размышления о дизайне?</p>
<subtitle><emphasis><strong>Можно ли использовать TDD для разработки крупномасштабных систем?</strong></emphasis></subtitle><p>Позволяет ли методика TDD разрабатывать крупномасштабные программные проекты? Какие новые типы тестов вам потребуется написать? Какие новые шаблоны рефакторинга могут потребоваться?</p>
<p>Самой крупной программной системой, целиком и полностью разработанной в стиле TDD, в создании которой я принимал участие, является система LifeWare (www.lifeware.ch). Работа над системой велась в течение 4 лет. Объем работ оценивается в 40 человеко-лет. На текущий момент система включает в себя 250 000 строк функционального и 250 000 строк тестирующего кода (на языке Smalltalk). Набор тестов системы включает в себя 4000 тестов, для выполнения которых требуется 20 минут. Полный набор тестов запускается несколько раз каждый день. Реализованный в системе огромный объем функциональности, похоже, никак не снижает эффективности TDD. Избавляясь от дублирования, вы стараетесь создать большое количество маленьких объектов, которые можно тестировать изолированно друг от друга вне зависимости от размера приложения.</p>
<subtitle><emphasis><strong>Можно ли осуществлять разработку через тестирование на уровне приложения?</strong></emphasis></subtitle><p>Если мы будем выполнять разработку, используя только внутренние программистские тесты (их называют тестами модулей – <emphasis>unit tests</emphasis>, – хотя они не вполне соответствуют этому определению), мы рискуем столкнуться с проблемой: полученная в результате этого система может оказаться не совсем тем или, что хуже, совсем не тем, что хочет получить пользователь. Программист будет работать над программой, которая, <emphasis>по его мнению</emphasis>, должна быть полезна, однако у пользователя может оказаться совершенно другое мнение. Чтобы решить проблему, можно разработать набор тестов на уровне приложения. Разработкой этих тестов должны заниматься сами пользователи (при поддержке программистов). Написанные пользователями тесты должны точно определять, что именно должна делать разрабатываемая система. Такой стиль можно назвать разработкой через тестирование на уровне приложения (ATDD, Application Test-Driven Development).</p>
<p>Встает техническая проблема: как написать и запустить тест для функциональности, которая еще не существует? Мне кажется, что всегда можно найти способ решения этой проблемы. Например, можно разработать интерпретатор, который будет вежливо сигнализировать о том, что обнаружен тест, выполнить который на данный момент невозможно по причине отсутствия в системе необходимых возможностей.</p>
<p>Существует также социальная проблема. У пользователей (на самом деле я имею в виду команду, в состав которой входят пользователи) появляется новая обязанность: разработка тестов. Процедура разработки тестов уровня приложения требует добавления дополнительного этапа в цикл работы над продуктом, – а именно, разработка пользовательских тестов выполняется перед началом реализации очередного объема функциональности. Организации часто сопротивляются подобному сдвигу ответственности. Новый этап требует координированных усилий множества членов команды, то есть перед тем, как приступить непосредственно к разработке кода, члены команды вынуждены потратить время на разработку пользовательских тестов.</p>
<p>Описанная в данной книге методика TDD целиком и полностью находится под вашим контролем. Иначе говоря, выполнение TDD зависит только от одного человека – от вас. Если у вас возникло желание, вы можете начать использовать ее с сегодняшнего дня. Однако если вы будете смешивать ритм красный – зеленый – рефакторинг с техническими, социальными и организационными проблемами разработки пользовательских тестов, вы вряд ли сможете добиться успеха. В данном случае следует воспользоваться правилом «Тест одного шага» (One Step Test). Сначала добейтесь равномерности ритма красный – зеленый – рефакторинг в собственной практике, затем расширьте область применения TDD.</p>
<p>Еще один аспект ATDD: определение длины цикла между разработкой теста и получением результатов его работы. Если заказчик написал тест, а потом в течение десяти дней ждет его срабатывания, это значит, что он большую часть времени смотрит на красную полосу. Если я работаю в стиле TDD на уровне программиста, я</p>
<p>• немедленно получаю зеленую полосу;</p>
<p>• упрощаю внутренний дизайн.</p>
<subtitle><emphasis><strong>Как перейти к использованию TDD в середине работы над проектом?</strong></emphasis></subtitle><p>У вас есть некоторый объем кода, про который можно сказать, что он корректно работает в большей или меньшей степени. Теперь вы хотите разрабатывать весь новый код в рамках концепции TDD. Что делать?</p>
<p>О проблеме перехода на использование TDD в середине работы над проектом можно написать целую книгу (или даже несколько книг). В данном небольшом разделе я очень поверхностно затрону несколько связанных с этим вопросов.</p>
<p>Самая большая проблема заключается в том, что код, изначально написанный без тестов, как правило, сложен в тестировании. Интерфейсы и взаимосвязи между объектами недостаточно хорошо спроектированы, поэтому сложно изолировать некоторый кусок логики, запустить его и проверить результаты.</p>
<p>«Надо это исправить», – скажете вы. Да, однако любой рефакторинг (без применения средств автоматизации), скорее всего, приведет к возникновению ошибок, и эти ошибки сложно будет обнаружить, так как у вас нет тестов. Проблема яйца и курицы. Змея кусает себя за хвост. Замкнутый цикл саморазрушения. Что же делать?</p>
<p>Прежде всего скажу, чего делать не надо: не надо писать тесты для всего кода и выполнять рефакторинг всего кода. Для этого может потребоваться несколько месяцев, в течение которых у вас не будет времени добавить в систему новой функциональности. Если вы тратите имеющиеся у вас деньги и при этом не зарабатываете новых, долго вы не протянете.</p>
<p>Поэтому прежде всего мы должны ограничить область планируемых нами изменений. Если мы видим часть системы, которую можно существенно улучшить, но которая вполне может быть оставлена без изменений на текущий момент, мы оставляем их без изменений. Возможно, взглянув на код и вспомнив грехи прошлого, вы не сможете удержаться от слез, однако возьмите себя в руки, – если код не требует немедленного вмешательства, лучше не изменять его.</p>
<p>Во-вторых, мы должны разорвать замкнутый круг между тестами и рефакторингом. Мы можем использовать в качестве обратной связи не только тесты, но и другие способы, например чрезвычайно осторожная работа в паре с партнером. Мы можем использовать обратную связь более высокого уровня, например тесты на уровне всей системы. Мы знаем, что такие тесты не являются адекватными, однако они прибавляют нам уверенности. Благодаря такой обратной связи мы можем сделать части кода, нуждающиеся в изменении, более удобными для внесения изменений.</p>
<p>Через некоторое время части системы, которые постоянно меняются, станут выглядеть так, как будто их разработали с использованием TDD. Мы медленно углубимся в дремучий лес наших старых ошибок.</p>
<subtitle><emphasis><strong>Для кого предназначена методика TDD?</strong></emphasis></subtitle><p>Каждая практика программирования явно или не явно базируется на системе ценностей. TDD не исключение. Если вам нравится лепить вместе куски кода, которые более-менее работают, и вы счастливы думать, что вам не придется возвращаться к полученному в результате этого коду в дальнейшем, значит, TDD – не для вас. Методика TDD базируется на очаровательно-наивном предположении программиста о том, что чем красивее код, тем вероятнее успех. TDD помогает вам обращать внимание на правильные вопросы в подходящие для этого моменты времени. Благодаря этому вы можете делать дизайн чище и модифицировать его по мере того, как перед вами встают новые обстоятельства.</p>
<p>Я сказал, что предположение наивное, однако, скорее всего, я преувеличил. На самом деле наивно предполагать, что чистый код – это все, что необходимо для успеха. Мне кажется, что хорошее проектирование – это лишь 20 % успеха. Безусловно, если проектирование будет выполнено из рук вон плохо, вы можете быть на 100 % уверены, что проект провалится. Однако приемлемый дизайн сможет обеспечить успех проекта только в случае, если остальные 80 % будут там, где им полагается быть.</p>
<p>С этой точки зрения TDD – чрезвычайно мощный инструмент. Если сравнивать со средним уровнем индустрии разработки программного обеспечения, методика TDD позволяет писать код, содержащий значительно меньше дефектов, и формировать значительно более чистый дизайн. Те, кто стремится к изяществу, могут найти в TDD средство для достижения цели.</p>
<p>Методика TDD также подходит для тех, у кого формируется эмоциональная привязанность к коду. Когда я был молодым программистом, самым большим разочарованием для меня была ситуация, когда проект начинался с огромным воодушевлением, а затем, с течением времени, код становился все более отвратительным. Год спустя у меня, как правило, формировалось устойчивое желание уйти из проекта, чтобы никогда в жизни не иметь дела с этим гнусно пахнущим кодом. TDD позволяет с течением времени поддерживать уверенность в коде. По мере того как тестов становится все больше (а ваше мастерство тестирования улучшается), вы обретаете все большую уверенность в том, что система ведет себя именно так, как вам надо. По мере того как вы улучшаете дизайн, становится возможным все большее количество изменений. Моя цель заключается в том, чтобы через год работы мне было бы интереснее и приятнее работать над проектом, чем в самом начале проекта, и TDD помогает мне достигнуть этой цели.</p>
<subtitle><emphasis><strong>Зависит ли эффективность TDD от начальных условий?</strong></emphasis></subtitle><p>Складывается впечатление, что разработка идет гладко только в случае, если тесты выполняются в определенном порядке. Тогда мы можем наблюдать классическую последовательность красный – зеленый – рефакторинг – красный – зеленый – рефакторинг. Вы можете попробовать взять те же самые тесты, но реализовать их в другом порядке, и у вас возникнет ощущение, что вы не сможете, как прежде, выполнять разработку маленькими шажками. Действительно ли одна последовательность тестов на порядок быстрее/проще в реализации, чем другая последовательность? Существуют ли какие-либо признаки тестов, которые могут подсказать, в какой последовательности их следует реализовать? Если методика TDD чувствительна к начальным условиям в малом масштабе, можно ли считать ее предсказуемой в более крупном масштабе? (Вот аналогия: отдельные потоки реки Миссисипи непредсказуемы, однако вы можете с уверенностью сказать, что через устье реки протекает приблизительно 2 000 000 кубических футов воды в секунду.)</p>
<subtitle><emphasis><strong>Как методика TDD связана с шаблонами?</strong></emphasis></subtitle><p>Все мои технические публикации – это поиск фундаментальных правил, которые позволяют обычным людям действовать так, как действуют эксперты. Это связано с тем, как я сам осваиваю то или иное ремесло, – я нахожу эксперта, которому можно подражать, и постепенно выясняю, что, собственно, он делает. Определенно, я не предполагаю, что сформулированные мною правила должны использоваться автоматически, однако именно так и происходит.</p>
<p>Моя старшая дочь (привет, Бетани! Я же говорил тебе, что ты попадешь в мою книгу, – не беспокойся, это не слишком обременительно) в течение семи лет пыталась научиться быстро перемножать числа. Как я, так и моя жена, когда были маленькими, научились этому за значительно более короткий срок. В чем дело? Оказывается каждый раз, когда перед Бетани вставала задача умножить, например, 6 на 9, она складывала число 6 девять раз (или число 9 шесть раз). Таким образом, можно сказать, что Бетани вообще не умела умножать числа так, как это делают другие люди, однако при этом она необычайно быстро складывала числа.</p>
<p>Я обратил внимание на один важный эффект, который, я надеюсь, смогут принять во внимание и другие. Если на основе постоянно повторяющихся действий формулируются правила, дальнейшее применение этих правил становится неосознанным и автоматическим. Естественно, ведь это проще, чем обдумывать все «за» и все «против» того или иного действия с самого начала. Благодаря этому повышается скорость работы, и, если в дальнейшем вы сталкиваетесь с исключением или проблемой, которая не вписывается ни в какие правила, у вас появляется дополнительное время и энергия для того, чтобы в полной мере применить свои творческие способности.</p>
<p>Именно это произошло со мной, когда я писал книгу <emphasis>Smalltalk Best Practice Patterns</emphasis>. В какой-то момент я решил просто следовать правилам, описываемым в ней. В начале это несколько замедлило скорость моей работы – мне требовалось дополнительное время, чтобы вспомнить то или иное правило или написать новое. Однако по прошествии недели я заметил, что с моих пальцев почти мгновенно слетает код, над разработкой которого ранее мне приходилось некоторое время размышлять. Благодаря этому у меня появилось дополнительное время для анализа и важных размышлений о дизайне.</p>
<p>Существует еще одна связь между TDD и шаблонами: TDD является методом реализации дизайна, основанного на шаблонах. Предположим, что в определенном месте разрабатываемой системы мы хотим реализовать шаблон «Стратегия» (Strategy). Мы пишем тест для первого варианта и реализуем его, создав метод. После этого мы намеренно пишем тест для второго варианта, ожидая, что на стадии рефакторинга мы придем к шаблону «Стратегия» (Strategy). Мы с Робертом Мартином занимались исследованием подобного стиля TDD. Проблема состоит в том, что дизайн продолжает вас удивлять. Идеи, которые на первый взгляд кажутся вам вполне уместными, позже оказываются неправильными. Поэтому я не рекомендую целиком и полностью доверять своим предчувствиям относительно шаблонов. Лучше думайте о том, что, по-вашему, должна делать система, позвольте дизайну оформиться так, как это необходимо.</p>
<subtitle><emphasis><strong>Почему TDD работает?</strong></emphasis></subtitle><p>Приготовьтесь покинуть галактику. Предположите на секунду, что TDD помогает командам разработчиков создавать хорошо спроектированные, удобные в сопровождении системы с чрезвычайно низким уровнем дефектов. (Я не утверждаю, что это происходит на каждом шагу, я просто хочу, чтобы вы немножко помечтали.) Как такое может происходить?</p>
<p>Отчасти этот эффект связан с уменьшением количества дефектов. Чем раньше вы найдете и устраните дефект, тем дешевле это вам обойдется. Иногда разница в затратах огромна (спросите у «Марс-лендера»<a type="note" l:href="#n_30">[30]</a>). Снижение количества дефектов вызывает множество вторичных психологических и социальных эффектов. После того как я начал работать в стиле TDD, программирование стало для меня значительно менее нервным занятием. Когда я работаю в стиле TDD, мне не надо беспокоиться о множестве вещей. Вначале я могу заставить работать только один тест, потом – все остальные. Уровень стресса существенно снизился. Взаимоотношения с партнерами по команде стали более позитивными. Разработанный мною код перестал быть причиной сбоев, люди стали в большей степени рассчитывать на него. У заказчиков тоже повысилось настроение. Теперь выпуск очередной версии системы означает новую функциональность, а не набор новых дефектов, которые добавляются к уже существующим.</p>
<p>Уменьшение количества дефектов. Имею ли я право утверждать, что подобное возможно? Есть ли у меня научное доказательство?</p>
<p>Нет. На текущий момент не проводилось никаких исследований, подтверждающих преимущества TDD по сравнению с альтернативными подходами в смысле качества, эффективности или удовольствия. Однако эпизодические подтверждения преимуществ TDD многочисленны, а вторичные эффекты очевидны. При использовании TDD у программистов действительно снижается стресс, в командах действительно повышается доверие, а заказчики действительно начинают смотреть на каждую новую версию продукта с энтузиазмом. Лично мне не приходилось сталкиваться с обратными эффектами. Однако ваши наблюдения могут оказаться иными, вы должны попробовать для того, чтобы оценить TDD самостоятельно.</p>
<p>Еще одним преимуществом методики TDD, объясняющим ее положительные эффекты, является сокращение времени, которое проходит между принятием проектного решения и проверкой результата его реализации. В рамках TDD это достаточно короткий промежуток времени – несколько секунд или минут. Вы принимаете решение, реализуете его в коде, запускаете тесты и анализируете полученный результат. В начале у вас возникает мысль – возможно, API должен выглядеть так, или, возможно, метафора должна быть такой, – затем вы создаете самый первый пример – тест, который воплощает вашу мысль в реальность. Вместо того чтобы сначала проектировать, а затем в течение нескольких недель или месяцев ожидать, окажется ваше решение правильным или нет, вы получаете результат уже через несколько секунд или минут.</p>
<p>Причудливый ответ на вопрос, «Почему TDD работает?», основан на бредовом видении из области комплексных систем. Неподражаемый Флип пишет:</p>
<p><emphasis>Следует использовать программистские практики, которые «притягивают» корректный код как предельную функцию, но не как абсолютную величину. Если вы пишете тесты для каждой присутствующей в системе функциональности, если вы добавляете в систему новые функции по одной, и только после того, как выполнятся все тесты, вы создадите то, что математики обозначают термином «точка притяжения (аттрактор)». Точка притяжения – это точка в пространстве состояний, к которой сходятся все потоки. Со временем код с большей вероятностью изменяется в лучшую сторону, а не в худшую; точка притяжения приближается к корректности, как предельная функция</emphasis>.</p>
<p><emphasis>Это «корректность», которая устраивает всех программистов (за исключением, конечно же, тех, кто работает над медицинским или аэрокосмическим программным обеспечением). Я считаю, что важно быть знакомым с концепцией точки притяжения – ее не следует отвергать, ею не следует пренебрегать</emphasis>.</p>
<subtitle><emphasis><strong>Что означает название?</strong></emphasis></subtitle><p>Название методики: Test-Driven Development – <emphasis>разработка через тестирование</emphasis>. Буквально можно перевести как «разработка, ведомая тестами» или «разработка исходя из тестов».</p>
<p><emphasis> Development</emphasis> (разработка) – старый поэтапный подход к разработке программного обеспечения обладает рядом недостатков, так как оценить результат проектного решения очень сложно, если решение и оценка результатов удалены друг от друга по времени. В названии TDD термин «разработка» означает сложную комбинацию анализа, логического проектирования, физического проектирования, реализации, тестирования, пересмотра, интеграции и выпуска.</p>
<p><emphasis> Driven</emphasis> (исходя из, через) – в свое время я называл TDD термином <emphasis>test-first programming</emphasis> (программирование «вначале тесты»). Однако антонимом слова <emphasis>fist</emphasis> (вначале) является слово <emphasis>last</emphasis> (в конце). Огромное количество людей осуществляют тестирование уже после того, как они запрограммировали функциональный код. Этот подход считается вполне приемлемым. Существует любопытное правило именования, согласно которому противоположность придуманного вами имени должна быть, по крайней мере отчасти, неприятной или неудовлетворительной. (Термин «структурное программирование» звучит привлекательно, так как никто не хочет писать бесструктурный, то есть неорганизованный код.) Если в ходе разработки я исхожу не из тестов, то из чего? Из предположений? Домыслов? Спецификаций? (Обратите внимание, что слово «спецификация» немножко похоже на слово «спекуляция».)</p>
<p><emphasis> Test</emphasis> (тест) – автоматическая процедура, позволяющая убедиться в работоспособности кода. Нажмите кнопку, и он будет выполнен. Ирония TDD состоит в том, что это вовсе не методика тестирования. Это методика анализа, методика проектирования, фактически методика структурирования всей деятельности, связанной с разработкой программного кода.</p>
<subtitle><emphasis><strong>Как методика TDD связана с практиками экстремального программирования?</strong></emphasis></subtitle><p>Некоторые из рецензетов данной книги, были обеспокоены тем, что книга целиком и полностью посвящена TDD, в результате читатели могут подумать, что остальными практиками XP (eXtreme Programming – экстремальное программирование) можно пренебречь. Например, если вы работаете в стиле TDD, должны ли вы при этом работать в паре? Далее я привожу перечень соображений относительно того, как остальные практики XP улучшают эффективность TDD и, наоборот, как TDD повышает эффективность использования других практик XP.</p>
<p>Программирование в паре. Тесты, разрабатываемые в рамках TDD, являются превосходным инструментом общения, когда вы программируете в паре. Зачастую, работая в паре, партнеры не могут договориться – какую именно проблему они решают, несмотря на то что работают с одним и тем же кодом. Это звучит бредово, однако подобное происходит постоянно, в особенности когда вы только осваиваете работу в паре. Именно этой проблемы удается избежать благодаря TDD. Существует и обратное влияние: когда вы работаете в паре, у вас есть помощник, который может взять на себя нагрузку в случае, если вы устали. Ритм TDD может исчерпать ваши силы, и тогда вы будете вынуждены программировать, несмотря на усталость. Однако если вы работаете в паре, ваш партнер готов взять у вас клавиатуру и тем самым дать вам возможность немного расслабиться.</p>
<p>Работа на свежую голову. XP рекомендует работать, когда вы полны сил, и останавливать работу, когда вы устали. Если вы не можете заставить следующий тест сработать или заставить работать те два теста одновременно, значит, настало время прерваться. Однажды мы с дядей Бобом Мартином (Bob Martin<a type="note" l:href="#n_31">[31]</a>) работали над алгоритмом разбиения линии, и нам никак не удавалось заставить его работать. Несколько минут мы безуспешно бились над кодом, однако нам стало очевидно, что прогресса нет, поэтому мы просто остановили работу.</p>
<p>Частая интеграция. Тесты – это великолепный ресурс, который позволяет выполнять интеграцию значительно чаще. Вы добились успешного выполнения очередного теста, избавились от дублирования, значит, вы можете интегрировать код. Этот цикл может повторяться каждые 15–30 минут. Возможность частой интеграции позволяет более многочисленным командам разработчиков иметь дело с одной и той же базой исходного кода. Как сказал Билл Уэйк (Bill Wake): «Проблема <emphasis>n2</emphasis> не является проблемой, если <emphasis>n</emphasis> всегда равно 1».</p>
<p>Простой дизайн. В рамках TDD вы пишете только тот код, который необходим для успешного выполнения тестов, вы удаляете из него любое дублирование, значит, вы автоматически получаете код, который идеально адаптирован к текущим требованиям и подготовлен к любым будущим пожеланиям. Общая доктрина требует, чтобы дизайна было достаточно для получения идеальной архитектуры для текущей системы. Эта доктрина также облегчает разработку тестов.</p>
<p>Рефакторинг. Устранение дублирования – это основная цель рефакторинга. Тесты дают вам уверенность в том, что поведение системы не изменится даже в случае, если в ходе рефакторинга вы вносите достаточно крупномасштабные изменения. Чем выше ваша уверенность, тем более агрессивно вы выполняете рефакторинг. Рефакторинг продлевает жизнь вашей системе. Благодаря рефакторингу вы упрощаете дальнейшую разработку тестов.</p>
<p>Частые выпуски версий. Если тесты TDD действительно улучшают MTBF вашей системы (в этом вы можете убедиться сами), значит, вы можете чаще внедрять разрабатываемый код в реальные производственные условия и при этом не наносить ущерба вашим заказчикам. Гарет Ривс (Gareth Reeves) приводит аналогию с куплей-продажей ценных бумаг на бирже в течение дня. Если вы занимаетесь краткосрочной спекуляцией ценными бумагами, в конце торгового дня вы должны продать все имеющиеся у вас ценные бумаги, так как вы не хотите принимать риск, связанный с сохранением некоторых ценных бумаг до следующего торгового дня, – этот риск вам не подконтролен. Разрабатывая систему, вы хотите, чтобы вносимые вами изменения как можно быстрее были опробованы в реальных производственных условиях, так как не хотите тратить время на разработку кода, в полезности которого не уверены.</p>
<subtitle><emphasis><strong>Нерешенные проблемы TDD</strong></emphasis></subtitle><p>Дарач Эннис (Darach Ennis) бросил вызов поклонникам TDD, размышляющим о возможностях расширения области применения TDD. Он сказал:</p>
<p><emphasis>Множество различных организаций сталкивается с многочисленными проблемами TDD, и эти проблемы никак не затронуты в книге. Возможно, эти проблемы вообще никак не решить в рамках TDD. Вот некоторые из них</emphasis>:</p>
<p>• не существует способа автоматического тестирования GUI (например, Swing, CGI, JSP/Servlets/Struts);</p>
<p>• не существует способа автоматического тестирования распределенных объектов (например, RPC, Messaging, CORBA/EJB и JMS);</p>
<p>• TDD нельзя использовать для разработки схемы базы данных (например, JDBC);</p>
<p>• нет необходимости тестировать код, разработанный сторонними разработчиками, или код, генерируемый внешними инструментами автоматизации разработки;</p>
<p>• TDD нельзя использовать для разработки компилятора/интерпретатора языка программирования.</p>
<p>Я не уверен, что он прав, но я также не уверен, что он не прав. В любом случае это почва для размышлений о дальнейшем развитии TDD.</p>
</section></section><section><title><p>Приложение I</p>
<p>Диаграммы взаимовлияния</p>
</title><p>В данной книге можно встретить несколько примеров диаграмм взаимовлияния. Идея диаграмм взаимовлияния позаимствована из серии книг <emphasis>Quality Software Management</emphasis> Джеральда Вейнберга (Gerald Weinberg), точнее говоря, из книги 1: <emphasis>Systems Thinking<a type="note" l:href="#n_32">[32]</a></emphasis>. Цель диаграммы взаимовлияния – продемонстрировать, каким образом элементы системы влияют друг на друга.</p>
<p>Диаграмма взаимовлияния включает элементы трех типов:</p>
<p>• Действие или деятельность<a type="note" l:href="#n_33">[33]</a> – обозначается словом или короткой фразой.</p>
<p>• Положительное соединение – обозначается стрелкой, указывающей от одного действия к другому действию. Положительное соединение сообщает, что усиление интенсивности исходного действия приводит к усилению интенсивности целевого действия, а снижение интенсивности исходного действия приводит к снижению интенсивности целевого действия.</p>
<p>• Отрицательное соединение – обозначается стрелкой между двумя действиями, поверх которой нарисован кружочек. Отрицательное соединение сообщает, что усиление интенсивности исходного действия ведет к снижению интенсивности целевого действия, и, наоборот, снижение интенсивности исходного действия приводит к усилению интенсивности целевого действия.</p>
<p>Слишком много слов для очень простой концепции. На рис. П1.1–П1.3 приводится несколько примеров диаграмм взаимовлияния.</p>
<empty-line></empty-line><image l:href="#i_014.png"></image><p><strong>Рис. П1.1.</strong> Два действия, которые, по всей видимости, не влияют друг на друга</p>
<empty-line></empty-line><image l:href="#i_015.png"></image><p><strong>Рис. П1.2.</strong> Два действия, связанные положительным соединением</p>
<empty-line></empty-line><image l:href="#i_016.png"></image><p><strong>Рис. П1.3.</strong> Два действия, связанные отрицательным соединением</p>
<empty-line></empty-line><p>Чем больше я ем, тем больше моя масса тела. Чем меньше я ем, тем меньше моя масса тела. Конечно же, масса человеческого тела – это значительно более сложная система. Диаграммы взаимовлияния – это модели, которые помогают понять некоторые аспекты системы, однако они вовсе не предназначены для того, чтобы понимать и контролировать систему в полной мере.</p>
<subtitle>Обратная связь</subtitle><p>Влияние распространяется не только в одном направлении. Действие может быть связано обратной связью само с собой. Иначе говоря, в некоторых случаях изменение интенсивности действия влияет на само это действие. Иногда это влияние положительно, а иногда – отрицательно. Пример подобной обратной связи продемонстрирован на рис. П1.4.</p>
<p>Существует два типа обратной связи – положительная и отрицательная. Положительная обратная связь приводит к тому, что интенсивность действия в системе</p>
<empty-line></empty-line><image l:href="#i_017.png"></image><p><strong>Рис. П1.4.</strong> Обратная связь</p>
<empty-line></empty-line><p>постоянно увеличивается. Чтобы обнаружить положительную обратную связь, достаточно посчитать количество отрицательных соединений в цикле. Если в цикле четное количество отрицательных соединений, значит, этот цикл является циклом положительной обратной связи. На рис. П1.4 изображен цикл положительной обратной связи: попав в этот цикл, вы продолжаете набирать вес, пока в составе цикла не появится какое-либо дополнительное действие.</p>
<p>Отрицательная обратная связь снижает интенсивность действия. Если в цикле присутствует нечетное количество отрицательных соединений, значит, цикл является циклом отрицательной обратной связи.</p>
<p>Вот три ключа хорошего системного дизайна:</p>
<p>• создание благоприятных циклов, в которых положительная обратная связь приводит к увеличению интенсивности полезных действий;</p>
<p>• устранение вредных циклов, в которых положительная обратная связь приводит к увеличению интенсивности бесполезных, вредных и деструктивных действий;</p>
<p>• создание циклов негативной обратной связи, которые предотвращают чрезмерное использование благоприятных действий.</p>
<subtitle>Контроль над системой</subtitle><p>Выбирая систему практик разработки программного обеспечения, добивайтесь, чтобы каждая практика способствовала применению других практик, благодаря этому вы сможете использовать каждую из практик в достаточном объеме даже в состоянии стресса. На рис. П1.5 показан пример системы практик, которая приводит к недостаточному тестированию.</p>
<p>Когда время начинает поджимать, вы снижаете интенсивность тестирования, что приводит к увеличению количества ошибок, что, в свою очередь, приводит к еще большему недостатку времени. Со временем на сцене появляется некоторое внешнее действие (например, недостаток денег), которое заставляет вас завершить работу над проектом, несмотря ни на что.</p>
<empty-line></empty-line><image l:href="#i_018.png"></image><p><strong>Рис. П1.5.</strong> Недостаток времени для тестирования приводит к общему недостатку времени</p>
<empty-line></empty-line><p>Если вы имеете дело с системой, которая ведет себя не так, как вам того хотелось бы, у вас есть несколько вариантов исправить ситуацию:</p>
<p>• Сформируйте цикл положительной обратной связи в обратном направлении. Если у вас цикл между тестами и уверенностью и тесты все время терпят неудачу, снижая тем самым уверенность, тогда вы сможете сделать больше успешных тестов, повысив тем самым уверенность в вашей способности увеличить количество работающих тестов.</p>
<p>• Сформируйте цикл отрицательной обратной связи, который позволит вам контролировать действие, интенсивность которого стала слишком большой.</p>
<p>• Создайте или разорвите соединения, чтобы устранить циклы, не являющиеся полезными.</p>
</section><section><title><p>Приложение II</p>
<p>Фибоначчи</p>
</title><p>В ответ на просьбу одного из моих рецензентов я включил в книгу описание разработки функции вычисления последовательности Фибоначчи в стиле TDD. Некоторые утверждают, что именно этот пример раскрыл им глаза на механику работы TDD. Однако этот пример очень короток, к тому же в нем не используются многие важные приемы, применяемые в рамках TDD. По этой причине его невозможно использовать в качестве замены примеров, рассмотренных ранее в данной книге. Если, ознакомившись с рассмотренными ранее примерами, вы до сих пор не можете понять, как осуществляется разработка в стиле TDD, ознакомьтесь с данным материалом, возможно, он поможет вам прояснить ситуацию.</p>
<p>Первый тест показывает, что fib(0) = 0. Реализация возвращает константу.</p>
<empty-line></empty-line><p>public void testFibonacci() {</p>
<p>assertEquals(0, fib(0));</p>
<p>}</p>
<p>int fib(int n) {</p>
<p>return 0;</p>
<p>}</p>
<empty-line></empty-line><p>(Я использую класс TestCase как вместилище кода, так как мы разрабатываем всего одну функцию.)</p>
<empty-line></empty-line><p>Второй тест показывает, что fib(1) = 1.</p>
<empty-line></empty-line><p>public void testFibonacci() {</p>
<p>assertEquals(0, fib(0));</p>
<p>assertEquals(1, fib(1));</p>
<p>}</p>
<empty-line></empty-line><p>Я просто добавил еще один оператор assert() в тот же самый тестовый метод, так как не вижу особого смысла создавать новый метод с именем testFibonacciOfOneIsOne.</p>
<p>Чтобы заставить тест работать, можно воспользоваться одним из нескольких методов. Я решаю использовать значение 0 как специальный случай:</p>
<empty-line></empty-line><p>int fib(int n) {</p>
<p>if <strong>(n == 0)</strong> return 0;</p>
<p><strong>return 1</strong>;</p>
<p>}</p>
<empty-line></empty-line><p>Дублирование в тестирующем методе начинает действовать мне на нервы. По мере добавления новых тестов, дублирование будет только усугубляться. Давайте попробуем выделить общую структуру операторов assert(), для этого добавим в тест таблицу входных и ожидаемых значений функции fib():</p>
<empty-line></empty-line><p>public void testFibonacci() {</p>
<p>int cases[][] = {{0,0},{1,1}};</p>
<p>for (int i = 0; i &lt; cases.length; i++)</p>
<p>assertEquals(cases[i][1], fib(cases[i][0]));</p>
<p>}</p>
<empty-line></empty-line><p>Теперь добавление нового теста требует всего шесть нажатий на клавиши и никаких дополнительных строк:</p>
<p>public void testFibonacci() {</p>
<empty-line></empty-line><p>int cases[][] = {{0,0},{1,1},<strong>{2,1}</strong>};</p>
<p>for (int i = 0; i &lt; cases.length; i++)</p>
<p>assertEquals(cases[i][1], fib(cases[i][0]));</p>
<p>}</p>
<empty-line></empty-line><p>Как это ни удивительно, но новый тест работает. Это происходит потому, что константа 1 также подходит и для входного значения 2. Переходим к следующему тесту:</p>
<empty-line></empty-line><p>public void testFibonacci() {</p>
<p>int cases[][] = {{0,0},{1,1},{2,1},<strong>{3,2}</strong>};</p>
<p>for (int i = 0; i &lt; cases.length; i++)</p>
<p>assertEquals(cases[i][1], fib(cases[i][0]));</p>
<p>}</p>
<empty-line></empty-line><p>Ура! Наконец-то тест не сработал. Воспользуемся прежней стратегией (рассматриваем меньшие входные значения как специальные случаи):</p>
<empty-line></empty-line><p>int fib(int n) {</p>
<p>if (n == 0) return 0;</p>
<p>if <strong>(n &lt;= 2)</strong> return 1;</p>
<p>return <strong>2</strong>;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь мы готовы обобщить код. Мы написали 2, однако на самом деле мы имели в виду 1 + 1.</p>
<empty-line></empty-line><p>int fib(int n) {</p>
<p>if (n == 0) return 0;</p>
<p>if (n &lt;= 2) return 1;</p>
<p>return <strong>1 + 1</strong>;</p>
<p>}</p>
<empty-line></empty-line><p>Первая единица в сумме – на самом деле fib(n-1):</p>
<empty-line></empty-line><p>int fib(int n) {</p>
<p>if (n == 0) return 0;</p>
<p>if (n &lt;= 2) return 1;</p>
<p>return <strong>fib(n-1)</strong> + 1;</p>
<p>}</p>
<empty-line></empty-line><p>Вторая единица в сумме – на самом деле fib(n-2):</p>
<p>int fib(int n) {</p>
<p>if (n == 0) return 0;</p>
<p>if (n &lt;= 2) return 1;</p>
<p>return fib(n-1) + <strong>fib(n-2)</strong>;</p>
<p>}</p>
<empty-line></empty-line><p>Теперь окончательно чистим код. Та же самая структура должна работать для fib(2), поэтому мы можем преобразовать второй условный оператор:</p>
<empty-line></empty-line><p>int fib(int n) {</p>
<p>if (n == 0) return 0;</p>
<p>if <strong>(n == 1)</strong> return 1;</p>
<p>return fib(n-1) + fib(n-2);</p>
<p>}</p>
<empty-line></empty-line><p>Это и есть функция вычисления последовательности Фибоначчи, целиком и полностью разработанная в рамках методики TDD.</p>
</section><section><title><p>Послесловие</p>
</title><p><emphasis>Мартин Фаулер (Martin Fowler)</emphasis></p>
<empty-line></empty-line><p>Когда рассказываешь о разработке, основанной на тестировании, сложнее всего передать то психическое состояние, в котором находишься, работая в стиле TDD. Я помню, как в ходе проекта C3 мы с Ральфом Битти (Ralph Beattie) работали над реализацией сложного набора условий выплаты. Ральф сформулировал набор соответствующих тестов, после чего мы приступили к реализации этих тестов одного за другим. Процесс был равномерным и неторопливым, из-за этого казалось, что мы работаем медленно. Однако, взглянув назад на проделанную работу, можно было понять, что, несмотря на кажущуюся неторопливость, мы работали очень даже быстро.</p>
<p>Несмотря на множество появившихся в последнее время мощных инструментов, программирование по-прежнему остается сложной работой. Я часто ощущаю себя в ситуации, когда мне кажется, что я жонглирую шариками и мне приходится следить сразу за несколькими шариками в воздухе: малейшая потеря внимания, и все сыпется на пол. Методика TDD позволяет избавиться от этого ощущения.</p>
<p>Когда вы работаете в стиле TDD, в воздухе постоянно находится лишь один шарик. Вы можете сконцентрироваться на нем, а значит, хорошо справиться со своей работой. Когда я добавляю в программу новую функциональность, я не думаю о том, какой дизайн должен быть реализован в данной функции. Я просто пытаюсь добиться успешного выполнения тестов самым простым из доступных мне способов. Когда я переключаюсь в режим рефакторинга, я не беспокоюсь о добавлении в программу новых функций, я думаю только о правильном дизайне. На каждом из этих этапов я концентрируюсь на единственной задаче, благодаря этому мое внимание не распыляется.</p>
<p>Добавление новой функциональности при помощи тестов и рефакторинг – это две монологические разновидности программирования. Совсем недавно я открыл еще одну разновидность: копирование шаблона. Я занимался разработкой сценария на языке Ruby, извлекающего информацию из базы данных. Я начал с создания класса, являющегося оболочкой таблицы базы данных, а затем сказал себе, что, раз я только что закончил книгу о шаблонах работы с базами данных, я должен использовать шаблон. Примеры программ в книге были написаны на Java, поэтому нужный мне код легко можно было перенести на Ruby. Когда я программировал, я не думал о решении проблемы, я думал лишь о том, как лучше всего адаптировать шаблон для условий, в рамках которых я работал.</p>
<p>Копирование шаблонов само по себе не является хорошим программированием, – я всегда подчеркиваю этот факт, когда говорю о шаблонах. Любой шаблон – это полуфабрикат, – вы должны адаптировать его для условий своего проекта. Однако чтобы сделать это, лучше всего вначале, особо не задумываясь, скопировать шаблон, а затем, воспользовавшись смесью рефакторинга и TDD, выполнить адаптацию. В этом случае в процессе копирования шаблона вы также концентрируетесь только на одной вещи – на шаблоне.</p>
<p>Сообщество XP активно работает над добавлением шаблонов в общую картину. Со всей очевидностью можно сказать, что сообщество XP любит шаблоны. В конце концов, между множеством приверженцев XP и множеством приверженцев шаблонов существует значительное пересечение: Уорд и Кент являются лидерами обоих направлений. Наверное, копирование шаблона – это третий монологический режим программирования наряду с разработкой в стиле «сначала тесты» и рефакторингом. Как и первые два режима, копирование шаблона – опасная штука, если ее использовать отдельно от двух других режимов. Все три вида программирования проявляют свою мощь только тогда, когда используются совместно друг с другом.</p>
<p>Если вы хотите сделать некоторый процесс эффективным, вы должны идентифицировать основные действия, из которых состоит процесс, а затем добиться, чтобы в каждый момент времени внимание концентрировалось только на одном таком действии. Примером такого подхода является сборочная линия, где каждый рабочий выполняет только одну из множества необходимых процедур. Внимание каждого рабочего сконцентрировано только на одном действии. Методика разработки через тестирование (TDD) подразумевает разделение процесса программирования на элементарные режимы, однако при этом она избавляет от монотонности, позволяя быстро переключаться между этими режимами. Комбинация монологических режимов и переключения между ними обеспечивает должную концентрацию внимания, снижает стресс и избавляет от монотонности сборочной линии.</p>
<p>Я признаю, что все эти мысли несколько сыроваты. Когда я пишу это, я по-прежнему не уверен в том, о чем рассказываю. Я знаю, что буду обдумывать все эти идеи еще в течение нескольких, а может быть, и многих месяцев. Однако я полагаю, что эти идеи должны вам понравиться. Прежде всего, они стимулируют размышления о более крупной картине, в которую вписывается разработка через тестирование. Мы еще не видим эту картину достаточно четко, однако мне кажется, что она постепенно становится все яснее и яснее.</p>
</section></body><body name="notes"><title><p>Примечания</p>
</title><section id="n_1"><title><p>1</p>
</title><p>Бек К. <emphasis>Экстремальное программирование</emphasis>. СПб.: Питер, 2002. ISBN 5-94723-032-1.</p>
</section><section id="n_2"><title><p>2</p>
</title><p>Подробнее о подсистеме отчетов рассказано на с2.com/doc/oopsla91.html.</p>
</section><section id="n_3"><title><p>3</p>
</title><p>USD – доллары США, CHF – швейцарские франки. – <emphasis>Примеч. пер</emphasis>.</p>
</section><section id="n_4"><title><p>4</p>
</title><p>Название метода times() можно перевести на русский как «умножить на». – <emphasis>Примеч. пер</emphasis>.</p>
</section><section id="n_5"><title><p>5</p>
</title><p>Код с душком (code that smells) – распространенная в XP метафора, означающая плохой код (содержащий дублирование). – <emphasis>Примеч. пер</emphasis>.</p>
</section><section id="n_6"><title><p>6</p>
</title><p>Имеется в виду индикатор успешного выполнения тестов в среде JUnit, имеющий форму полосы. Если все тесты выполнились успешно, полоса становится зеленой. Если хотя бы один тест потерпел неудачу, полоса становится красной. – <emphasis>Примеч. пер</emphasis>.</p>
</section><section id="n_7"><title><p>7</p>
</title><p>В переводе на русский язык <emphasis>sum </emphasis>– это сумма. – <emphasis>Примеч. пер</emphasis>.</p>
</section><section id="n_8"><title><p>8</p>
</title><p>Используя игру слов (английское change означает как «изменение», так и «обмен»), автор намекает на свою знаменитую книгу-бестселлер <emphasis>Extreme Programming Explained: Embrace Change</emphasis>. Русский перевод: Бек К. Экстремальное программирование. СПб.: Питер, 2002. 224 с. – <emphasis>Примеч. ред</emphasis>.</p>
</section><section id="n_9"><title><p>9</p>
</title><p><emphasis>Fractals and Scaling in Finance </emphasis>/ Benoit Mandelbrot, editor. SpringerVerlag, 1997. ISBN: 0387983635</p>
</section><section id="n_10"><title><p>10</p>
</title><p>В переводе с английского языка <emphasis>was run </emphasis>означает <emphasis>был выполнен</emphasis>. – <emphasis>Примеч. пер</emphasis>.</p>
</section><section id="n_11"><title><p>11</p>
</title><p>В языке Python заголовок определения метода (функции) начинается со служебного слова def, а завершается двоеточием. Операторы тела метода записываются ниже, в отдельных строчках. Группировка операторов тела определяется отступами (вместо фигурных скобок). – <emphasis>Примеч. ред</emphasis>.</p>
</section><section id="n_12"><title><p>12</p>
</title><p>Спасибо Дункану Бусу (Duncan Booth) за то, что он исправил допущенную мной ошибку, типичную для малоопытных программистов на Python, и подсказавшему мне решение, в большей степени соответствующее этому языку.</p>
</section><section id="n_13"><title><p>13</p>
</title><p>В переводе с английского языка <emphasis>assert </emphasis>означает утверждать, предполагать. Иначе говоря, оператор assert фиксирует предположение о прогнозируемом результате теста. – <emphasis>Примеч. науч. ред.</emphasis></p>
</section><section id="n_14"><title><p>14</p>
</title><p>Имеются в виду <emphasis>пожелания пользователей </emphasis>(user stories). Другой вариант перевода: <emphasis>пользовательские истории</emphasis>. – <emphasis>Примеч. пер.</emphasis></p>
</section><section id="n_15"><title><p>15</p>
</title><p>Спасибо Джиму Ньюкирку (Jim Newkirk) и Лорану Боссави (Laurent Bossavit) за то, что независимо друг от друга предложили мне этот шаблон.</p>
</section><section id="n_16"><title><p>16</p>
</title><p>Например, www.mockobjects.com.</p>
</section><section id="n_17"><title><p>17</p>
</title><p>Спасибо Дирку Кенигу (Dierk König) за пример.</p>
</section><section id="n_18"><title><p>18</p>
</title><p>Спасибо Лорану Боссави за дискуссию.</p>
</section><section id="n_19"><title><p>19</p>
</title><p>Обычно необязательные параметры располагаются в конце списка аргументов, однако в данном случае необязательная информационная строка размещается в начале списка, так как благодаря этому тесты удобнее читать.</p>
</section><section id="n_20"><title><p>20</p>
</title><p>В переводе с английского <emphasis>fixture </emphasis>означает арматура, оснастка, зафиксированная деталь некоторого движущегося механизма. – <emphasis>Примеч. пер.</emphasis></p>
</section><section id="n_21"><title><p>21</p>
</title><p>McConnell, Steve. <emphasis>Code Complete</emphasis>, chapter 4. Seattle, Washington: Microsoft Press. 1993.</p>
</section><section id="n_22"><title><p>22</p>
</title><p>Caine, S. H., Gordon, E. K. 1975. PDL: <emphasis>A Tool for Software Design, AFIPS Proceedings of the 1975 National Computer Conference.</emphasis></p>
</section><section id="n_23"><title><p>23</p>
</title><p>В среде англоязычных программистов запись в базе данных иногда обозначается термином <emphasis>tuple – кортеж</emphasis>. – <emphasis>Примеч. пер.</emphasis></p>
</section><section id="n_24"><title><p>24</p>
</title><p>Alexander Christopher. <emphasis>Noteson the Synthesis of Form. </emphasis>Cambridge, MA: Harvard University Press, 1970.</p>
</section><section id="n_25"><title><p>25</p>
</title><p>Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John. <emphasis>Design Patterns: Elements of Reusable Object Oriented Software. </emphasis>Boston: Addisoh-Wesley, 1995. Русское издание: Гамма Э., Хелм Р., Джонсон Р., Влиссидес Дж. <emphasis>Приемы объектно-ориентированного проектирования. Паттерны проектирования. </emphasis>СПб.: Питер, 2001.</p>
</section><section id="n_26"><title><p>26</p>
</title><p>Подробнее об этом шаблоне рассказывается в книге Beck, К. <emphasis>The Smalltalk Best Practice Patterns</emphasis>. Pp. 70–73. Englewood-Cliffs, NJ: Prentice-Hall, 1997. Ссылаться на свои собственные работы – это не самая лучшая идея, однако, как говорил философ Филлис Диллер (Phyllis Diller): «Конечно же, я смеюсь над собственными шутками, просто я не доверяю никому, кроме себя».</p>
</section><section id="n_27"><title><p>27</p>
</title><p>Fowler, Martin. <emphasis>Refactoring: Improving the Design of Existing Code. </emphasis>Boston: Addison-Wesley, 1999. Русское издание: Фаулер. М. <emphasis>Рефакторинг: улучшение существующего кода. </emphasis>СПб.: Символ-Плюс, 2003</p>
</section><section id="n_28"><title><p>28</p>
</title><p>Один из основных принципов объектно-ориентированного программирования, утверждающий, что разрабатываемый код должен быть достаточно гибким, чтобы его можно было повторно использовать без дополнительных модификаций (то есть он должен быть открыт для использования, но закрыт для модификаций). – <emphasis>Примеч. пер.</emphasis></p>
</section><section id="n_29"><title><p>29</p>
</title><p>Binder, Bob. <emphasis>Testing Object-Oiiented Systems: Models, Patterns, and Tools. </emphasis>Boston: Addison-Wesley, 1999. Это действительно исчерпывающее руководство по тестированию.</p>
</section><section id="n_30"><title><p>30</p>
</title><p>Mars Lander – американский космический аппарат, был запущен в сторону Марса 3 января 1999 г. 3 декабря 1999 г. аппарат должен был осуществить посадку на Марс, однако в этот день связь с ним была потеряна, предположительно из-за ошибки в программном обеспечении. Стоимость миссии составила приблизительно 120 млн долларов, не считая стоимости ракеты-носителя и некоторого дополнительного оборудования. – <emphasis>Примеч. пер.</emphasis></p>
</section><section id="n_31"><title><p>31</p>
</title><p>Боб Мартин – известный деятель движения Agile Development (гибкая разработка), которого часто с уважением называют дядей. – <emphasis>Примеч. пер.</emphasis></p>
</section><section id="n_32"><title><p>32</p>
</title><p>Weinberg, Gerald. <emphasis>Systems Thinking. Quality Software Management. </emphasis>New York: Dorset House, 1992.</p>
</section><section id="n_33"><title><p>33</p>
</title><p>Если исходить из примеров диаграмм взаимовлияния, приводимых автором книги, элемент этого типа может также называться «характеристика». – <emphasis>Примеч. пер.</emphasis></p>
</section></body><binary content-type="image/png" id="i_001.png">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</binary><binary content-type="image/png" id="i_002.png">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</binary><binary content-type="image/png" id="i_003.png">iVBORw0KGgoAAAANSUhEUgAAAj0AAAA9CAIAAADJbE9/AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAE2UlEQVR42u3csW4UVxTGcd4iErxLxFvAO4QiiNooNWTLJAUUQAUiZZzSyJUp3Zl0ZCqQXLhauVuOONLhMjszO0bGWrO/T59Wd2fHLq4/nf89c+/6xoqIiOj66IYpICIi3CIiIsItIiLCrd77mz/dYmZm3ipv4Nav9x8wz7TAsLTwFSQHt1glYmlh3GKViFlaGLdYJWJpYcnBLVaJWFoYt1glYpYWxi1WiVhaWHJwi1UilhbGLVaJmKWFt41bf/z5V94Wg3j77PmLfHt09NbMqkTrPj8/b9P17t1/ZkxaxhxlpEKy9/C39+//lxm+fG59+PARt+RpI7cODt7E+OzsrMYsLdPcilfQ4svn1j/7/9ZPJbfitUimPKlEPW5lNixxpGUjtx49/r1dH+eKJwpOjCNLMY5W7PXrv2MQAcsrMcib855q9ONO045bX7gVYYpwZKQicNnXx2vl7NnzF6Ybt5JbEYxMRZQbkyYt09w6Pj6OQSx0ikPVe+XDw2BYcSsGuWERAWvBFuPgX/ySLEqMW6vs4iMig4vorFC1/GH7W7X4lQppmeZWKRusxE8iqgZxsbjVJi3X0xbNuDXMrVrd9LilPVeJxp4T1vMckyYt0/1WVpXqt6rNytfoxia4VQOzjVsD3JrYtMiLtVxi3Fo/1MPSMsatikptk7e76fmoeZBb0ZDpt3BrlFu1FCpuRcKKXrilEo31W9mms7RMnyfMtLSrnMxS5aflVlIti1K7v9VuujNufdldL27FR/Gaix3nCVWisf2tWBGbNGnZyK2qLbVEzoeEtTgubmXNafnkPCFuMX97JWK+lLT0TsavPydk3DJNjFu8RWnJp3/tSQ3cwi3cYtxiaWHcYpWIWVoYt1glYmlh3MItVolYWhi3WCVilhbGLVaJWFoYt77iFjMz81Z5A7dWRLMlMCQtdMXJwS1SiUhaCLdIJSKSFsItUolIWkhycItUIpIWwi1SiYikhXCLVCKSFpIc3CKViKSFcItUIiJpoe3h1quXr+o7zPd+ube/v394eBjj09PTuufunbt7ew9j8OTJ097Xnk9OTvwZdqQSxacRj3ob47q/DUakqOu6yE+bk7gYuTLDu8atLC+DH2V+xv6HAuHWqKKa3P75dhWUCFnwaZpbMTbvuNVyK1IRKcoVTMRmsVhEhJJbGa3lcplga3+cfuy0RB6mgdSuewi35gYr+bTeMOGWPF2IWxWPVi232vvbXNEP329NwAm3JOdbuJXL5DGe4ZY8ze+3YhCv0VdNcCuvaLlwq/2oHiNb0ODWrGAFigYhlNzqeWx/y98At1Zf75ImwNa5tf4baJe5Veq6brBlJ9zSb9F35FbvYuREv4Vbq9kPAyeObxBuDfDJ/hbNDEyscqK+tLVmcN0TUQnb38KtC3FrMEuEWwNynpAu2qB3Xbf6/GwnxnElQVVdVJ4ii7c9bjlPiFsZm3ibq5/81k0vS4Rbs4LV++bNxu9v4dbOVqLlcrlYLCotMc6DGJGZSEVdz2Lk+1s7npb2HHw+Ou713O25jMiS+cStC3CLSGDoatKy+CxTJzm4RbhF1yAt0Z37DzuEW4RbJC2EWyRPRNJCuEUqEUkLEW6RSkTSQrhF8kQkLYRbpBKRtBDN4hYzM/NWeYpbRERE2yzcIiKi66RPgAZfgfXmyWwAAAAASUVORK5CYII=</binary><binary content-type="image/jpeg" id="i_004.jpg"></binary><binary content-type="image/jpeg" id="i_005.jpg"></binary><binary content-type="image/png" id="i_006.png">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</binary><binary content-type="image/png" id="i_007.png"></binary><binary content-type="image/png" id="i_008.png"></binary><binary content-type="image/png" id="i_009.png"></binary><binary content-type="image/png" id="i_010.png">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</binary><binary content-type="image/png" id="i_011.png">iVBORw0KGgoAAAANSUhEUgAAAhIAAACqCAIAAAB3WTHZAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAPMElEQVR42u3dPY8b2ZWHcX8LAVJoeL/EzCQzChYOFgYkBevAE6o/gtrBOpigGXoDdbROmnkzZ85gso6ZqhUyZao9mD/m4rr40tXyWF2kfg8KDbJYLJJXwnnqnPtSv/sEAMBofqcJAAC0AQCgDQAAbQAAaAMAQBsAANrQBAAA2gAA0AYAgDYAALQBAKANAABtaAIAAG0AAGgDAEAbAADaAADQBgCANjQBAIA2AAC0AQCgDQAAbQAAaOMr5vLd5fNnL45sdUC22dVscbuobbVardfr+w/3Wg8AbeCf2G63618pW0Qb5Y+yyOtXb0oq9bcez2/my+WyjtFiAGgDx6ic4+7uLi65eHtRIqm/1++vyzGbzUb7AKANPEDlHLHIt998V7lIJSLlFc0CgDYwSiGljco/SiGVgvAHANrAKDabzXK5jD9KJOpXAGgDo7j/cF9pR8nj8t2lLnQAtIFRbLfbxe2CPADQBj5HHrOrmbIVANrAWHnMb+Ylj1KI1gBAGxjF/Yf7i7cXtUk7ANAGxpK0wzhdALSBsaxWqzJH/dUUAGgDo7j/cM8cAGgDzAGANsAcAGgDE2G9Xpc53NgDAG1gLFnJarvdagoAtIFR5DZQ2gEAbWAUm83m+bMXpgECoA2MZXG7uH5/rR0A0AZGsd1uv/3mOwkHANrAWOY3cwkHANrAWCrVqIRDOwCgDYzl4u2FVQ4B0AbGomMcAG3gEazX60o4tAMA2sBYnj97oREA0AbGUtlG5RzaAQBtYBSzq5k1cQHQBsayuF3Uph0A0AYOkp7w5XK52Wyije12WznH5bvL2ql9ANAGhsxv5s+fvajtx7/8WArJ49nVTMsAoA3sodKL16/exBbZvv3mOzfhAEAbOMhqteq1oTwFgDbwAJfvLuOMyjy0BgDawAOs1+towxhcALSBUVSeYR1cALSBsVSe4b7iAGgDY9lut+7xB4A2AAC0AQCgjTPj/sP93gVlN5uNhWYB0AaGLG4Xe8ezvn71xtwIALSBIVm0Y2CIzMc2NwIAbWAPu5IYzI3oC1mlmfUObWhTjuz3fPq13jWg/wI5oN67q7S9Jx+cZ+97AYA2/o3EE1kZMDOxc0+LCse1vy0dWDvbPO1+y0rmbeWPwUTu1MEGW166u7vr31WP2+qE1++v2/76eiWPwfnbefJG/4gAaOPL0auiQnAUUtSD2koA5Y/Z1ayO+fjxYy7zs3p5yy0S5evIelwyyBt7bbT8IEcmychhy+Wynb9ebQlQ7anj62x53LKNHNayjX9FGzmnlXQB0MajiS0So+OPBOjakwNyi6RWX8q1f3t7Bfp+Sdr+1WijvdSe1vH9+YtkNnl7391SJ+/v6Ne+YXv62dqY38z3JjH16bU/Wxkr94aqrb7tbhUOAG18jdR1dypRrVqV+H4oPg60UW8pDSTcDypRh7SRB/2VfhKO+OOICXa10W/JV/719KsRaWVrLmm1uyaYHFAH62sBaONrIeWjFpET1vsI2CtkoI1E/Iu3F3X9XpfkTQAPaqM/Z3tpkEAM1LWrjfrcCtblrXzulxwDFrXUT4426gv07uyNsjsWAABtnLw2+lvmDUZY9f0fu9pI7G5P0/NxXBtHRnDV2/siVb5Yk8fxItV0esgzEixGSTUsOkkuVT8qLpGaALRxYlQ4Xv7CIBy3LvHU9CuU91IZaCMRP6X/XPKnAJU37tVGO38F0JJHTpjVbWOU2pMC0a4n9mYbudif/oyTDDgeuKR+QjpRqsWIBKCNSdPG1PbjX0PFr1ZvqbjWd18PtFEv9UdWQEz4zp5+qfM++ejPX/7oD8sZsr+80n+xB/s2TnFkVOtEaSJJRlI6V9oCaGOil8CHXqrgPnLgUB32GSG7zr/3+jpFnq/znyO/vZxR5ki6Vn9/K4v0czYNPgZoA2ebFMYiLRfJ6INHxf02P6YklO76NidGCwO0gXPORdLTnrhfIkn/0PGkMDXDTOnvT3VoOUuANoCzTUR6hezNQjJ1/1BWkVVk+r4rgDZwVtfaGuG4QtIdUiLJwi0ZtHbcChnUoAFBGzhDZ1i4cGRDlQky5eWH71/+8T//+GAyUbJRqgJt4Nw4vuQJ9vLXy7/+7X/+lpk3JZJD/kiXu+YCbeCsyDgi0e1RVH6WYbuZ2nnIH3WMTA60gbOizR8crIGIkdpoxB+Z2z+/maernDYA2jgrcv/a33al269HG4c6LUoYpY2SR7Xt3//+vz/99JPmAm3gTNi9S6BJaiPJmvbHj7m7u3v5/ct2CyyNBtrAaZPbgWSJqqaNfs1dHE/Uqt2OyyATOz5+/Fh6rgdGVYE2cNpRLwvEViCrxxlJla5dpaqRVNM9arpfHf/61ZvaBrPKAdrAaWijH3Hbr7yrTvVYc+xdXCR3jN99SzrJd98F0AZOif6WTXgUbSnDdnfbPD5uX/IAbeC02R1Oisdmb5+xcHovD20I2sApMb+Zi1xPReTx+tUb6x6CNnAyrFar2dVMOzztP0GZ48HqFkAbmASbzebbb77TDk9Lu1GHDg/QBk6AutR1nTsRhadmpbcJtIFJM7+Z16YdJsJyuczaVpoCtIGJUqmGewpNLe24eHtRmywQtIGJUhHKYJ6pcWTmIEAbeGIqNlnle4Ks12sFK9AGJoqe2GmSgtXsamaEFWgDEg6MooRR2ih5MAdoA5NLOFTSJ8v1++syhwXEQBuYEKmku6SdsjmOLNgO0AaegPnN3Foj0885qB20gamQe4wrVTEHQBsYS25OpxIycXMYvwDawITImqyuZ6ecFLqJL2gDk7ueVQmZuDnMIQdtYFrMrmYqIVMmI98MyQVtYELXsyohE2dxu6B20AYmZw4rW0yZ+gdaLpfaAbSBaZlDP8dkMUkTtIEpYmWLif/rqCWCNjA55jfzuqq1Su4EKZ0/f/aC1EEbmByr1arMoZIu4QBoA2PJHWR1kks4ANrAWHL7BwWrCSYci9uFdgBtYKKkYDW/mUs7JkJZvBJB7QDawHTZbDaX7y4rVN3d3WmNKVD/FtagBG3gNNKO2dVMYf3JqeSvNu0A2sDU2W63GZ67uF2oWT0hGbCgHUAbOJmYlZqVZVmfEIsbgjZwYtzd3ZU5ajPO6kkoc9M2aAOnR270VCGMPL4wi9uFYbigDZy8PB68/t1ut8vl8uLtxfNnL7K5av7sbM9S6qANnIM8jvR55O7lFewq5KVHvf7WwVl514jSR6FXHLSB85FHOWB3tFWcccgo1++vrQr+WCpX0wigDZwJ6/V6djWruFY+qMflgwdHXtWRqi60AdrAV81ms8k8jx++f/nn//7z8WSiXq0jlaqOU+1Zfs10/crqSsnVyOku0nSgDZwPP/7lx9qSfBxZoaRiotFBx0neVi1Zf//0X39qgwuscg/awFlRMW7zC2WFdJuXIXavjo0OGkNlGG0cWhuNpllAGzgrKrT1FaoKfOkDL3/UZXKb7Vz7RcAxVOv12lCeAm3g3Dg0H7DSi/jj4u1F+eMf//cPt64bQ27WlE2LgTZwnlfHx1dsjT/+8Pv/+OH7l3vrVziUcFiZCrSBMySTNo6PpKp0pI75+eefKyC+fvWmHteD1WplMseRhEOqAdrA2VI5xMXbi0MOyAChfjhQmWZxu8hIoct3l/VYCjLAUmCgDZwzJYYKc3unFyTPOHThnAVIWgoyu5r1vehfeQ6nEUAbOHMqaUgHeBZwTT5Re0ZOO6hAWUeWOTIKK1Us0ROgDZx52lGxvmnjs+9P3iukZSGKNgBtAKMU0gpZ6QuZ38xLSGpZAG0AD2czJYzKY0oeSUTSo/60FukTrGwSI9AGMEVKFRWyK/koeVQi0izyhTtF8umD7cjQMoA2gKlYpOUiqWhV7J5dzXL5/+9LR6KN9rSMlYXlj8+CBGgDmBxli+VymXSkcpFeJJWR/FalpIE2Pv1STOtXIUwV6/r9df3t7dWypcHMx8xrSRdODhsUvnJAW0Fytz5Wf/vPak/zYLC1Y+oTM/qgfZlDx+9+pfaL+v27h2XJgN335oPaIgK7vyvfPy3pPzZtAF9UJAk9FR8z3zClrd4lj81LdrVRsa9N886nZG3gfFyCcn1KTNb253PrO6TM1YYA1M6MbG7nzxizOs/uirmJqvW3Hic052YneZr9g60dv/tlDh2fz92N4IP9/dMSRv97a2u39mqLqeSlksfu78r3321q0AbwBKWt3iUtL6kQ1nSSq+PcyvCQNta/UlEv4S+n7cNoonByiIT+RPa2mkge1An7qJ1FhdsSVUll4qSE1/ZN9mqjvk8Lu7tHtk8vLfXeqq83OE97+nnayBCGlgylieq3NMWmbVPfa+aupugXTqYN2gCmS4WzppP0l9S2t6d9b5d4mxgf2UROif4Jo4POjzpzbWWUPkwnn6j3Jrbm+IT1HNPi+CFt5I1NbHu1sVwu2zV+SEx/UBu5K3A+pfdE258zR7qD35umSF9Uv/Z+fnJ7ulcb7XsadEAbwEkyiGWDcJZb58YleZA1uPZerQ9iaE/KXKl65cGnX1cDO6KNHJyofUgbeytRY7SxezupvcWlpo1++mcEmQzvSAKxVxuDypX/gbQBnKQ29r6Uy+2KjJlZ0oo2qQv12qgDWt9DHwrbIl05VYu2ebWs0K/3NdBGInJM9qA2Wk/DrsaOF6lKgamDtQ86lG0Mfm9+zkAb6fd+sEiVpCSFRP8DaQM4H20kJrbsIU9brb+iXl5Kr3WdZ2CF1KMS0GOa5CuJqtnTh/uBNgZdIIe0kQ9t8TdfJglNztNqUIf6NvI9swDM3r6N9Me03/up68OIWtrCZQNRHe/byKJn/gfSBnA+2kg8zSTEVmBJVE24rKjXd6F/6kZetXvrDiSUMFqhvM1NSWzN+Wtnhuf2o7aOa6P9hNwHvn2ZNv1lkHy0E+Ziv/2uNrJrb5d4+0r5XW1/1tXP78oP7POnvdrIzjbsyv9A2gBOjMwLOfRq1mTMfJHMBGyRri7zM3ArVZ12sV9P0ycxWEa+Tz4SkZswenOkJ78et0SkPnfQn9+/mg/NisXRVb5MTtgfltO2E7atvSX7B5/bnubtbW3KvjCVNcdy/+BBz1AvhjR12wYHgzYA/BO5Tu8TiN1j9BKDNgB8autuDeo/tAHaALCH1WqV2o6mAG0AAGgDAEAbAADaAACANgAAtAEAoA0AAG0AAGgDAEAbAADQBgCANgAAX5j/Bz1O7rKc2ysdAAAAAElFTkSuQmCC</binary><binary content-type="image/png" id="i_012.png"></binary><binary content-type="image/png" id="i_013.png"></binary><binary content-type="image/png" id="i_014.png">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</binary><binary content-type="image/png" id="i_015.png">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</binary><binary content-type="image/png" id="i_016.png">iVBORw0KGgoAAAANSUhEUgAAAccAAACqCAIAAABXgxPVAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAL/ElEQVR42u3dMW8USRqH8f0WSPBRgNN+gtNKgG6/gUe6DW4zHOzpNsIJoSfZjXBym+CIxBnBZHsSGdKEh8nW6aTcK/66V7Vte9bYjQ3s71Fr1FNTXd1TA4/fqq6q/uodAGA+vlIFAMCqAMCqAMCqAABWBQBWBQBWBQCwKgCwKgCwKgCwKgCAVQGAVQGAVQEArAoArAoArAoAYFUAYFUAYFUAYFUAAKsCAKsCAKsCAFgVAFgVAFgVAFgVAMCqAMCqAMCq2H28e/vWnS3bwwePKk9te0/2Dp8f1vbq1av1er3ZbNQewKr4YI7fHK/fs1qtYtUy7GJnUcK9d/d+7R88Ozg6OqoM6gpgVVyJk5OTkml5drm/rJC2PBvJVjCrcgBWxVXZbDbl07JqItm9J3sV3pZ51QzAqpghjC2lllhbr+oEYFXME8CWUit6vXf3foWxQleAVTEPx2+Ol/vLCl3rlVsBVsVsPQNx6+HzQ2OzAFbFbG7dfbx77+59owUAVsVslFJLrBW6CloBVsU8lE8zp+D4zbHaAFgV83Dw7KCCVmIFWBWzsVqtiBVgVRArwKr45MXq5hXAqpiN5f5y9/GuegBYFfNQgepiZ3F0dKQqAFbFPKzXa/0AAKti5n6A2tQDwKqYh5OTk9u37liEBWBVzBmuHj4/VA8Aq2Ie1uv1wweP1APAqpiNsqpJAQCrYs5OAEOsAFbFbOTJV+oBYFXMQzX/da0CrIo5uX3rjkoAWBWz4YYVwKqYoeG/3F9GpruPd9frdR5/bfgqwKq4JHkOawWq3/z1mx//9WPtW3oVYFVcngpOS6kl094MsQJYFVeimvyt1MXOQoUArIqr0uHqer1WGwCrYp5wVaAKsCrmDFfLreoBYFXMFq56KADAqn8KDp4d1KYeAFbFVangMYufLnYW7iMBrIorcfj8cBxGmvH5uj4BVsXllbr7eLc0Wq8Vq9ZOxj8laM1HnbneZkLUwbODzJWqnfSTjjmPjo6Ss1LGXoUxT85YJVSx/TyrOmTvyV5pva4kB1ZKn3S5v8x+p3Ri9quceluHVyGCboBVb4AINFIrN0VPr169qsQ8ErV2Mlu/JNVDTUuaGSAVKUeUnTMP/kvOShmX/us8daJyX3mz3tZOnmud+VfxbKxdJee89Vr7la0+6pToO+fqK6yS4/Q+FwBWvT7G0aNt1aRnv91UsiupRWcVJ1ZiPHjavzFmW3Vc+i956vA+qiVeKsxOvXYQWolxZSXGwm3PLNESI+cUFZ+Oj3Gt72UtV4BVr5tSz0Vi1USUGcPfLessmNKHJ2fyRKYd1aY9nsQONidbzlI7k3FXyZw+gXzUVq1i0wURqyY+nWx+YoBVr5Vuy5cN67W2Shn7VaPX003vd+97PGPbPDSlPirBJaIccyYxZxmtmmxNqTlW7WCzdvJRvFyFJIxNSjJXSofD6aVd/x4/McCq103MOBkD0M3wcTGUdmUJsR8/lYAxObuHdOLfSQ9AOl67hG74J87t21lVbBZj7ZPGuR3qpoS2amLnvouVPxJ+X4BVb4B4MBqaqHBcDKUF1yMHIrJ0pybnGE6eZ9V3w3KrCYSjv7qMxLOVmJ2OVbsXtT1b+4lq26rl0/x56MP7bwMAVr0BVu85Hcl2Yhrp7bISXEWLPQO1UnrJ1DHnpLRWbe7UVwm1M+YsFVZiRaaJOsei0t5/+/ZtvbYxY/nulMhAqzqcUgFWBQBWBQBWBQBWBQCwKgCwKgCwKnBVesJrZh+MW2bTZutZW55oAFbFlAz+H+2QmaPHb44n8z6zkEo+Xa1WkxGm+SjjVZM+lpzZUMlZJdc2pnTi+LbKOX1V2e9jc4oxz1jI5OI/qFp6pmzIINlsB88OWrXjU7gz8DZ5Kv94wQCr/rmsOq4dlaWksuzpZI2SnuOUyUt5zeyA0kfWDeinUkcrvepVz33KhNSEfuO6J72qS11A5kT1FKkIcVzTr4/NKdqhfbran0zA/dirAaRy6tuN2h3D3voibVsRLlj1CyerlmQ/y6C8+/2SgD1hNDulidJoqSHL/b37//osiRNHTcfRPb01800jx/OsmsUGE+Wl2EzW+kOrRugpJOsSpJDzJs5eG4n661tkKlr/zWjVimrBql8a45Km9b89Qtxi1V7Yf1wVMI3xLPsfZbSyyyOZ8p/5/j23tcvM+gN1SIyclbB7VcBe47UOT+aUNlo1q8MkKuy/E7H8jVt1Sw9DXXYm1yaqzSzbrCfrnyVY9fMmS5xEr5HRFquOs+97BeuEivFp2+3d8PiAXkF1jDfHrddMmdwpisTPXDU1+bP8VSLB7kbovojr6QGY0bMJtPPXJYt2j53FAKt+HmSFvfo/3CvnXyRW7YZ/YsM2VweYWUEqz1BJCd0Ve14PwLg8YE4Rp2zpAUizenLNubaEfp+FVSf03b/UbXdG65YFq34e9GOmesWp7f2q2c9jrrvFnc7WNM9zbD/gpD3YC6SeZ9U0h8u8nSeh8Rarjk8tTCHpmkhXxqfZA3CJHyi9K+mWzXMSdRSAVT9pxuesbLdqckav3XfZ99zTfq+3CRLjxPZgL5D6h2MAsvXghC1W7dg5hdRXOPNZLF/ML1Xfq2q1vnXfoNNLAFb9RK06Nr3PZOxIPf3f+MzEy5H75n6UC8awaSvk+V3qDax686RpeZFl87+8uO9LogPYDOSwYjdY9cZIV2a3o7eHkJVZY/MTp36gUa9+L7AqMJteM0a4DDuZAQywKnClzoG9J3s9k0KFgFWBGchgtYSup5/5CFYFcElKqYudRdZk0C3AqgDmYb1eZ2Qxt7IqgI/iVrXBqgBmc2umFxvlyqoAZmO1WmU+sfVeWRXAPGw2m0y00yHAqgBmI2vc1GZeFqsCmI0Mbu3FIcGqAK5KVtHtZzKCVQFclTz2cbGzcAuLVQHMRlZp0c3KqgBmI+OuiJVVARArWBUgVrAqQKxgVQCX4ejoqJ9iC1YFMAPL/eUfPpQXrArgolSgWuGqmVesCmA2jt8c37t73+wAVgUwG4fPD3cf76oHVgUwG9a6ZlUAc7JarUqs6oFVAczGYmfhUdisCmDOcLXEqh5YFcBsPHzwyGwrVgUwGwfPDmpTD6wKYB4qUHXPilUB6ARgVQCfKsv9pQmsrApgNlarlfVWWBXAbFTz3/gqVgUwJ7dv3VEJrArgSqzX675JNS5hZbYVqwK4DJvN5uGDR1lr9ft/fF+vecz14fNDlcOqAC4Zrlbbf9x0sLIqgCtR8eloVQNXWRXAlTg5OWmllmFVCKsCmC1c9cwVVgUwW7gqUGVVAHOGq3pUWRXAnOGqSmBVAGBVABfmv++ZJG42m0qsV/XDqgA+TKm5L//rr/8Z03/66edKfPr0qSpiVQCXsepEoF//5WtWBasCl7fquJrU69evT6u2gtlf/v1LbfXpWEK9rcQXL1789ttv56VsOTy8fPnyxe9J58PpoqqcSc6LnwWsClyTVdPe706Aevvd37+rcLWtWm8rw7d/+zYxbGlr7ChIem1V2umULYc3/VFtOTA+HY+KKOuSOk/SS6zbLxKsCly3VUtMJaN2aFmpUtqqZduWWuRVH3VI21KrEqLFMeWHH/553uGnKQ/2R5PCq5x8VJfUefrit1wkWBW4GasmMGydVbN6jFXrbeVM6zvBYCRYOXucQOVJIDmmpHl+5uHbrZqYt5v5Kbmu7TyrXvwsYFXgOqyanVJSaasCw0SssWpZMo3rsWnf4htLO52y5fDtVp209Ltb4DyrXvwsYFXgOqyaBntc9vLly9GqcWU3rrsxPolVO6KcpJx3+HarTgqv66yrqrfnWfXiZwGrAtdk1XpNrBeXtVXjyrTl030ZYfWdrkwZqMRy2STl6XvOPHy7VVN4HVtF1bHpJ63EUZfjxV/8LGBV4JqsWkqq/TT/R6vGj32DPuqMvyp+7I8q1C0Dnk7ZcvgWq6bwHvWV5n/2++b+ePEXPwtYFfjoYh3vL525Xzuv35OUcYZrTDqODz0z5bzDRxKWTlLGA/v215kXf8GzgFUBgFUBgFUBAKwKAKwKAKwKAKwKAGBVAGBVAGBVAACrAgCrAgCrAgCrAgBYFQBYFQBYFQDwIfwPV5776HAovOUAAAAASUVORK5CYII=</binary><binary content-type="image/png" id="i_017.png">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</binary><binary content-type="image/png" id="i_018.png">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</binary><binary content-type="image/jpeg" id="cover.jpg"></binary></FictionBook>